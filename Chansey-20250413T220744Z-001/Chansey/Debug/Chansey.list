
Chansey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f710  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  0800f8d0  0800f8d0  000108d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010424  08010424  00012494  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010424  08010424  00011424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801042c  0801042c  00012494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801042c  0801042c  0001142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010430  08010430  00011430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000494  20040000  08010434  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20040494  080108c8  00012494  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040a50  080108c8  00012a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012494  2**0
                  CONTENTS, READONLY
 12 .debug_info   000203ef  00000000  00000000  000124c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d10  00000000  00000000  000328b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  000365c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ff  00000000  00000000  00037d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db71  00000000  00000000  00038f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e14a  00000000  00000000  00066a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bcf3  00000000  00000000  00084bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001908cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007224  00000000  00000000  00190910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00197b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040494 	.word	0x20040494
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f8b8 	.word	0x0800f8b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040498 	.word	0x20040498
 80001fc:	0800f8b8 	.word	0x0800f8b8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	0000      	movs	r0, r0
	...

08000fa8 <getBodyTemp>:
#include "bodytemp.h"

float getBodyTemp(I2C_HandleTypeDef *hi2c1){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af04      	add	r7, sp, #16
 8000fae:	6078      	str	r0, [r7, #4]
	char buffer[2];
	float temperature;
	float total;
	int i = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
	while(i < 30){
 8000fb4:	e059      	b.n	800106a <getBodyTemp+0xc2>
		HAL_I2C_Mem_Read(hi2c1, 0xB4, 0x07, 1, (uint8_t*)buffer, 2, 100);
 8000fb6:	2364      	movs	r3, #100	@ 0x64
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	21b4      	movs	r1, #180	@ 0xb4
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f003 fb42 	bl	8004654 <HAL_I2C_Mem_Read>
		int raw = (((buffer[1] << 8) | buffer[0]));
 8000fd0:	7b7b      	ldrb	r3, [r7, #13]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	7b3a      	ldrb	r2, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
		temperature = (raw*0.02 - 273.15)*(9.0/5.0) + 32.0 + 2.2; //conversion
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff faba 	bl	8000554 <__aeabi_i2d>
 8000fe0:	a32f      	add	r3, pc, #188	@ (adr r3, 80010a0 <getBodyTemp+0xf8>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fb1f 	bl	8000628 <__aeabi_dmul>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	a32d      	add	r3, pc, #180	@ (adr r3, 80010a8 <getBodyTemp+0x100>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff f95e 	bl	80002b8 <__aeabi_dsub>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	a32a      	add	r3, pc, #168	@ (adr r3, 80010b0 <getBodyTemp+0x108>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fb0d 	bl	8000628 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <getBodyTemp+0xf0>)
 800101c:	f7ff f94e 	bl	80002bc <__adddf3>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	a319      	add	r3, pc, #100	@ (adr r3, 8001090 <getBodyTemp+0xe8>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff f945 	bl	80002bc <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fdcd 	bl	8000bd8 <__aeabi_d2f>
 800103e:	4603      	mov	r3, r0
 8001040:	613b      	str	r3, [r7, #16]
		if(temperature >= 80){
 8001042:	edd7 7a04 	vldr	s15, [r7, #16]
 8001046:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800109c <getBodyTemp+0xf4>
 800104a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	db0a      	blt.n	800106a <getBodyTemp+0xc2>
			i++;
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	3301      	adds	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
			total += temperature;
 800105a:	ed97 7a07 	vldr	s14, [r7, #28]
 800105e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a07 	vstr	s15, [r7, #28]
	while(i < 30){
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b1d      	cmp	r3, #29
 800106e:	dda2      	ble.n	8000fb6 <getBodyTemp+0xe>
		}
		//temperature may need some calibration
	}

	  return total/30;
 8001070:	edd7 7a07 	vldr	s15, [r7, #28]
 8001074:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001078:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800107c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	9999999a 	.word	0x9999999a
 8001094:	40019999 	.word	0x40019999
 8001098:	40400000 	.word	0x40400000
 800109c:	42a00000 	.word	0x42a00000
 80010a0:	47ae147b 	.word	0x47ae147b
 80010a4:	3f947ae1 	.word	0x3f947ae1
 80010a8:	66666666 	.word	0x66666666
 80010ac:	40711266 	.word	0x40711266
 80010b0:	cccccccd 	.word	0xcccccccd
 80010b4:	3ffccccc 	.word	0x3ffccccc

080010b8 <temp_ready>:

uint8_t temp_ready(I2C_HandleTypeDef *hi2c1){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_IsDeviceReady(hi2c1, 0xB5, 1, 100) == HAL_OK){
 80010c0:	2364      	movs	r3, #100	@ 0x64
 80010c2:	2201      	movs	r2, #1
 80010c4:	21b5      	movs	r1, #181	@ 0xb5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f003 fbde 	bl	8004888 <HAL_I2C_IsDeviceReady>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <temp_ready+0x1e>
		 return 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <temp_ready+0x20>
	}
	return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <sendToApp>:
#include "communicate.h"

void sendToApp(UART_HandleTypeDef *huart1, float *user_stats){
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	uint8_t buffer[sizeof(float)*4];
	memcpy(buffer, user_stats, sizeof(buffer));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f107 0408 	add.w	r4, r7, #8
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 100);
 80010fa:	f107 0108 	add.w	r1, r7, #8
 80010fe:	1d38      	adds	r0, r7, #4
 8001100:	2364      	movs	r3, #100	@ 0x64
 8001102:	2210      	movs	r2, #16
 8001104:	f006 faee 	bl	80076e4 <HAL_UART_Transmit>
}
 8001108:	bf00      	nop
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}

08001110 <SendCommand>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00  // #255 NBSP
};


void SendCommand(uint8_t reg){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); // CS low
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	4810      	ldr	r0, [pc, #64]	@ (8001160 <SendCommand+0x50>)
 8001120:	f002 ffbe 	bl	80040a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); // DC low (command)
 8001124:	2200      	movs	r2, #0
 8001126:	2120      	movs	r1, #32
 8001128:	480d      	ldr	r0, [pc, #52]	@ (8001160 <SendCommand+0x50>)
 800112a:	f002 ffb9 	bl	80040a0 <HAL_GPIO_WritePin>
	  TX_Buffer[0] = reg;
 800112e:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <SendCommand+0x54>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	7013      	strb	r3, [r2, #0]
	  HAL_SPI_Transmit(&hspi3, &TX_Buffer[0], 1, 1000);
 8001134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001138:	2201      	movs	r2, #1
 800113a:	490a      	ldr	r1, [pc, #40]	@ (8001164 <SendCommand+0x54>)
 800113c:	480a      	ldr	r0, [pc, #40]	@ (8001168 <SendCommand+0x58>)
 800113e:	f005 fd88 	bl	8006c52 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET); // DC high
 8001142:	2201      	movs	r2, #1
 8001144:	2120      	movs	r1, #32
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <SendCommand+0x50>)
 8001148:	f002 ffaa 	bl	80040a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // CS high (start)
 800114c:	2201      	movs	r2, #1
 800114e:	2110      	movs	r1, #16
 8001150:	4803      	ldr	r0, [pc, #12]	@ (8001160 <SendCommand+0x50>)
 8001152:	f002 ffa5 	bl	80040a0 <HAL_GPIO_WritePin>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	48001400 	.word	0x48001400
 8001164:	200404b0 	.word	0x200404b0
 8001168:	2004069c 	.word	0x2004069c

0800116c <SendParameter>:

void SendParameter(uint8_t data) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); // CS low
 8001176:	2200      	movs	r2, #0
 8001178:	2110      	movs	r1, #16
 800117a:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <SendParameter+0x3c>)
 800117c:	f002 ff90 	bl	80040a0 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET); // DC high (parameter)
	  TX_Buffer[0] = data;
 8001180:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <SendParameter+0x40>)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	7013      	strb	r3, [r2, #0]
	  HAL_SPI_Transmit(&hspi3, &TX_Buffer[0], 1, 1000);
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	2201      	movs	r2, #1
 800118c:	4907      	ldr	r1, [pc, #28]	@ (80011ac <SendParameter+0x40>)
 800118e:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <SendParameter+0x44>)
 8001190:	f005 fd5f 	bl	8006c52 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // cs high
 8001194:	2201      	movs	r2, #1
 8001196:	2110      	movs	r1, #16
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <SendParameter+0x3c>)
 800119a:	f002 ff81 	bl	80040a0 <HAL_GPIO_WritePin>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	48001400 	.word	0x48001400
 80011ac:	200404b0 	.word	0x200404b0
 80011b0:	2004069c 	.word	0x2004069c

080011b4 <DisplayBegin>:
void DisplayBegin() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	// init sequence from Adafruit
	SendCommand(HX8357_SWRESET);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff ffa9 	bl	8001110 <SendCommand>
	HAL_Delay(100);
 80011be:	2064      	movs	r0, #100	@ 0x64
 80011c0:	f002 fca6 	bl	8003b10 <HAL_Delay>

	SendCommand(HX8357D_SETC);
 80011c4:	20b9      	movs	r0, #185	@ 0xb9
 80011c6:	f7ff ffa3 	bl	8001110 <SendCommand>
	SendParameter(0xFF);
 80011ca:	20ff      	movs	r0, #255	@ 0xff
 80011cc:	f7ff ffce 	bl	800116c <SendParameter>
	SendParameter(0x83);
 80011d0:	2083      	movs	r0, #131	@ 0x83
 80011d2:	f7ff ffcb 	bl	800116c <SendParameter>
	SendParameter(0x57);
 80011d6:	2057      	movs	r0, #87	@ 0x57
 80011d8:	f7ff ffc8 	bl	800116c <SendParameter>

	HAL_Delay(300);
 80011dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011e0:	f002 fc96 	bl	8003b10 <HAL_Delay>

	SendCommand(HX8357_SETRGB); // 4
 80011e4:	20b3      	movs	r0, #179	@ 0xb3
 80011e6:	f7ff ff93 	bl	8001110 <SendCommand>
	SendParameter(0x80);
 80011ea:	2080      	movs	r0, #128	@ 0x80
 80011ec:	f7ff ffbe 	bl	800116c <SendParameter>
	SendParameter(0x00);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ffbb 	bl	800116c <SendParameter>
	SendParameter(0x06);
 80011f6:	2006      	movs	r0, #6
 80011f8:	f7ff ffb8 	bl	800116c <SendParameter>
	SendParameter(0x06);
 80011fc:	2006      	movs	r0, #6
 80011fe:	f7ff ffb5 	bl	800116c <SendParameter>

	SendCommand(HX8357D_SETCOM); // 1
 8001202:	20b6      	movs	r0, #182	@ 0xb6
 8001204:	f7ff ff84 	bl	8001110 <SendCommand>
	SendParameter(0x25);
 8001208:	2025      	movs	r0, #37	@ 0x25
 800120a:	f7ff ffaf 	bl	800116c <SendParameter>

	SendCommand(HX8357_SETOSC); // 1
 800120e:	20b0      	movs	r0, #176	@ 0xb0
 8001210:	f7ff ff7e 	bl	8001110 <SendCommand>
	SendParameter(0x68);
 8001214:	2068      	movs	r0, #104	@ 0x68
 8001216:	f7ff ffa9 	bl	800116c <SendParameter>

	SendCommand(HX8357_SETPANEL);
 800121a:	20cc      	movs	r0, #204	@ 0xcc
 800121c:	f7ff ff78 	bl	8001110 <SendCommand>
	SendParameter(0x05);
 8001220:	2005      	movs	r0, #5
 8001222:	f7ff ffa3 	bl	800116c <SendParameter>

	SendCommand(HX8357_SETPWR1); // 6
 8001226:	20b1      	movs	r0, #177	@ 0xb1
 8001228:	f7ff ff72 	bl	8001110 <SendCommand>
	SendParameter(0x00);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ff9d 	bl	800116c <SendParameter>
	SendParameter(0x15);
 8001232:	2015      	movs	r0, #21
 8001234:	f7ff ff9a 	bl	800116c <SendParameter>
	SendParameter(0x1C);
 8001238:	201c      	movs	r0, #28
 800123a:	f7ff ff97 	bl	800116c <SendParameter>
	SendParameter(0x1C);
 800123e:	201c      	movs	r0, #28
 8001240:	f7ff ff94 	bl	800116c <SendParameter>
	SendParameter(0x83);
 8001244:	2083      	movs	r0, #131	@ 0x83
 8001246:	f7ff ff91 	bl	800116c <SendParameter>
	SendParameter(0xAA);
 800124a:	20aa      	movs	r0, #170	@ 0xaa
 800124c:	f7ff ff8e 	bl	800116c <SendParameter>

	SendCommand(HX8357D_SETSTBA); // 6
 8001250:	20c0      	movs	r0, #192	@ 0xc0
 8001252:	f7ff ff5d 	bl	8001110 <SendCommand>
	SendParameter(0x50);
 8001256:	2050      	movs	r0, #80	@ 0x50
 8001258:	f7ff ff88 	bl	800116c <SendParameter>
	SendParameter(0x50);
 800125c:	2050      	movs	r0, #80	@ 0x50
 800125e:	f7ff ff85 	bl	800116c <SendParameter>
	SendParameter(0x01);
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff ff82 	bl	800116c <SendParameter>
	SendParameter(0x3C);
 8001268:	203c      	movs	r0, #60	@ 0x3c
 800126a:	f7ff ff7f 	bl	800116c <SendParameter>
	SendParameter(0x1E);
 800126e:	201e      	movs	r0, #30
 8001270:	f7ff ff7c 	bl	800116c <SendParameter>
	SendParameter(0x08);
 8001274:	2008      	movs	r0, #8
 8001276:	f7ff ff79 	bl	800116c <SendParameter>

	SendCommand(HX8357D_SETCYC); // 7
 800127a:	20b4      	movs	r0, #180	@ 0xb4
 800127c:	f7ff ff48 	bl	8001110 <SendCommand>
	SendParameter(0x02);
 8001280:	2002      	movs	r0, #2
 8001282:	f7ff ff73 	bl	800116c <SendParameter>
	SendParameter(0x40);
 8001286:	2040      	movs	r0, #64	@ 0x40
 8001288:	f7ff ff70 	bl	800116c <SendParameter>
	SendParameter(0x00);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff6d 	bl	800116c <SendParameter>
	SendParameter(0x2A);
 8001292:	202a      	movs	r0, #42	@ 0x2a
 8001294:	f7ff ff6a 	bl	800116c <SendParameter>
	SendParameter(0x2A);
 8001298:	202a      	movs	r0, #42	@ 0x2a
 800129a:	f7ff ff67 	bl	800116c <SendParameter>
	SendParameter(0x0D);
 800129e:	200d      	movs	r0, #13
 80012a0:	f7ff ff64 	bl	800116c <SendParameter>
	SendParameter(0x78);
 80012a4:	2078      	movs	r0, #120	@ 0x78
 80012a6:	f7ff ff61 	bl	800116c <SendParameter>

	SendCommand(HX8357D_SETGAMMA); // 34
 80012aa:	20e0      	movs	r0, #224	@ 0xe0
 80012ac:	f7ff ff30 	bl	8001110 <SendCommand>
	SendParameter(0x02);
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff ff5b 	bl	800116c <SendParameter>
	SendParameter(0x0A);
 80012b6:	200a      	movs	r0, #10
 80012b8:	f7ff ff58 	bl	800116c <SendParameter>
	SendParameter(0x11);
 80012bc:	2011      	movs	r0, #17
 80012be:	f7ff ff55 	bl	800116c <SendParameter>
	SendParameter(0x1d);
 80012c2:	201d      	movs	r0, #29
 80012c4:	f7ff ff52 	bl	800116c <SendParameter>
	SendParameter(0x23);
 80012c8:	2023      	movs	r0, #35	@ 0x23
 80012ca:	f7ff ff4f 	bl	800116c <SendParameter>
	SendParameter(0x35);
 80012ce:	2035      	movs	r0, #53	@ 0x35
 80012d0:	f7ff ff4c 	bl	800116c <SendParameter>
	SendParameter(0x41);
 80012d4:	2041      	movs	r0, #65	@ 0x41
 80012d6:	f7ff ff49 	bl	800116c <SendParameter>
	SendParameter(0x4b);
 80012da:	204b      	movs	r0, #75	@ 0x4b
 80012dc:	f7ff ff46 	bl	800116c <SendParameter>
	SendParameter(0x4b);
 80012e0:	204b      	movs	r0, #75	@ 0x4b
 80012e2:	f7ff ff43 	bl	800116c <SendParameter>
	SendParameter(0x42);
 80012e6:	2042      	movs	r0, #66	@ 0x42
 80012e8:	f7ff ff40 	bl	800116c <SendParameter>
	SendParameter(0x3A);
 80012ec:	203a      	movs	r0, #58	@ 0x3a
 80012ee:	f7ff ff3d 	bl	800116c <SendParameter>
	SendParameter(0x27);
 80012f2:	2027      	movs	r0, #39	@ 0x27
 80012f4:	f7ff ff3a 	bl	800116c <SendParameter>
	SendParameter(0x1B);
 80012f8:	201b      	movs	r0, #27
 80012fa:	f7ff ff37 	bl	800116c <SendParameter>
	SendParameter(0x08);
 80012fe:	2008      	movs	r0, #8
 8001300:	f7ff ff34 	bl	800116c <SendParameter>
	SendParameter(0x09);
 8001304:	2009      	movs	r0, #9
 8001306:	f7ff ff31 	bl	800116c <SendParameter>
	SendParameter(0x03);
 800130a:	2003      	movs	r0, #3
 800130c:	f7ff ff2e 	bl	800116c <SendParameter>
	SendParameter(0x02);
 8001310:	2002      	movs	r0, #2
 8001312:	f7ff ff2b 	bl	800116c <SendParameter>
	SendParameter(0x0A);
 8001316:	200a      	movs	r0, #10
 8001318:	f7ff ff28 	bl	800116c <SendParameter>
	SendParameter(0x11);
 800131c:	2011      	movs	r0, #17
 800131e:	f7ff ff25 	bl	800116c <SendParameter>
	SendParameter(0x1d);
 8001322:	201d      	movs	r0, #29
 8001324:	f7ff ff22 	bl	800116c <SendParameter>
	SendParameter(0x23);
 8001328:	2023      	movs	r0, #35	@ 0x23
 800132a:	f7ff ff1f 	bl	800116c <SendParameter>
	SendParameter(0x35);
 800132e:	2035      	movs	r0, #53	@ 0x35
 8001330:	f7ff ff1c 	bl	800116c <SendParameter>
	SendParameter(0x41);
 8001334:	2041      	movs	r0, #65	@ 0x41
 8001336:	f7ff ff19 	bl	800116c <SendParameter>
	SendParameter(0x4b);
 800133a:	204b      	movs	r0, #75	@ 0x4b
 800133c:	f7ff ff16 	bl	800116c <SendParameter>
	SendParameter(0x4b);
 8001340:	204b      	movs	r0, #75	@ 0x4b
 8001342:	f7ff ff13 	bl	800116c <SendParameter>
	SendParameter(0x42);
 8001346:	2042      	movs	r0, #66	@ 0x42
 8001348:	f7ff ff10 	bl	800116c <SendParameter>
	SendParameter(0x3A);
 800134c:	203a      	movs	r0, #58	@ 0x3a
 800134e:	f7ff ff0d 	bl	800116c <SendParameter>
	SendParameter(0x27);
 8001352:	2027      	movs	r0, #39	@ 0x27
 8001354:	f7ff ff0a 	bl	800116c <SendParameter>
	SendParameter(0x1B);
 8001358:	201b      	movs	r0, #27
 800135a:	f7ff ff07 	bl	800116c <SendParameter>
	SendParameter(0x08);
 800135e:	2008      	movs	r0, #8
 8001360:	f7ff ff04 	bl	800116c <SendParameter>
	SendParameter(0x09);
 8001364:	2009      	movs	r0, #9
 8001366:	f7ff ff01 	bl	800116c <SendParameter>
	SendParameter(0x03);
 800136a:	2003      	movs	r0, #3
 800136c:	f7ff fefe 	bl	800116c <SendParameter>
	SendParameter(0x00);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fefb 	bl	800116c <SendParameter>
	SendParameter(0x01);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fef8 	bl	800116c <SendParameter>

	SendCommand(HX8357_COLMOD);
 800137c:	203a      	movs	r0, #58	@ 0x3a
 800137e:	f7ff fec7 	bl	8001110 <SendCommand>
	SendParameter(0x55);
 8001382:	2055      	movs	r0, #85	@ 0x55
 8001384:	f7ff fef2 	bl	800116c <SendParameter>

	SendCommand(HX8357_MADCTL);
 8001388:	2036      	movs	r0, #54	@ 0x36
 800138a:	f7ff fec1 	bl	8001110 <SendCommand>
	SendParameter(0xC0);
 800138e:	20c0      	movs	r0, #192	@ 0xc0
 8001390:	f7ff feec 	bl	800116c <SendParameter>

	SendCommand(HX8357_TEON);
 8001394:	2035      	movs	r0, #53	@ 0x35
 8001396:	f7ff febb 	bl	8001110 <SendCommand>
	SendParameter(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fee6 	bl	800116c <SendParameter>

	SendCommand(HX8357_TEARLINE);
 80013a0:	2044      	movs	r0, #68	@ 0x44
 80013a2:	f7ff feb5 	bl	8001110 <SendCommand>
	SendParameter(0x00);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fee0 	bl	800116c <SendParameter>
	SendParameter(0x02);
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff fedd 	bl	800116c <SendParameter>

	SendCommand(HX8357_SLPOUT);
 80013b2:	2011      	movs	r0, #17
 80013b4:	f7ff feac 	bl	8001110 <SendCommand>
	HAL_Delay(150);
 80013b8:	2096      	movs	r0, #150	@ 0x96
 80013ba:	f002 fba9 	bl	8003b10 <HAL_Delay>

	SendCommand(HX8357_DISPON);
 80013be:	2029      	movs	r0, #41	@ 0x29
 80013c0:	f7ff fea6 	bl	8001110 <SendCommand>
	HAL_Delay(50);
 80013c4:	2032      	movs	r0, #50	@ 0x32
 80013c6:	f002 fba3 	bl	8003b10 <HAL_Delay>

	  SendCommand(0x3A); // setting color format
 80013ca:	203a      	movs	r0, #58	@ 0x3a
 80013cc:	f7ff fea0 	bl	8001110 <SendCommand>
	  SendParameter(0b101);
 80013d0:	2005      	movs	r0, #5
 80013d2:	f7ff fecb 	bl	800116c <SendParameter>

	  SendCommand(0x36);     // MADCTL // set orientation to be landscape
 80013d6:	2036      	movs	r0, #54	@ 0x36
 80013d8:	f7ff fe9a 	bl	8001110 <SendCommand>
	  SendParameter(0xA0);
 80013dc:	20a0      	movs	r0, #160	@ 0xa0
 80013de:	f7ff fec5 	bl	800116c <SendParameter>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <SetAddressWindow>:

void SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80013e6:	b590      	push	{r4, r7, lr}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4604      	mov	r4, r0
 80013ee:	4608      	mov	r0, r1
 80013f0:	4611      	mov	r1, r2
 80013f2:	461a      	mov	r2, r3
 80013f4:	4623      	mov	r3, r4
 80013f6:	80fb      	strh	r3, [r7, #6]
 80013f8:	4603      	mov	r3, r0
 80013fa:	80bb      	strh	r3, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	803b      	strh	r3, [r7, #0]
	//adafruit has CS_ACTIVE specified here
	SendCommand(HX8357_CASET);
 8001404:	202a      	movs	r0, #42	@ 0x2a
 8001406:	f7ff fe83 	bl	8001110 <SendCommand>
	SendParameter((x0>>8) & 0xFF);
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	b29b      	uxth	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff feaa 	bl	800116c <SendParameter>
	SendParameter(x0 & 0xFF);
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fea5 	bl	800116c <SendParameter>
	SendParameter((x1>>8) & 0xFF);
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe9e 	bl	800116c <SendParameter>
	SendParameter(x1 & 0xFF);
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fe99 	bl	800116c <SendParameter>

	SendCommand(HX8357_PASET);
 800143a:	202b      	movs	r0, #43	@ 0x2b
 800143c:	f7ff fe68 	bl	8001110 <SendCommand>
	SendParameter((y0>>8) & 0xFF);
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe8f 	bl	800116c <SendParameter>
	SendParameter(y0 & 0xFF);
 800144e:	88bb      	ldrh	r3, [r7, #4]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fe8a 	bl	800116c <SendParameter>
	SendParameter((y1>>8) & 0xFF);
 8001458:	883b      	ldrh	r3, [r7, #0]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fe83 	bl	800116c <SendParameter>
	SendParameter(y1 & 0xFF);
 8001466:	883b      	ldrh	r3, [r7, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe7e 	bl	800116c <SendParameter>
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bd90      	pop	{r4, r7, pc}

08001478 <WriteColor>:

void WriteColor(uint16_t color) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
	SendParameter (color >> 8);
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fe6e 	bl	800116c <SendParameter>
	SendParameter (color& 0xFF);
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fe69 	bl	800116c <SendParameter>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, uint16_t color) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	80fb      	strh	r3, [r7, #6]
 80014ac:	460b      	mov	r3, r1
 80014ae:	80bb      	strh	r3, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	807b      	strh	r3, [r7, #2]
//	if ((x < 0) || (x>= TFT_WIDTH) || (y<0) || y >= TFT_HEIGHT) {
//		printf("DrawPixel inputs not valid");
//		return;
//	}

	SetAddressWindow(x, y, x+1, y+1);
 80014b4:	88f8      	ldrh	r0, [r7, #6]
 80014b6:	88b9      	ldrh	r1, [r7, #4]
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	3301      	adds	r3, #1
 80014bc:	b29a      	uxth	r2, r3
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f7ff ff8f 	bl	80013e6 <SetAddressWindow>
	SendCommand(HX8357_RAMWR);
 80014c8:	202c      	movs	r0, #44	@ 0x2c
 80014ca:	f7ff fe21 	bl	8001110 <SendCommand>
	WriteColor(color);
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ffd1 	bl	8001478 <WriteColor>

}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <DrawHLine>:

void DrawHLine(int16_t x, int16_t y0, int16_t y1, uint16_t color) {
 80014e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4606      	mov	r6, r0
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	4633      	mov	r3, r6
 80014f2:	80fb      	strh	r3, [r7, #6]
 80014f4:	4603      	mov	r3, r0
 80014f6:	80bb      	strh	r3, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	803b      	strh	r3, [r7, #0]
 8001500:	466b      	mov	r3, sp
 8001502:	461e      	mov	r6, r3
	// y0 must be less than y1
	SetAddressWindow(x, y0, x, y1);
 8001504:	88f8      	ldrh	r0, [r7, #6]
 8001506:	88b9      	ldrh	r1, [r7, #4]
 8001508:	88fa      	ldrh	r2, [r7, #6]
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	f7ff ff6b 	bl	80013e6 <SetAddressWindow>
	SendCommand(HX8357_RAMWR);
 8001510:	202c      	movs	r0, #44	@ 0x2c
 8001512:	f7ff fdfd 	bl	8001110 <SendCommand>
	int ind = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
	uint8_t TX_Buffer [2*y1-2*y0 + 2];
 800151a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800151e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	3301      	adds	r3, #1
 8001526:	0059      	lsls	r1, r3, #1
 8001528:	1e4b      	subs	r3, r1, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	460a      	mov	r2, r1
 800152e:	2300      	movs	r3, #0
 8001530:	4690      	mov	r8, r2
 8001532:	4699      	mov	r9, r3
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001540:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001544:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001548:	460a      	mov	r2, r1
 800154a:	2300      	movs	r3, #0
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	00eb      	lsls	r3, r5, #3
 800155a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800155e:	00e2      	lsls	r2, r4, #3
 8001560:	460b      	mov	r3, r1
 8001562:	3307      	adds	r3, #7
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	ebad 0d03 	sub.w	sp, sp, r3
 800156c:	466b      	mov	r3, sp
 800156e:	3300      	adds	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
	for (int i = y0; i <= y1; i++) {
 8001572:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	e012      	b.n	80015a0 <DrawHLine+0xc0>
		TX_Buffer[ind++] = color >> 8;
 800157a:	883b      	ldrh	r3, [r7, #0]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	b299      	uxth	r1, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	617a      	str	r2, [r7, #20]
 8001586:	b2c9      	uxtb	r1, r1
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	54d1      	strb	r1, [r2, r3]
		TX_Buffer[ind++] = color & 0xFF;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	617a      	str	r2, [r7, #20]
 8001592:	883a      	ldrh	r2, [r7, #0]
 8001594:	b2d1      	uxtb	r1, r2
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	54d1      	strb	r1, [r2, r3]
	for (int i = y0; i <= y1; i++) {
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	3301      	adds	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dde7      	ble.n	800157a <DrawHLine+0x9a>
	}

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); // CS low
 80015aa:	2200      	movs	r2, #0
 80015ac:	2110      	movs	r1, #16
 80015ae:	480b      	ldr	r0, [pc, #44]	@ (80015dc <DrawHLine+0xfc>)
 80015b0:	f002 fd76 	bl	80040a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &TX_Buffer, ind, 1000);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <DrawHLine+0x100>)
 80015c0:	f005 fb47 	bl	8006c52 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // cs high
 80015c4:	2201      	movs	r2, #1
 80015c6:	2110      	movs	r1, #16
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <DrawHLine+0xfc>)
 80015ca:	f002 fd69 	bl	80040a0 <HAL_GPIO_WritePin>
 80015ce:	46b5      	mov	sp, r6
}
 80015d0:	bf00      	nop
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015da:	bf00      	nop
 80015dc:	48001400 	.word	0x48001400
 80015e0:	2004069c 	.word	0x2004069c

080015e4 <DrawVLine>:

void DrawVLine(int16_t x0, int16_t x1, int16_t y, uint16_t color) {
 80015e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015e8:	b087      	sub	sp, #28
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4606      	mov	r6, r0
 80015ee:	4608      	mov	r0, r1
 80015f0:	4611      	mov	r1, r2
 80015f2:	461a      	mov	r2, r3
 80015f4:	4633      	mov	r3, r6
 80015f6:	80fb      	strh	r3, [r7, #6]
 80015f8:	4603      	mov	r3, r0
 80015fa:	80bb      	strh	r3, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	803b      	strh	r3, [r7, #0]
 8001604:	466b      	mov	r3, sp
 8001606:	461e      	mov	r6, r3
	SetAddressWindow(x0, y, x1, y);
 8001608:	88f8      	ldrh	r0, [r7, #6]
 800160a:	8879      	ldrh	r1, [r7, #2]
 800160c:	88ba      	ldrh	r2, [r7, #4]
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	f7ff fee9 	bl	80013e6 <SetAddressWindow>
	SendCommand(HX8357_RAMWR);
 8001614:	202c      	movs	r0, #44	@ 0x2c
 8001616:	f7ff fd7b 	bl	8001110 <SendCommand>
	int ind = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
	uint8_t TX_Buffer [2*x1-2*x0 + 2];
 800161e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	3301      	adds	r3, #1
 800162a:	0059      	lsls	r1, r3, #1
 800162c:	1e4b      	subs	r3, r1, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	460a      	mov	r2, r1
 8001632:	2300      	movs	r3, #0
 8001634:	4690      	mov	r8, r2
 8001636:	4699      	mov	r9, r3
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001644:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001648:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800164c:	460a      	mov	r2, r1
 800164e:	2300      	movs	r3, #0
 8001650:	4614      	mov	r4, r2
 8001652:	461d      	mov	r5, r3
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	00eb      	lsls	r3, r5, #3
 800165e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001662:	00e2      	lsls	r2, r4, #3
 8001664:	460b      	mov	r3, r1
 8001666:	3307      	adds	r3, #7
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	ebad 0d03 	sub.w	sp, sp, r3
 8001670:	466b      	mov	r3, sp
 8001672:	3300      	adds	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
	for (int i = x0; i <= x1; i++) {
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	e012      	b.n	80016a4 <DrawVLine+0xc0>
		TX_Buffer[ind++] = color >> 8;
 800167e:	883b      	ldrh	r3, [r7, #0]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b299      	uxth	r1, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	617a      	str	r2, [r7, #20]
 800168a:	b2c9      	uxtb	r1, r1
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	54d1      	strb	r1, [r2, r3]
		TX_Buffer[ind++] = color & 0xFF;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	617a      	str	r2, [r7, #20]
 8001696:	883a      	ldrh	r2, [r7, #0]
 8001698:	b2d1      	uxtb	r1, r2
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	54d1      	strb	r1, [r2, r3]
	for (int i = x0; i <= x1; i++) {
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	3301      	adds	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	dde7      	ble.n	800167e <DrawVLine+0x9a>
	}
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); // CS low
 80016ae:	2200      	movs	r2, #0
 80016b0:	2110      	movs	r1, #16
 80016b2:	480b      	ldr	r0, [pc, #44]	@ (80016e0 <DrawVLine+0xfc>)
 80016b4:	f002 fcf4 	bl	80040a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &TX_Buffer, ind, 1000);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <DrawVLine+0x100>)
 80016c4:	f005 fac5 	bl	8006c52 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // cs high
 80016c8:	2201      	movs	r2, #1
 80016ca:	2110      	movs	r1, #16
 80016cc:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <DrawVLine+0xfc>)
 80016ce:	f002 fce7 	bl	80040a0 <HAL_GPIO_WritePin>
 80016d2:	46b5      	mov	sp, r6
}
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016de:	bf00      	nop
 80016e0:	48001400 	.word	0x48001400
 80016e4:	2004069c 	.word	0x2004069c

080016e8 <FillScreen>:


void FillScreen(uint16_t color) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 480; i++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e00a      	b.n	800170e <FillScreen+0x26>
		DrawHLine(i, 0, 319, color);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	b218      	sxth	r0, r3
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	f240 123f 	movw	r2, #319	@ 0x13f
 8001702:	2100      	movs	r1, #0
 8001704:	f7ff feec 	bl	80014e0 <DrawHLine>
	for (int i = 0; i < 480; i++) {
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3301      	adds	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001714:	dbf0      	blt.n	80016f8 <FillScreen+0x10>
	}
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <FillRect>:


void FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	4604      	mov	r4, r0
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4623      	mov	r3, r4
 8001730:	80fb      	strh	r3, [r7, #6]
 8001732:	4603      	mov	r3, r0
 8001734:	80bb      	strh	r3, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	807b      	strh	r3, [r7, #2]
 800173a:	4613      	mov	r3, r2
 800173c:	803b      	strh	r3, [r7, #0]
	SetAddressWindow(x,y, x+w, y+h);
 800173e:	88f8      	ldrh	r0, [r7, #6]
 8001740:	88b9      	ldrh	r1, [r7, #4]
 8001742:	88fa      	ldrh	r2, [r7, #6]
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	4413      	add	r3, r2
 8001748:	b29c      	uxth	r4, r3
 800174a:	88ba      	ldrh	r2, [r7, #4]
 800174c:	883b      	ldrh	r3, [r7, #0]
 800174e:	4413      	add	r3, r2
 8001750:	b29b      	uxth	r3, r3
 8001752:	4622      	mov	r2, r4
 8001754:	f7ff fe47 	bl	80013e6 <SetAddressWindow>
	SendCommand(HX8357_RAMWR);
 8001758:	202c      	movs	r0, #44	@ 0x2c
 800175a:	f7ff fcd9 	bl	8001110 <SendCommand>
	for (int16_t i=x; i<x+w; i++) {
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	81fb      	strh	r3, [r7, #14]
 8001762:	e011      	b.n	8001788 <FillRect+0x68>
	        DrawHLine(i, y, y+h, color);
 8001764:	88ba      	ldrh	r2, [r7, #4]
 8001766:	883b      	ldrh	r3, [r7, #0]
 8001768:	4413      	add	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	b21a      	sxth	r2, r3
 800176e:	8c3b      	ldrh	r3, [r7, #32]
 8001770:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001774:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001778:	f7ff feb2 	bl	80014e0 <DrawHLine>
	for (int16_t i=x; i<x+w; i++) {
 800177c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001780:	b29b      	uxth	r3, r3
 8001782:	3301      	adds	r3, #1
 8001784:	b29b      	uxth	r3, r3
 8001786:	81fb      	strh	r3, [r7, #14]
 8001788:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800178c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001790:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001794:	440b      	add	r3, r1
 8001796:	429a      	cmp	r2, r3
 8001798:	dbe4      	blt.n	8001764 <FillRect+0x44>
	    }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <DrawChar>:


void DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	4604      	mov	r4, r0
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4623      	mov	r3, r4
 80017b4:	80fb      	strh	r3, [r7, #6]
 80017b6:	4603      	mov	r3, r0
 80017b8:	80bb      	strh	r3, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70fb      	strb	r3, [r7, #3]
 80017be:	4613      	mov	r3, r2
 80017c0:	803b      	strh	r3, [r7, #0]

       // if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e0a2      	b.n	800190e <DrawChar+0x16a>
            uint8_t line = font[c * 5 + i];
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	441a      	add	r2, r3
 80017d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a69      	ldr	r2, [pc, #420]	@ (800197c <DrawChar+0x1d8>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	73bb      	strb	r3, [r7, #14]

            for(int8_t j=0; j<8; j++, line >>= 1) {
 80017dc:	2300      	movs	r3, #0
 80017de:	737b      	strb	r3, [r7, #13]
 80017e0:	e08a      	b.n	80018f8 <DrawChar+0x154>
                if(line & 1) {
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03c      	beq.n	8001866 <DrawChar+0xc2>
                    if(size == 1)
 80017ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d112      	bne.n	800181a <DrawChar+0x76>
                        DrawPixel(x+i, y+j, color);
 80017f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	4413      	add	r3, r2
 80017fe:	b29b      	uxth	r3, r3
 8001800:	b218      	sxth	r0, r3
 8001802:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001806:	b29a      	uxth	r2, r3
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	b21b      	sxth	r3, r3
 8001810:	883a      	ldrh	r2, [r7, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff fe45 	bl	80014a2 <DrawPixel>
 8001818:	e065      	b.n	80018e6 <DrawChar+0x142>
                    else
                        FillRect(x+i*size, y+j*size, size, size, color);
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	b29a      	uxth	r2, r3
 8001820:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001824:	b29b      	uxth	r3, r3
 8001826:	fb12 f303 	smulbb	r3, r2, r3
 800182a:	b29a      	uxth	r2, r3
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	4413      	add	r3, r2
 8001830:	b29b      	uxth	r3, r3
 8001832:	b218      	sxth	r0, r3
 8001834:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001838:	b29a      	uxth	r2, r3
 800183a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800183e:	b29b      	uxth	r3, r3
 8001840:	fb12 f303 	smulbb	r3, r2, r3
 8001844:	b29a      	uxth	r2, r3
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	b219      	sxth	r1, r3
 800184e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001852:	b21a      	sxth	r2, r3
 8001854:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001858:	b21c      	sxth	r4, r3
 800185a:	883b      	ldrh	r3, [r7, #0]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	4623      	mov	r3, r4
 8001860:	f7ff ff5e 	bl	8001720 <FillRect>
 8001864:	e03f      	b.n	80018e6 <DrawChar+0x142>
                } else if(bg != color) {
 8001866:	8c3a      	ldrh	r2, [r7, #32]
 8001868:	883b      	ldrh	r3, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d03b      	beq.n	80018e6 <DrawChar+0x142>
                    if(size == 1)
 800186e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001872:	2b01      	cmp	r3, #1
 8001874:	d112      	bne.n	800189c <DrawChar+0xf8>
                        DrawPixel(x+i, y+j, bg);
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	b29a      	uxth	r2, r3
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	4413      	add	r3, r2
 8001880:	b29b      	uxth	r3, r3
 8001882:	b218      	sxth	r0, r3
 8001884:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001888:	b29a      	uxth	r2, r3
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	b21b      	sxth	r3, r3
 8001892:	8c3a      	ldrh	r2, [r7, #32]
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff fe04 	bl	80014a2 <DrawPixel>
 800189a:	e024      	b.n	80018e6 <DrawChar+0x142>
                    else
                        FillRect(x+i*size, y+j*size, size, size, bg);
 800189c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	fb12 f303 	smulbb	r3, r2, r3
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	4413      	add	r3, r2
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	b218      	sxth	r0, r3
 80018b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	fb12 f303 	smulbb	r3, r2, r3
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b219      	sxth	r1, r3
 80018d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018da:	b21c      	sxth	r4, r3
 80018dc:	8c3b      	ldrh	r3, [r7, #32]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4623      	mov	r3, r4
 80018e2:	f7ff ff1d 	bl	8001720 <FillRect>
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80018e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	737b      	strb	r3, [r7, #13]
 80018f2:	7bbb      	ldrb	r3, [r7, #14]
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	73bb      	strb	r3, [r7, #14]
 80018f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018fc:	2b07      	cmp	r3, #7
 80018fe:	f77f af70 	ble.w	80017e2 <DrawChar+0x3e>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	2b04      	cmp	r3, #4
 8001914:	f77f af58 	ble.w	80017c8 <DrawChar+0x24>
                }
            }
        }
        if(bg != color) {
 8001918:	8c3a      	ldrh	r2, [r7, #32]
 800191a:	883b      	ldrh	r3, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d029      	beq.n	8001974 <DrawChar+0x1d0>
            if(size == 1) DrawVLine(x+5, y, 8, bg);
 8001920:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001924:	2b01      	cmp	r3, #1
 8001926:	d10a      	bne.n	800193e <DrawChar+0x19a>
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	3305      	adds	r3, #5
 800192c:	b29b      	uxth	r3, r3
 800192e:	b218      	sxth	r0, r3
 8001930:	8c3b      	ldrh	r3, [r7, #32]
 8001932:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001936:	2208      	movs	r2, #8
 8001938:	f7ff fe54 	bl	80015e4 <DrawVLine>
            else          FillRect(x+5*size, y, size, 8*size, bg);
        }


}
 800193c:	e01a      	b.n	8001974 <DrawChar+0x1d0>
            else          FillRect(x+5*size, y, size, 8*size, bg);
 800193e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4413      	add	r3, r2
 800194a:	b29a      	uxth	r2, r3
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	b218      	sxth	r0, r3
 8001954:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001958:	b21a      	sxth	r2, r3
 800195a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800195e:	b29b      	uxth	r3, r3
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	b29b      	uxth	r3, r3
 8001964:	b21c      	sxth	r4, r3
 8001966:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800196a:	8c3b      	ldrh	r3, [r7, #32]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	4623      	mov	r3, r4
 8001970:	f7ff fed6 	bl	8001720 <FillRect>
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	0800fb3c 	.word	0x0800fb3c

08001980 <DrawText>:

void DrawText(int16_t x, int16_t y, char* text, uint16_t color, uint16_t bg, uint8_t size) {
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af02      	add	r7, sp, #8
 8001986:	60ba      	str	r2, [r7, #8]
 8001988:	461a      	mov	r2, r3
 800198a:	4603      	mov	r3, r0
 800198c:	81fb      	strh	r3, [r7, #14]
 800198e:	460b      	mov	r3, r1
 8001990:	81bb      	strh	r3, [r7, #12]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
	   while (*text) {
 8001996:	e01d      	b.n	80019d4 <DrawText+0x54>
	        DrawChar(x, y, *text, color, bg, size);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	88fc      	ldrh	r4, [r7, #6]
 800199e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80019a2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80019a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	8c3b      	ldrh	r3, [r7, #32]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4623      	mov	r3, r4
 80019b2:	f7ff fef7 	bl	80017a4 <DrawChar>
	        x += 6 * size;  // Move cursor forward; 6 = character width incl. spacing
 80019b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	0052      	lsls	r2, r2, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	4413      	add	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	81fb      	strh	r3, [r7, #14]
	        text++;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
	   while (*text) {
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1dd      	bne.n	8001998 <DrawText+0x18>
	    }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}
	...

080019e8 <HeartTempText>:

	DrawText(50, 120, "Scan your card to", DARKPINK, WHITE, 3);
	DrawText(50, 160, "begin your health scan!", DARKPINK, WHITE, 3);
}

void HeartTempText(char * name) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b092      	sub	sp, #72	@ 0x48
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	6078      	str	r0, [r7, #4]


	char temp[50];
	strcpy(temp, "Welcome ");
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab4 <HeartTempText+0xcc>)
 80019f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f8:	c303      	stmia	r3!, {r0, r1}
 80019fa:	701a      	strb	r2, [r3, #0]
	strcat(temp, name);
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00c f8b6 	bl	800db74 <strcat>
	strcat(temp, "!");
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fc47 	bl	80002a0 <strlen>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4926      	ldr	r1, [pc, #152]	@ (8001ab8 <HeartTempText+0xd0>)
 8001a1e:	461a      	mov	r2, r3
 8001a20:	460b      	mov	r3, r1
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	8013      	strh	r3, [r2, #0]

	printf("%s\r\n", temp);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4823      	ldr	r0, [pc, #140]	@ (8001abc <HeartTempText+0xd4>)
 8001a2e:	f00b ff51 	bl	800d8d4 <iprintf>
	DrawText(50, 50, temp, DARKPINK, WHITE, 3);
 8001a32:	f107 020c 	add.w	r2, r7, #12
 8001a36:	2303      	movs	r3, #3
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001a44:	2132      	movs	r1, #50	@ 0x32
 8001a46:	2032      	movs	r0, #50	@ 0x32
 8001a48:	f7ff ff9a 	bl	8001980 <DrawText>
	DrawText(50, 90, "Your health scan will", DARKPINK, WHITE, 3);
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001a5a:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <HeartTempText+0xd8>)
 8001a5c:	215a      	movs	r1, #90	@ 0x5a
 8001a5e:	2032      	movs	r0, #50	@ 0x32
 8001a60:	f7ff ff8e 	bl	8001980 <DrawText>
	DrawText(50, 130, "begin. Hold Chansey's", DARKPINK, WHITE, 3);
 8001a64:	2303      	movs	r3, #3
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001a72:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <HeartTempText+0xdc>)
 8001a74:	2182      	movs	r1, #130	@ 0x82
 8001a76:	2032      	movs	r0, #50	@ 0x32
 8001a78:	f7ff ff82 	bl	8001980 <DrawText>
	DrawText(50, 170, "hand and look at her", DARKPINK, WHITE, 3);
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac8 <HeartTempText+0xe0>)
 8001a8c:	21aa      	movs	r1, #170	@ 0xaa
 8001a8e:	2032      	movs	r0, #50	@ 0x32
 8001a90:	f7ff ff76 	bl	8001980 <DrawText>
	DrawText(50, 210, "face!", DARKPINK, WHITE, 3);
 8001a94:	2303      	movs	r3, #3
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <HeartTempText+0xe4>)
 8001aa4:	21d2      	movs	r1, #210	@ 0xd2
 8001aa6:	2032      	movs	r0, #50	@ 0x32
 8001aa8:	f7ff ff6a 	bl	8001980 <DrawText>
}
 8001aac:	bf00      	nop
 8001aae:	3740      	adds	r7, #64	@ 0x40
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	0800f8fc 	.word	0x0800f8fc
 8001ab8:	0800f908 	.word	0x0800f908
 8001abc:	0800f90c 	.word	0x0800f90c
 8001ac0:	0800f914 	.word	0x0800f914
 8001ac4:	0800f92c 	.word	0x0800f92c
 8001ac8:	0800f944 	.word	0x0800f944
 8001acc:	0800f95c 	.word	0x0800f95c

08001ad0 <SensorInit>:
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_Delay(100);
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
	  HAL_Delay(100);
}
void SensorInit(  uint32_t *refSpadCount, uint8_t *isApertureSpads, uint8_t *VhvSettings, uint8_t *PhaseCal){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
	  VL53L0X_WaitDeviceBooted(Dev);
 8001ade:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <SensorInit+0x5c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f006 ffa2 	bl	8008a2c <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit(Dev);
 8001ae8:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <SensorInit+0x5c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f006 fcb9 	bl	8008464 <VL53L0X_DataInit>
	  VL53L0X_StaticInit(Dev);
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <SensorInit+0x5c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f006 fe18 	bl	800872c <VL53L0X_StaticInit>
	  VL53L0X_PerformRefSpadManagement(Dev, VhvSettings, PhaseCal);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <SensorInit+0x5c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f008 f919 	bl	8009d3c <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_PerformRefCalibration(Dev, refSpadCount, isApertureSpads);
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <SensorInit+0x5c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	68f9      	ldr	r1, [r7, #12]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f007 fc90 	bl	8009438 <VL53L0X_PerformRefCalibration>
	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <SensorInit+0x5c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 f822 	bl	8008b68 <VL53L0X_SetDeviceMode>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20040000 	.word	0x20040000

08001b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b09e      	sub	sp, #120	@ 0x78
 8001b34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b36:	f001 ff76 	bl	8003a26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3a:	f000 f9f7 	bl	8001f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3e:	f000 fb8f 	bl	8002260 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b42:	f000 fa39 	bl	8001fb8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001b46:	f000 fa77 	bl	8002038 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001b4a:	f000 fac1 	bl	80020d0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001b4e:	f000 fb0b 	bl	8002168 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001b52:	f000 fb47 	bl	80021e4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  enum States Chansey = IDLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  //IDLE STATE VARIABLES
  float buffer[2] = {0};
 8001b5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
  uint8_t RFID_bool = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
  uint8_t distance_bool = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  uint8_t counter = 0; //to not read temperature every single time we perform loop
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

  //RFID VARIABLES
  uint8_t str[MAX_LEN] = {0};
 8001b78:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
  uint8_t serNum[5] = {0};
 8001b86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	711a      	strb	r2, [r3, #4]
  uint8_t R[16] = {0};
 8001b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  uint8_t TrainerNum = DEFAULT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  //DISTANCE SENSOR VARIABLES
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	  Dev->I2cHandle = &hi2c1;
 8001ba4:	4bba      	ldr	r3, [pc, #744]	@ (8001e90 <main+0x360>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4aba      	ldr	r2, [pc, #744]	@ (8001e94 <main+0x364>)
 8001baa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	  Dev->I2cDevAddr = 0x52;
 8001bae:	4bb8      	ldr	r3, [pc, #736]	@ (8001e90 <main+0x360>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2252      	movs	r2, #82	@ 0x52
 8001bb4:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	  // INITIALIZE DISPLAY
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // CS HIGH
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2110      	movs	r1, #16
 8001bbc:	48b6      	ldr	r0, [pc, #728]	@ (8001e98 <main+0x368>)
 8001bbe:	f002 fa6f 	bl	80040a0 <HAL_GPIO_WritePin>
	  DisplayBegin();
 8001bc2:	f7ff faf7 	bl	80011b4 <DisplayBegin>

	  FillScreen(0xFFFF);
 8001bc6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001bca:	f7ff fd8d 	bl	80016e8 <FillScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  Chansey = TEMP;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	 printf("Chansey State: %d\r\n", Chansey);
 8001bd4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001bd8:	4619      	mov	r1, r3
 8001bda:	48b0      	ldr	r0, [pc, #704]	@ (8001e9c <main+0x36c>)
 8001bdc:	f00b fe7a 	bl	800d8d4 <iprintf>
		 switch(Chansey) {
 8001be0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001be4:	2b06      	cmp	r3, #6
 8001be6:	d8f5      	bhi.n	8001bd4 <main+0xa4>
 8001be8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf0 <main+0xc0>)
 8001bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bee:	bf00      	nop
 8001bf0:	08001c0d 	.word	0x08001c0d
 8001bf4:	08001d99 	.word	0x08001d99
 8001bf8:	08001bd5 	.word	0x08001bd5
 8001bfc:	08001dd3 	.word	0x08001dd3
 8001c00:	08001e07 	.word	0x08001e07
 8001c04:	08001e3f 	.word	0x08001e3f
 8001c08:	08001ed1 	.word	0x08001ed1
		 	 case IDLE:
		 		 //turn off the speaker


		 		 RFID_bool = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		 		 distance_bool = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
		 		 //temperature and humidity logic
		 		 float old_buffer[2];
		 		 memcpy(old_buffer, buffer, 2);
 8001c18:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001c1c:	83bb      	strh	r3, [r7, #28]
		 		//used to not read temperature/humidity all the time if not sensing
		 		 if(counter == 0){
 8001c1e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d132      	bne.n	8001c8c <main+0x15c>
					 if(temp_humid(&buffer, &hi2c1)){
 8001c26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c2a:	499a      	ldr	r1, [pc, #616]	@ (8001e94 <main+0x364>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fea9 	bl	8003984 <temp_humid>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <main+0x130>
						 printf("Temperature & Humidity: %.2f, %.2f\r\n", buffer[0], buffer[1]);
 8001c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc9c 	bl	8000578 <__aeabi_f2d>
 8001c40:	4604      	mov	r4, r0
 8001c42:	460d      	mov	r5, r1
 8001c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc96 	bl	8000578 <__aeabi_f2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	e9cd 2300 	strd	r2, r3, [sp]
 8001c54:	4622      	mov	r2, r4
 8001c56:	462b      	mov	r3, r5
 8001c58:	4891      	ldr	r0, [pc, #580]	@ (8001ea0 <main+0x370>)
 8001c5a:	f00b fe3b 	bl	800d8d4 <iprintf>
 8001c5e:	e012      	b.n	8001c86 <main+0x156>
						 //send to LED;
						 //print for debug
					 }
					 else{
						 printf("Temp & Humidity not read: %.2f, %.2f\r\n", old_buffer[0], old_buffer[1]);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc88 	bl	8000578 <__aeabi_f2d>
 8001c68:	4604      	mov	r4, r0
 8001c6a:	460d      	mov	r5, r1
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc82 	bl	8000578 <__aeabi_f2d>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9cd 2300 	strd	r2, r3, [sp]
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	462b      	mov	r3, r5
 8001c80:	4888      	ldr	r0, [pc, #544]	@ (8001ea4 <main+0x374>)
 8001c82:	f00b fe27 	bl	800d8d4 <iprintf>
					 }
					 HAL_Delay(10);
 8001c86:	200a      	movs	r0, #10
 8001c88:	f001 ff42 	bl	8003b10 <HAL_Delay>
		 		 }
		 		 //distance sensor logic
		 		  uint8_t buf[10] = {0xC0};
 8001c8c:	23c0      	movs	r3, #192	@ 0xc0
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	809a      	strh	r2, [r3, #4]
		 		  HAL_I2C_Master_Transmit(&hi2c1, VL_W_A, &buf[0], 1, 1000);
 8001c9a:	f107 0210 	add.w	r2, r7, #16
 8001c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	2152      	movs	r1, #82	@ 0x52
 8001ca8:	487a      	ldr	r0, [pc, #488]	@ (8001e94 <main+0x364>)
 8001caa:	f002 fac5 	bl	8004238 <HAL_I2C_Master_Transmit>
		 		  HAL_I2C_Master_Receive(&hi2c1, VL_R_A, &buf[2], 1, 1000);
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	1c9a      	adds	r2, r3, #2
 8001cb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2153      	movs	r1, #83	@ 0x53
 8001cbe:	4875      	ldr	r0, [pc, #468]	@ (8001e94 <main+0x364>)
 8001cc0:	f002 fbd2 	bl	8004468 <HAL_I2C_Master_Receive>
		 		  SensorInit(  &refSpadCount,    &isApertureSpads,   & VhvSettings,   & PhaseCal);
 8001cc4:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 8001cc8:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 8001ccc:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 8001cd0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001cd4:	f7ff fefc 	bl	8001ad0 <SensorInit>

		 		  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8001cd8:	4b6d      	ldr	r3, [pc, #436]	@ (8001e90 <main+0x360>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4972      	ldr	r1, [pc, #456]	@ (8001ea8 <main+0x378>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f007 fe44 	bl	800996c <VL53L0X_PerformSingleRangingMeasurement>
		 		  //printf("status: %u\n\r", RangingData.RangeStatus);


		 		  if (RangingData.RangeStatus==0) {
 8001ce4:	4b70      	ldr	r3, [pc, #448]	@ (8001ea8 <main+0x378>)
 8001ce6:	7e1b      	ldrb	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d11b      	bne.n	8001d24 <main+0x1f4>
		 			  printf("Measured distance in mm: %u\n\r", RangingData.RangeMilliMeter);
 8001cec:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea8 <main+0x378>)
 8001cee:	891b      	ldrh	r3, [r3, #8]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	486e      	ldr	r0, [pc, #440]	@ (8001eac <main+0x37c>)
 8001cf4:	f00b fdee 	bl	800d8d4 <iprintf>

		 			  if (RangingData.RangeMilliMeter == 0) {
 8001cf8:	4b6b      	ldr	r3, [pc, #428]	@ (8001ea8 <main+0x378>)
 8001cfa:	891b      	ldrh	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10a      	bne.n	8001d16 <main+0x1e6>
		 				  SensorInit( &refSpadCount,    &isApertureSpads,    &VhvSettings,   & PhaseCal);
 8001d00:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 8001d04:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 8001d08:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 8001d0c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001d10:	f7ff fede 	bl	8001ad0 <SensorInit>
 8001d14:	e006      	b.n	8001d24 <main+0x1f4>
		 			  }
		 			  else{
		 				  if(RangingData.RangeMilliMeter < 200){
 8001d16:	4b64      	ldr	r3, [pc, #400]	@ (8001ea8 <main+0x378>)
 8001d18:	891b      	ldrh	r3, [r3, #8]
 8001d1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001d1c:	d802      	bhi.n	8001d24 <main+0x1f4>
		 					  distance_bool = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
		 			  }
		 		  }


		 		 //RFID logic
		 		 uint8_t status = readCard(1, R); //reads trainer name
 8001d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f001 fac4 	bl	80032b8 <readCard>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
		 		 TrainerNum = R[0];
 8001d36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d3a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		 		 if(status == MI_OK && (R[0] != 0)){
 8001d3e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <main+0x224>
 8001d46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <main+0x224>
		 			 RFID_bool = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		 		 }

		 		 /*NEXT STATE LOGIC : if distance threshold met, move to SCAN, if RFID is scanned override and go to HEART.
		 		 (in cases where it recognizes both RFID and a person, it will not move to a redundant state)
		 		 */
		 		 if(distance_bool){
 8001d54:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <main+0x238>
		 			 Chansey = SCAN;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		 			 printf("To scan\r\n");
 8001d62:	4853      	ldr	r0, [pc, #332]	@ (8001eb0 <main+0x380>)
 8001d64:	f00b fe1e 	bl	800d9a4 <puts>
		 		 }
		 		 if(RFID_bool){
 8001d68:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <main+0x24c>
		 			 Chansey = HEART;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		 			 printf("To heart\r\n");
 8001d76:	484f      	ldr	r0, [pc, #316]	@ (8001eb4 <main+0x384>)
 8001d78:	f00b fe14 	bl	800d9a4 <puts>
		 		 }

		 		 //increase counter
		 		 counter++;
 8001d7c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001d80:	3301      	adds	r3, #1
 8001d82:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
		 		 //reset counter if it goes over 255 range
		 		 if(counter > 50){
 8001d86:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001d8a:	2b32      	cmp	r3, #50	@ 0x32
 8001d8c:	f240 80c6 	bls.w	8001f1c <main+0x3ec>
		 			 counter = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
		 		 }

		 		 break;
 8001d96:	e0c1      	b.n	8001f1c <main+0x3ec>
		 	 case SCAN:

		 		 uint8_t status1 = readCard(1, R);
 8001d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f001 fa8a 	bl	80032b8 <readCard>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		 		 if(status == MI_OK && (R[0] != 0)){
 8001daa:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <main+0x290>
 8001db2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <main+0x290>
		 			 RFID_bool = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		 		 }

		 		 if(RFID_bool == 1){
 8001dc0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f040 80ab 	bne.w	8001f20 <main+0x3f0>
		 			 Chansey = HEART;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		 		 }

		 		 break;
 8001dd0:	e0a6      	b.n	8001f20 <main+0x3f0>
//		 		}

		 		break;
		 	case TEMP:

				if(temp_ready(&hi2c1)){
 8001dd2:	4830      	ldr	r0, [pc, #192]	@ (8001e94 <main+0x364>)
 8001dd4:	f7ff f970 	bl	80010b8 <temp_ready>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00f      	beq.n	8001dfe <main+0x2ce>
					body_temperature = getBodyTemp(&hi2c1);
 8001dde:	482d      	ldr	r0, [pc, #180]	@ (8001e94 <main+0x364>)
 8001de0:	f7ff f8e2 	bl	8000fa8 <getBodyTemp>
 8001de4:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64

					printf("body_temperature: %.2f\r\n", body_temperature);
 8001de8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001dea:	f7fe fbc5 	bl	8000578 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4831      	ldr	r0, [pc, #196]	@ (8001eb8 <main+0x388>)
 8001df4:	f00b fd6e 	bl	800d8d4 <iprintf>
					Chansey = RESULT;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				HAL_Delay(100);
 8001dfe:	2064      	movs	r0, #100	@ 0x64
 8001e00:	f001 fe86 	bl	8003b10 <HAL_Delay>
		 		break;
 8001e04:	e08e      	b.n	8001f24 <main+0x3f4>
		 		//read rfid
		 		//block 4 == average heart rate
		 		//if body_temperature > 100.4
		 		//set pill dispenser for fever medication
		 		//if heart_rate is not within +- 10 beats of users average then -> "Abnormal heart rate reading, hospital visit recommended"
		 		pill_dispensed = 1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
		 		if(body_temperature > 100.4){
 8001e0c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001e0e:	f7fe fbb3 	bl	8000578 <__aeabi_f2d>
 8001e12:	a31d      	add	r3, pc, #116	@ (adr r3, 8001e88 <main+0x358>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fe96 	bl	8000b48 <__aeabi_dcmpgt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <main+0x2f8>
		 			pill_dispensed = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
		 		}
		 		FillScreen(0xFFFF);
 8001e28:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e2c:	f7ff fc5c 	bl	80016e8 <FillScreen>
		 		HeartTempText("Ava");
 8001e30:	4822      	ldr	r0, [pc, #136]	@ (8001ebc <main+0x38c>)
 8001e32:	f7ff fdd9 	bl	80019e8 <HeartTempText>

		 		Chansey = PILLS;
 8001e36:	2305      	movs	r3, #5
 8001e38:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		 		break;
 8001e3c:	e072      	b.n	8001f24 <main+0x3f4>
		 	case PILLS:
		 		//read pill_dispenser variable
		 		//if plll_dispenser == 1 //
		 		//release multivitamin -> TURN LEFT MOTOR
		 		if(pill_dispensed == 1){
 8001e3e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <main+0x326>
		 			printf("Dispensing Multivitamin\r\n");
 8001e46:	481e      	ldr	r0, [pc, #120]	@ (8001ec0 <main+0x390>)
 8001e48:	f00b fdac 	bl	800d9a4 <puts>
			 	 	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8001e4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e50:	f000 fc70 	bl	8002734 <HAL_GPIO_EXTI_Callback>
 8001e54:	e003      	b.n	8001e5e <main+0x32e>
		 		}
		 		else{ //release fever meds
		 			HAL_GPIO_EXTI_Callback(GPIO_PIN_12);
 8001e56:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e5a:	f000 fc6b 	bl	8002734 <HAL_GPIO_EXTI_Callback>
		 		}
		 		if(restock == 2){
 8001e5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <main+0x394>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d103      	bne.n	8001e70 <main+0x340>
		 			printf("Out of stock, please re-stock multivitamin dispenser ");
 8001e68:	4817      	ldr	r0, [pc, #92]	@ (8001ec8 <main+0x398>)
 8001e6a:	f00b fd33 	bl	800d8d4 <iprintf>
 8001e6e:	e007      	b.n	8001e80 <main+0x350>
		 		}
		 		else if(restock == 1){
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <main+0x394>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <main+0x350>
		 			printf("Out of stock, please re-stock fever dispenser ");
 8001e7a:	4814      	ldr	r0, [pc, #80]	@ (8001ecc <main+0x39c>)
 8001e7c:	f00b fd2a 	bl	800d8d4 <iprintf>
		 		}

				Chansey = DONE;
 8001e80:	2306      	movs	r3, #6
 8001e82:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		 		break;
 8001e86:	e04d      	b.n	8001f24 <main+0x3f4>
 8001e88:	9999999a 	.word	0x9999999a
 8001e8c:	40591999 	.word	0x40591999
 8001e90:	20040000 	.word	0x20040000
 8001e94:	200404bc 	.word	0x200404bc
 8001e98:	48001400 	.word	0x48001400
 8001e9c:	0800f9f4 	.word	0x0800f9f4
 8001ea0:	0800fa08 	.word	0x0800fa08
 8001ea4:	0800fa30 	.word	0x0800fa30
 8001ea8:	20040700 	.word	0x20040700
 8001eac:	0800fa58 	.word	0x0800fa58
 8001eb0:	0800fa78 	.word	0x0800fa78
 8001eb4:	0800fa84 	.word	0x0800fa84
 8001eb8:	0800fa90 	.word	0x0800fa90
 8001ebc:	0800faac 	.word	0x0800faac
 8001ec0:	0800fab0 	.word	0x0800fab0
 8001ec4:	200408ac 	.word	0x200408ac
 8001ec8:	0800facc 	.word	0x0800facc
 8001ecc:	0800fb04 	.word	0x0800fb04
		 		//HR
		 		//TEMP
		 		//PILL_DISPENSED
		 		//DATE -> internally

		 		float data[4] = {(float)TrainerNum, (float)heart_rate, body_temperature, (float)pill_dispensed};
 8001ed0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001edc:	edc7 7a00 	vstr	s15, [r7]
 8001ee0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eec:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f00:	edc7 7a03 	vstr	s15, [r7, #12]
		 		sendToApp(&huart1, data);
 8001f04:	463b      	mov	r3, r7
 8001f06:	4619      	mov	r1, r3
 8001f08:	4807      	ldr	r0, [pc, #28]	@ (8001f28 <main+0x3f8>)
 8001f0a:	f7ff f8e9 	bl	80010e0 <sendToApp>
		 		counter = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
		 		Chansey = TEMP;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		 		break;
 8001f1a:	e003      	b.n	8001f24 <main+0x3f4>
		 		 break;
 8001f1c:	bf00      	nop
 8001f1e:	e659      	b.n	8001bd4 <main+0xa4>
		 		 break;
 8001f20:	bf00      	nop
 8001f22:	e657      	b.n	8001bd4 <main+0xa4>
	  	 printf("Chansey State: %d\r\n", Chansey);
 8001f24:	e656      	b.n	8001bd4 <main+0xa4>
 8001f26:	bf00      	nop
 8001f28:	200405a4 	.word	0x200405a4

08001f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b096      	sub	sp, #88	@ 0x58
 8001f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	2244      	movs	r2, #68	@ 0x44
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f00b fe12 	bl	800db64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f40:	463b      	mov	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f52:	f003 f937 	bl	80051c4 <HAL_PWREx_ControlVoltageScaling>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f5c:	f000 fbe4 	bl	8002728 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001f60:	2310      	movs	r3, #16
 8001f62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f64:	2301      	movs	r3, #1
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001f6c:	23b0      	movs	r3, #176	@ 0xb0
 8001f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 f9d7 	bl	800532c <HAL_RCC_OscConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001f84:	f000 fbd0 	bl	8002728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f88:	230f      	movs	r3, #15
 8001f8a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fddd 	bl	8005b60 <HAL_RCC_ClockConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001fac:	f000 fbbc 	bl	8002728 <Error_Handler>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3758      	adds	r7, #88	@ 0x58
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <MX_I2C1_Init+0x74>)
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <MX_I2C1_Init+0x78>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <MX_I2C1_Init+0x74>)
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <MX_I2C1_Init+0x7c>)
 8001fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fc8:	4b18      	ldr	r3, [pc, #96]	@ (800202c <MX_I2C1_Init+0x74>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fce:	4b17      	ldr	r3, [pc, #92]	@ (800202c <MX_I2C1_Init+0x74>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd4:	4b15      	ldr	r3, [pc, #84]	@ (800202c <MX_I2C1_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fda:	4b14      	ldr	r3, [pc, #80]	@ (800202c <MX_I2C1_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <MX_I2C1_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <MX_I2C1_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <MX_I2C1_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff2:	480e      	ldr	r0, [pc, #56]	@ (800202c <MX_I2C1_Init+0x74>)
 8001ff4:	f002 f884 	bl	8004100 <HAL_I2C_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ffe:	f000 fb93 	bl	8002728 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002002:	2100      	movs	r1, #0
 8002004:	4809      	ldr	r0, [pc, #36]	@ (800202c <MX_I2C1_Init+0x74>)
 8002006:	f003 f825 	bl	8005054 <HAL_I2CEx_ConfigAnalogFilter>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002010:	f000 fb8a 	bl	8002728 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002014:	2100      	movs	r1, #0
 8002016:	4805      	ldr	r0, [pc, #20]	@ (800202c <MX_I2C1_Init+0x74>)
 8002018:	f003 f867 	bl	80050ea <HAL_I2CEx_ConfigDigitalFilter>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002022:	f000 fb81 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200404bc 	.word	0x200404bc
 8002030:	40005400 	.word	0x40005400
 8002034:	10805d88 	.word	0x10805d88

08002038 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800203c:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 800203e:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <MX_LPUART1_UART_Init+0x94>)
 8002040:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 8002044:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002048:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800205c:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 800205e:	220c      	movs	r2, #12
 8002060:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002062:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 800206a:	2200      	movs	r2, #0
 800206c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 8002070:	2200      	movs	r2, #0
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 8002076:	2200      	movs	r2, #0
 8002078:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800207a:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 800207c:	2200      	movs	r2, #0
 800207e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002080:	4811      	ldr	r0, [pc, #68]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 8002082:	f005 fadf 	bl	8007644 <HAL_UART_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800208c:	f000 fb4c 	bl	8002728 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002090:	2100      	movs	r1, #0
 8002092:	480d      	ldr	r0, [pc, #52]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 8002094:	f006 f908 	bl	80082a8 <HAL_UARTEx_SetTxFifoThreshold>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800209e:	f000 fb43 	bl	8002728 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a2:	2100      	movs	r1, #0
 80020a4:	4808      	ldr	r0, [pc, #32]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 80020a6:	f006 f93d 	bl	8008324 <HAL_UARTEx_SetRxFifoThreshold>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020b0:	f000 fb3a 	bl	8002728 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <MX_LPUART1_UART_Init+0x90>)
 80020b6:	f006 f8be 	bl	8008236 <HAL_UARTEx_DisableFifoMode>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020c0:	f000 fb32 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20040510 	.word	0x20040510
 80020cc:	40008000 	.word	0x40008000

080020d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020d4:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 80020d6:	4a23      	ldr	r2, [pc, #140]	@ (8002164 <MX_USART1_UART_Init+0x94>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 80020dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 80020f6:	220c      	movs	r2, #12
 80020f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002106:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800210c:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002112:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 8002114:	2200      	movs	r2, #0
 8002116:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002118:	4811      	ldr	r0, [pc, #68]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 800211a:	f005 fa93 	bl	8007644 <HAL_UART_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002124:	f000 fb00 	bl	8002728 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002128:	2100      	movs	r1, #0
 800212a:	480d      	ldr	r0, [pc, #52]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 800212c:	f006 f8bc 	bl	80082a8 <HAL_UARTEx_SetTxFifoThreshold>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002136:	f000 faf7 	bl	8002728 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800213a:	2100      	movs	r1, #0
 800213c:	4808      	ldr	r0, [pc, #32]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 800213e:	f006 f8f1 	bl	8008324 <HAL_UARTEx_SetRxFifoThreshold>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002148:	f000 faee 	bl	8002728 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800214c:	4804      	ldr	r0, [pc, #16]	@ (8002160 <MX_USART1_UART_Init+0x90>)
 800214e:	f006 f872 	bl	8008236 <HAL_UARTEx_DisableFifoMode>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002158:	f000 fae6 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200405a4 	.word	0x200405a4
 8002164:	40013800 	.word	0x40013800

08002168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800216c:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <MX_SPI1_Init+0x74>)
 800216e:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <MX_SPI1_Init+0x78>)
 8002170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002172:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <MX_SPI1_Init+0x74>)
 8002174:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800217a:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <MX_SPI1_Init+0x74>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002180:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <MX_SPI1_Init+0x74>)
 8002182:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002186:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <MX_SPI1_Init+0x74>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800218e:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <MX_SPI1_Init+0x74>)
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <MX_SPI1_Init+0x74>)
 8002196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800219a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800219c:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <MX_SPI1_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <MX_SPI1_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <MX_SPI1_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <MX_SPI1_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021b4:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <MX_SPI1_Init+0x74>)
 80021b6:	2207      	movs	r2, #7
 80021b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ba:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <MX_SPI1_Init+0x74>)
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <MX_SPI1_Init+0x74>)
 80021c2:	2208      	movs	r2, #8
 80021c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021c6:	4805      	ldr	r0, [pc, #20]	@ (80021dc <MX_SPI1_Init+0x74>)
 80021c8:	f004 fca0 	bl	8006b0c <HAL_SPI_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021d2:	f000 faa9 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20040638 	.word	0x20040638
 80021e0:	40013000 	.word	0x40013000

080021e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <MX_SPI3_Init+0x74>)
 80021ea:	4a1c      	ldr	r2, [pc, #112]	@ (800225c <MX_SPI3_Init+0x78>)
 80021ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <MX_SPI3_Init+0x74>)
 80021f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021f6:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <MX_SPI3_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80021fc:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <MX_SPI3_Init+0x74>)
 80021fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002202:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <MX_SPI3_Init+0x74>)
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <MX_SPI3_Init+0x74>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <MX_SPI3_Init+0x74>)
 8002212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002216:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002218:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <MX_SPI3_Init+0x74>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800221e:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <MX_SPI3_Init+0x74>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <MX_SPI3_Init+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <MX_SPI3_Init+0x74>)
 800222c:	2200      	movs	r2, #0
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <MX_SPI3_Init+0x74>)
 8002232:	2207      	movs	r2, #7
 8002234:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <MX_SPI3_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <MX_SPI3_Init+0x74>)
 800223e:	2208      	movs	r2, #8
 8002240:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002242:	4805      	ldr	r0, [pc, #20]	@ (8002258 <MX_SPI3_Init+0x74>)
 8002244:	f004 fc62 	bl	8006b0c <HAL_SPI_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800224e:	f000 fa6b 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2004069c 	.word	0x2004069c
 800225c:	40003c00 	.word	0x40003c00

08002260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	@ 0x38
 8002264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002276:	4bb5      	ldr	r3, [pc, #724]	@ (800254c <MX_GPIO_Init+0x2ec>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	4ab4      	ldr	r2, [pc, #720]	@ (800254c <MX_GPIO_Init+0x2ec>)
 800227c:	f043 0310 	orr.w	r3, r3, #16
 8002280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002282:	4bb2      	ldr	r3, [pc, #712]	@ (800254c <MX_GPIO_Init+0x2ec>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800228e:	4baf      	ldr	r3, [pc, #700]	@ (800254c <MX_GPIO_Init+0x2ec>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002292:	4aae      	ldr	r2, [pc, #696]	@ (800254c <MX_GPIO_Init+0x2ec>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229a:	4bac      	ldr	r3, [pc, #688]	@ (800254c <MX_GPIO_Init+0x2ec>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022a6:	4ba9      	ldr	r3, [pc, #676]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	4aa8      	ldr	r2, [pc, #672]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022ac:	f043 0320 	orr.w	r3, r3, #32
 80022b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b2:	4ba6      	ldr	r3, [pc, #664]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022be:	4ba3      	ldr	r3, [pc, #652]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	4aa2      	ldr	r2, [pc, #648]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ca:	4ba0      	ldr	r3, [pc, #640]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b9d      	ldr	r3, [pc, #628]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	4a9c      	ldr	r2, [pc, #624]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e2:	4b9a      	ldr	r3, [pc, #616]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	4b97      	ldr	r3, [pc, #604]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	4a96      	ldr	r2, [pc, #600]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fa:	4b94      	ldr	r3, [pc, #592]	@ (800254c <MX_GPIO_Init+0x2ec>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002306:	4b91      	ldr	r3, [pc, #580]	@ (800254c <MX_GPIO_Init+0x2ec>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	4a90      	ldr	r2, [pc, #576]	@ (800254c <MX_GPIO_Init+0x2ec>)
 800230c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002312:	4b8e      	ldr	r3, [pc, #568]	@ (800254c <MX_GPIO_Init+0x2ec>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800231e:	4b8b      	ldr	r3, [pc, #556]	@ (800254c <MX_GPIO_Init+0x2ec>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	4a8a      	ldr	r2, [pc, #552]	@ (800254c <MX_GPIO_Init+0x2ec>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232a:	4b88      	ldr	r3, [pc, #544]	@ (800254c <MX_GPIO_Init+0x2ec>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002336:	f002 ffe9 	bl	800530c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	210c      	movs	r1, #12
 800233e:	4884      	ldr	r0, [pc, #528]	@ (8002550 <MX_GPIO_Init+0x2f0>)
 8002340:	f001 feae 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 716c 	mov.w	r1, #944	@ 0x3b0
 800234a:	4882      	ldr	r0, [pc, #520]	@ (8002554 <MX_GPIO_Init+0x2f4>)
 800234c:	f001 fea8 	bl	80040a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	2122      	movs	r1, #34	@ 0x22
 8002354:	4880      	ldr	r0, [pc, #512]	@ (8002558 <MX_GPIO_Init+0x2f8>)
 8002356:	f001 fea3 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 8002360:	487e      	ldr	r0, [pc, #504]	@ (800255c <MX_GPIO_Init+0x2fc>)
 8002362:	f001 fe9d 	bl	80040a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 800236c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002370:	f001 fe96 	bl	80040a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002374:	2200      	movs	r2, #0
 8002376:	2178      	movs	r1, #120	@ 0x78
 8002378:	4879      	ldr	r0, [pc, #484]	@ (8002560 <MX_GPIO_Init+0x300>)
 800237a:	f001 fe91 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800237e:	230c      	movs	r3, #12
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002382:	2301      	movs	r3, #1
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800238e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002392:	4619      	mov	r1, r3
 8002394:	486e      	ldr	r0, [pc, #440]	@ (8002550 <MX_GPIO_Init+0x2f0>)
 8002396:	f001 fcf1 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800239a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ae:	4619      	mov	r1, r3
 80023b0:	486a      	ldr	r0, [pc, #424]	@ (800255c <MX_GPIO_Init+0x2fc>)
 80023b2:	f001 fce3 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80023b6:	2307      	movs	r3, #7
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ba:	2312      	movs	r3, #18
 80023bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023c6:	2304      	movs	r3, #4
 80023c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ce:	4619      	mov	r1, r3
 80023d0:	4860      	ldr	r0, [pc, #384]	@ (8002554 <MX_GPIO_Init+0x2f4>)
 80023d2:	f001 fcd3 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF7 PF8
                           PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 80023d6:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ec:	4619      	mov	r1, r3
 80023ee:	4859      	ldr	r0, [pc, #356]	@ (8002554 <MX_GPIO_Init+0x2f4>)
 80023f0:	f001 fcc4 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80023f4:	233f      	movs	r3, #63	@ 0x3f
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023f8:	230b      	movs	r3, #11
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	4855      	ldr	r0, [pc, #340]	@ (800255c <MX_GPIO_Init+0x2fc>)
 8002408:	f001 fcb8 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800240c:	2301      	movs	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800241c:	2301      	movs	r3, #1
 800241e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002424:	4619      	mov	r1, r3
 8002426:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800242a:	f001 fca7 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800242e:	230a      	movs	r3, #10
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002432:	230b      	movs	r3, #11
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002444:	f001 fc9a 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002448:	2301      	movs	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002458:	2302      	movs	r3, #2
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002460:	4619      	mov	r1, r3
 8002462:	4840      	ldr	r0, [pc, #256]	@ (8002564 <MX_GPIO_Init+0x304>)
 8002464:	f001 fc8a 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002468:	2302      	movs	r3, #2
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800246c:	230b      	movs	r3, #11
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	483a      	ldr	r0, [pc, #232]	@ (8002564 <MX_GPIO_Init+0x304>)
 800247c:	f001 fc7e 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002480:	2344      	movs	r3, #68	@ 0x44
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002484:	2303      	movs	r3, #3
 8002486:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	4834      	ldr	r0, [pc, #208]	@ (8002564 <MX_GPIO_Init+0x304>)
 8002494:	f001 fc72 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002498:	2322      	movs	r3, #34	@ 0x22
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249c:	2301      	movs	r3, #1
 800249e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	2300      	movs	r3, #0
 80024a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ac:	4619      	mov	r1, r3
 80024ae:	482a      	ldr	r0, [pc, #168]	@ (8002558 <MX_GPIO_Init+0x2f8>)
 80024b0:	f001 fc64 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80024b4:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ce:	4619      	mov	r1, r3
 80024d0:	481f      	ldr	r0, [pc, #124]	@ (8002550 <MX_GPIO_Init+0x2f0>)
 80024d2:	f001 fc53 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024d6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80024e8:	2303      	movs	r3, #3
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4817      	ldr	r0, [pc, #92]	@ (8002550 <MX_GPIO_Init+0x2f0>)
 80024f4:	f001 fc42 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800250a:	2301      	movs	r3, #1
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002512:	4619      	mov	r1, r3
 8002514:	4813      	ldr	r0, [pc, #76]	@ (8002564 <MX_GPIO_Init+0x304>)
 8002516:	f001 fc31 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800251a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800252c:	230d      	movs	r3, #13
 800252e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002534:	4619      	mov	r1, r3
 8002536:	480b      	ldr	r0, [pc, #44]	@ (8002564 <MX_GPIO_Init+0x304>)
 8002538:	f001 fc20 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800253c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	e00e      	b.n	8002568 <MX_GPIO_Init+0x308>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	48001000 	.word	0x48001000
 8002554:	48001400 	.word	0x48001400
 8002558:	48001800 	.word	0x48001800
 800255c:	48000800 	.word	0x48000800
 8002560:	48000c00 	.word	0x48000c00
 8002564:	48000400 	.word	0x48000400
 8002568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800256e:	230e      	movs	r3, #14
 8002570:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002576:	4619      	mov	r1, r3
 8002578:	485d      	ldr	r0, [pc, #372]	@ (80026f0 <MX_GPIO_Init+0x490>)
 800257a:	f001 fbff 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800257e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002590:	2307      	movs	r3, #7
 8002592:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002598:	4619      	mov	r1, r3
 800259a:	4856      	ldr	r0, [pc, #344]	@ (80026f4 <MX_GPIO_Init+0x494>)
 800259c:	f001 fbee 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025a0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025b2:	2302      	movs	r3, #2
 80025b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ba:	4619      	mov	r1, r3
 80025bc:	484d      	ldr	r0, [pc, #308]	@ (80026f4 <MX_GPIO_Init+0x494>)
 80025be:	f001 fbdd 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025c2:	2340      	movs	r3, #64	@ 0x40
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025d2:	230d      	movs	r3, #13
 80025d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025da:	4619      	mov	r1, r3
 80025dc:	4846      	ldr	r0, [pc, #280]	@ (80026f8 <MX_GPIO_Init+0x498>)
 80025de:	f001 fbcd 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025f2:	2302      	movs	r3, #2
 80025f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025fa:	4619      	mov	r1, r3
 80025fc:	483e      	ldr	r0, [pc, #248]	@ (80026f8 <MX_GPIO_Init+0x498>)
 80025fe:	f001 fbbd 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002602:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002608:	2301      	movs	r3, #1
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002618:	4619      	mov	r1, r3
 800261a:	4837      	ldr	r0, [pc, #220]	@ (80026f8 <MX_GPIO_Init+0x498>)
 800261c:	f001 fbae 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002620:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002626:	2301      	movs	r3, #1
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002636:	4619      	mov	r1, r3
 8002638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800263c:	f001 fb9e 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002640:	2301      	movs	r3, #1
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002650:	2309      	movs	r3, #9
 8002652:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002658:	4619      	mov	r1, r3
 800265a:	4826      	ldr	r0, [pc, #152]	@ (80026f4 <MX_GPIO_Init+0x494>)
 800265c:	f001 fb8e 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002660:	2304      	movs	r3, #4
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002670:	230c      	movs	r3, #12
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002678:	4619      	mov	r1, r3
 800267a:	481e      	ldr	r0, [pc, #120]	@ (80026f4 <MX_GPIO_Init+0x494>)
 800267c:	f001 fb7e 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002680:	2378      	movs	r3, #120	@ 0x78
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002684:	2301      	movs	r3, #1
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	4817      	ldr	r0, [pc, #92]	@ (80026f4 <MX_GPIO_Init+0x494>)
 8002698:	f001 fb70 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800269c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b0:	4619      	mov	r1, r3
 80026b2:	4812      	ldr	r0, [pc, #72]	@ (80026fc <MX_GPIO_Init+0x49c>)
 80026b4:	f001 fb62 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026b8:	2301      	movs	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026c8:	2302      	movs	r3, #2
 80026ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d0:	4619      	mov	r1, r3
 80026d2:	480b      	ldr	r0, [pc, #44]	@ (8002700 <MX_GPIO_Init+0x4a0>)
 80026d4:	f001 fb52 	bl	8003d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	2028      	movs	r0, #40	@ 0x28
 80026de:	f001 fb16 	bl	8003d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026e2:	2028      	movs	r0, #40	@ 0x28
 80026e4:	f001 fb2f 	bl	8003d46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80026e8:	bf00      	nop
 80026ea:	3738      	adds	r7, #56	@ 0x38
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	48000400 	.word	0x48000400
 80026f4:	48000c00 	.word	0x48000c00
 80026f8:	48000800 	.word	0x48000800
 80026fc:	48001800 	.word	0x48001800
 8002700:	48001000 	.word	0x48001000

08002704 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800270c:	1d39      	adds	r1, r7, #4
 800270e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002712:	2201      	movs	r2, #1
 8002714:	4803      	ldr	r0, [pc, #12]	@ (8002724 <__io_putchar+0x20>)
 8002716:	f004 ffe5 	bl	80076e4 <HAL_UART_Transmit>
  return ch;
 800271a:	687b      	ldr	r3, [r7, #4]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20040510 	.word	0x20040510

08002728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800272c:	b672      	cpsid	i
}
 800272e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <Error_Handler+0x8>

08002734 <HAL_GPIO_EXTI_Callback>:
//fever is 1 , multi is 2, base is 0
extern volatile uint8_t restock;


//May need to be positioned inside of main.c since its overriding the weak definition of this function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	80fb      	strh	r3, [r7, #6]

	//left motor
	if (GPIO_Pin == GPIO_PIN_13) {
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002744:	d11b      	bne.n	800277e <HAL_GPIO_EXTI_Callback+0x4a>
		runMotor(0);
 8002746:	2000      	movs	r0, #0
 8002748:	f000 f844 	bl	80027d4 <runMotor>
		restock = 0;
 800274c:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <HAL_GPIO_EXTI_Callback+0x94>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]

		//This is where it resets back to initial position
		if(leftReset == 7){
 8002752:	4b1e      	ldr	r3, [pc, #120]	@ (80027cc <HAL_GPIO_EXTI_Callback+0x98>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b07      	cmp	r3, #7
 8002758:	d10c      	bne.n	8002774 <HAL_GPIO_EXTI_Callback+0x40>
			restock = 2;
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <HAL_GPIO_EXTI_Callback+0x94>)
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2000);
 8002760:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002764:	f001 f9d4 	bl	8003b10 <HAL_Delay>
			runMotor(3);
 8002768:	2003      	movs	r0, #3
 800276a:	f000 f833 	bl	80027d4 <runMotor>
			leftReset = 0;
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_GPIO_EXTI_Callback+0x98>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

		}
		++leftReset;
 8002774:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_GPIO_EXTI_Callback+0x98>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	4a14      	ldr	r2, [pc, #80]	@ (80027cc <HAL_GPIO_EXTI_Callback+0x98>)
 800277c:	6013      	str	r3, [r2, #0]

	}

	//right motor
	if (GPIO_Pin == GPIO_PIN_12) {
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002784:	d11b      	bne.n	80027be <HAL_GPIO_EXTI_Callback+0x8a>
			runMotor(1);
 8002786:	2001      	movs	r0, #1
 8002788:	f000 f824 	bl	80027d4 <runMotor>
			restock = 0;
 800278c:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <HAL_GPIO_EXTI_Callback+0x94>)
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]

			//This is where it resets back to initial position
			if(rightReset == 7){
 8002792:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b07      	cmp	r3, #7
 8002798:	d10c      	bne.n	80027b4 <HAL_GPIO_EXTI_Callback+0x80>
				restock = 1;
 800279a:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_GPIO_EXTI_Callback+0x94>)
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(2000);
 80027a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80027a4:	f001 f9b4 	bl	8003b10 <HAL_Delay>
				runMotor(4);
 80027a8:	2004      	movs	r0, #4
 80027aa:	f000 f813 	bl	80027d4 <runMotor>
				rightReset = 0;
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
			}
			++rightReset;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3301      	adds	r3, #1
 80027ba:	4a05      	ldr	r2, [pc, #20]	@ (80027d0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80027bc:	6013      	str	r3, [r2, #0]
		}
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200408ac 	.word	0x200408ac
 80027cc:	200408b0 	.word	0x200408b0
 80027d0:	200408b4 	.word	0x200408b4

080027d4 <runMotor>:

void runMotor(uint8_t left_0_right_1 ){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]

	//2 m seconds event happening here
			if(left_0_right_1 == 0){
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d17c      	bne.n	80028de <runMotor+0x10a>

				for(int i = 0 ; i < 256 ;++i){
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	e075      	b.n	80028d6 <runMotor+0x102>
					HAL_Delay(2);
 80027ea:	2002      	movs	r0, #2
 80027ec:	f001 f990 	bl	8003b10 <HAL_Delay>


						if (modeLeft == 0){
 80027f0:	4bac      	ldr	r3, [pc, #688]	@ (8002aa4 <runMotor+0x2d0>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d114      	bne.n	8002824 <runMotor+0x50>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 80027fa:	2201      	movs	r2, #1
 80027fc:	2108      	movs	r1, #8
 80027fe:	48aa      	ldr	r0, [pc, #680]	@ (8002aa8 <runMotor+0x2d4>)
 8002800:	f001 fc4e 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2110      	movs	r1, #16
 8002808:	48a7      	ldr	r0, [pc, #668]	@ (8002aa8 <runMotor+0x2d4>)
 800280a:	f001 fc49 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2120      	movs	r1, #32
 8002812:	48a5      	ldr	r0, [pc, #660]	@ (8002aa8 <runMotor+0x2d4>)
 8002814:	f001 fc44 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2140      	movs	r1, #64	@ 0x40
 800281c:	48a2      	ldr	r0, [pc, #648]	@ (8002aa8 <runMotor+0x2d4>)
 800281e:	f001 fc3f 	bl	80040a0 <HAL_GPIO_WritePin>
 8002822:	e047      	b.n	80028b4 <runMotor+0xe0>
						}
						else if(modeLeft == 1){
 8002824:	4b9f      	ldr	r3, [pc, #636]	@ (8002aa4 <runMotor+0x2d0>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d114      	bne.n	8002858 <runMotor+0x84>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2108      	movs	r1, #8
 8002832:	489d      	ldr	r0, [pc, #628]	@ (8002aa8 <runMotor+0x2d4>)
 8002834:	f001 fc34 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002838:	2201      	movs	r2, #1
 800283a:	2110      	movs	r1, #16
 800283c:	489a      	ldr	r0, [pc, #616]	@ (8002aa8 <runMotor+0x2d4>)
 800283e:	f001 fc2f 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2120      	movs	r1, #32
 8002846:	4898      	ldr	r0, [pc, #608]	@ (8002aa8 <runMotor+0x2d4>)
 8002848:	f001 fc2a 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2140      	movs	r1, #64	@ 0x40
 8002850:	4895      	ldr	r0, [pc, #596]	@ (8002aa8 <runMotor+0x2d4>)
 8002852:	f001 fc25 	bl	80040a0 <HAL_GPIO_WritePin>
 8002856:	e02d      	b.n	80028b4 <runMotor+0xe0>
						}
						else if(modeLeft == 2){
 8002858:	4b92      	ldr	r3, [pc, #584]	@ (8002aa4 <runMotor+0x2d0>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d114      	bne.n	800288c <runMotor+0xb8>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2108      	movs	r1, #8
 8002866:	4890      	ldr	r0, [pc, #576]	@ (8002aa8 <runMotor+0x2d4>)
 8002868:	f001 fc1a 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2110      	movs	r1, #16
 8002870:	488d      	ldr	r0, [pc, #564]	@ (8002aa8 <runMotor+0x2d4>)
 8002872:	f001 fc15 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002876:	2201      	movs	r2, #1
 8002878:	2120      	movs	r1, #32
 800287a:	488b      	ldr	r0, [pc, #556]	@ (8002aa8 <runMotor+0x2d4>)
 800287c:	f001 fc10 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2140      	movs	r1, #64	@ 0x40
 8002884:	4888      	ldr	r0, [pc, #544]	@ (8002aa8 <runMotor+0x2d4>)
 8002886:	f001 fc0b 	bl	80040a0 <HAL_GPIO_WritePin>
 800288a:	e013      	b.n	80028b4 <runMotor+0xe0>
						}
						else{//mode = 3
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2108      	movs	r1, #8
 8002890:	4885      	ldr	r0, [pc, #532]	@ (8002aa8 <runMotor+0x2d4>)
 8002892:	f001 fc05 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2110      	movs	r1, #16
 800289a:	4883      	ldr	r0, [pc, #524]	@ (8002aa8 <runMotor+0x2d4>)
 800289c:	f001 fc00 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2120      	movs	r1, #32
 80028a4:	4880      	ldr	r0, [pc, #512]	@ (8002aa8 <runMotor+0x2d4>)
 80028a6:	f001 fbfb 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80028aa:	2201      	movs	r2, #1
 80028ac:	2140      	movs	r1, #64	@ 0x40
 80028ae:	487e      	ldr	r0, [pc, #504]	@ (8002aa8 <runMotor+0x2d4>)
 80028b0:	f001 fbf6 	bl	80040a0 <HAL_GPIO_WritePin>
						}


						modeLeft = (modeLeft + 1)%4;
 80028b4:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa4 <runMotor+0x2d0>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	425a      	negs	r2, r3
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	bf58      	it	pl
 80028c8:	4253      	negpl	r3, r2
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b75      	ldr	r3, [pc, #468]	@ (8002aa4 <runMotor+0x2d0>)
 80028ce:	801a      	strh	r2, [r3, #0]
				for(int i = 0 ; i < 256 ;++i){
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3301      	adds	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2bff      	cmp	r3, #255	@ 0xff
 80028da:	dd86      	ble.n	80027ea <runMotor+0x16>
						modeRight = (modeRight + 1)%4;


				}
			}
}
 80028dc:	e1a1      	b.n	8002c22 <runMotor+0x44e>
			else if(left_0_right_1 == 1){
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	f040 8086 	bne.w	80029f2 <runMotor+0x21e>
				for(int i = 0 ; i < 256 ;++i){
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	e07d      	b.n	80029e8 <runMotor+0x214>
					HAL_Delay(2);
 80028ec:	2002      	movs	r0, #2
 80028ee:	f001 f90f 	bl	8003b10 <HAL_Delay>
						if (modeRight == 0){
 80028f2:	4b6e      	ldr	r3, [pc, #440]	@ (8002aac <runMotor+0x2d8>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d116      	bne.n	800292a <runMotor+0x156>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 1);
 80028fc:	2201      	movs	r2, #1
 80028fe:	2180      	movs	r1, #128	@ 0x80
 8002900:	486b      	ldr	r0, [pc, #428]	@ (8002ab0 <runMotor+0x2dc>)
 8002902:	f001 fbcd 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800290c:	4868      	ldr	r0, [pc, #416]	@ (8002ab0 <runMotor+0x2dc>)
 800290e:	f001 fbc7 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002918:	4865      	ldr	r0, [pc, #404]	@ (8002ab0 <runMotor+0x2dc>)
 800291a:	f001 fbc1 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2102      	movs	r1, #2
 8002922:	4864      	ldr	r0, [pc, #400]	@ (8002ab4 <runMotor+0x2e0>)
 8002924:	f001 fbbc 	bl	80040a0 <HAL_GPIO_WritePin>
 8002928:	e04d      	b.n	80029c6 <runMotor+0x1f2>
						else if(modeRight == 1){
 800292a:	4b60      	ldr	r3, [pc, #384]	@ (8002aac <runMotor+0x2d8>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d116      	bne.n	8002962 <runMotor+0x18e>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	2180      	movs	r1, #128	@ 0x80
 8002938:	485d      	ldr	r0, [pc, #372]	@ (8002ab0 <runMotor+0x2dc>)
 800293a:	f001 fbb1 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 800293e:	2201      	movs	r2, #1
 8002940:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002944:	485a      	ldr	r0, [pc, #360]	@ (8002ab0 <runMotor+0x2dc>)
 8002946:	f001 fbab 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002950:	4857      	ldr	r0, [pc, #348]	@ (8002ab0 <runMotor+0x2dc>)
 8002952:	f001 fba5 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2102      	movs	r1, #2
 800295a:	4856      	ldr	r0, [pc, #344]	@ (8002ab4 <runMotor+0x2e0>)
 800295c:	f001 fba0 	bl	80040a0 <HAL_GPIO_WritePin>
 8002960:	e031      	b.n	80029c6 <runMotor+0x1f2>
						else if(modeRight == 2){
 8002962:	4b52      	ldr	r3, [pc, #328]	@ (8002aac <runMotor+0x2d8>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d116      	bne.n	800299a <runMotor+0x1c6>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2180      	movs	r1, #128	@ 0x80
 8002970:	484f      	ldr	r0, [pc, #316]	@ (8002ab0 <runMotor+0x2dc>)
 8002972:	f001 fb95 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800297c:	484c      	ldr	r0, [pc, #304]	@ (8002ab0 <runMotor+0x2dc>)
 800297e:	f001 fb8f 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 1);
 8002982:	2201      	movs	r2, #1
 8002984:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002988:	4849      	ldr	r0, [pc, #292]	@ (8002ab0 <runMotor+0x2dc>)
 800298a:	f001 fb89 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2102      	movs	r1, #2
 8002992:	4848      	ldr	r0, [pc, #288]	@ (8002ab4 <runMotor+0x2e0>)
 8002994:	f001 fb84 	bl	80040a0 <HAL_GPIO_WritePin>
 8002998:	e015      	b.n	80029c6 <runMotor+0x1f2>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2180      	movs	r1, #128	@ 0x80
 800299e:	4844      	ldr	r0, [pc, #272]	@ (8002ab0 <runMotor+0x2dc>)
 80029a0:	f001 fb7e 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029aa:	4841      	ldr	r0, [pc, #260]	@ (8002ab0 <runMotor+0x2dc>)
 80029ac:	f001 fb78 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029b6:	483e      	ldr	r0, [pc, #248]	@ (8002ab0 <runMotor+0x2dc>)
 80029b8:	f001 fb72 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 80029bc:	2201      	movs	r2, #1
 80029be:	2102      	movs	r1, #2
 80029c0:	483c      	ldr	r0, [pc, #240]	@ (8002ab4 <runMotor+0x2e0>)
 80029c2:	f001 fb6d 	bl	80040a0 <HAL_GPIO_WritePin>
						modeRight = (modeRight + 1)%4;
 80029c6:	4b39      	ldr	r3, [pc, #228]	@ (8002aac <runMotor+0x2d8>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	425a      	negs	r2, r3
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	f002 0203 	and.w	r2, r2, #3
 80029d8:	bf58      	it	pl
 80029da:	4253      	negpl	r3, r2
 80029dc:	b29a      	uxth	r2, r3
 80029de:	4b33      	ldr	r3, [pc, #204]	@ (8002aac <runMotor+0x2d8>)
 80029e0:	801a      	strh	r2, [r3, #0]
				for(int i = 0 ; i < 256 ;++i){
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	3301      	adds	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2bff      	cmp	r3, #255	@ 0xff
 80029ec:	f77f af7e 	ble.w	80028ec <runMotor+0x118>
}
 80029f0:	e117      	b.n	8002c22 <runMotor+0x44e>
			else if(left_0_right_1 == 3){
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	f040 808a 	bne.w	8002b0e <runMotor+0x33a>
				for(int i = 0 ; i < 1792 ;++i){
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e080      	b.n	8002b02 <runMotor+0x32e>
					HAL_Delay(2);
 8002a00:	2002      	movs	r0, #2
 8002a02:	f001 f885 	bl	8003b10 <HAL_Delay>
					if (modeLeft == 0){
 8002a06:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <runMotor+0x2d0>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d114      	bne.n	8002a3a <runMotor+0x266>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2108      	movs	r1, #8
 8002a14:	4824      	ldr	r0, [pc, #144]	@ (8002aa8 <runMotor+0x2d4>)
 8002a16:	f001 fb43 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	4822      	ldr	r0, [pc, #136]	@ (8002aa8 <runMotor+0x2d4>)
 8002a20:	f001 fb3e 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2120      	movs	r1, #32
 8002a28:	481f      	ldr	r0, [pc, #124]	@ (8002aa8 <runMotor+0x2d4>)
 8002a2a:	f001 fb39 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2140      	movs	r1, #64	@ 0x40
 8002a32:	481d      	ldr	r0, [pc, #116]	@ (8002aa8 <runMotor+0x2d4>)
 8002a34:	f001 fb34 	bl	80040a0 <HAL_GPIO_WritePin>
 8002a38:	e052      	b.n	8002ae0 <runMotor+0x30c>
					else if(modeLeft == 1){
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <runMotor+0x2d0>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d114      	bne.n	8002a6e <runMotor+0x29a>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2108      	movs	r1, #8
 8002a48:	4817      	ldr	r0, [pc, #92]	@ (8002aa8 <runMotor+0x2d4>)
 8002a4a:	f001 fb29 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2110      	movs	r1, #16
 8002a52:	4815      	ldr	r0, [pc, #84]	@ (8002aa8 <runMotor+0x2d4>)
 8002a54:	f001 fb24 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2120      	movs	r1, #32
 8002a5c:	4812      	ldr	r0, [pc, #72]	@ (8002aa8 <runMotor+0x2d4>)
 8002a5e:	f001 fb1f 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2140      	movs	r1, #64	@ 0x40
 8002a66:	4810      	ldr	r0, [pc, #64]	@ (8002aa8 <runMotor+0x2d4>)
 8002a68:	f001 fb1a 	bl	80040a0 <HAL_GPIO_WritePin>
 8002a6c:	e038      	b.n	8002ae0 <runMotor+0x30c>
					else if(modeLeft == 2){
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <runMotor+0x2d0>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d11f      	bne.n	8002ab8 <runMotor+0x2e4>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	480a      	ldr	r0, [pc, #40]	@ (8002aa8 <runMotor+0x2d4>)
 8002a7e:	f001 fb0f 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8002a82:	2201      	movs	r2, #1
 8002a84:	2110      	movs	r1, #16
 8002a86:	4808      	ldr	r0, [pc, #32]	@ (8002aa8 <runMotor+0x2d4>)
 8002a88:	f001 fb0a 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2120      	movs	r1, #32
 8002a90:	4805      	ldr	r0, [pc, #20]	@ (8002aa8 <runMotor+0x2d4>)
 8002a92:	f001 fb05 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2140      	movs	r1, #64	@ 0x40
 8002a9a:	4803      	ldr	r0, [pc, #12]	@ (8002aa8 <runMotor+0x2d4>)
 8002a9c:	f001 fb00 	bl	80040a0 <HAL_GPIO_WritePin>
 8002aa0:	e01e      	b.n	8002ae0 <runMotor+0x30c>
 8002aa2:	bf00      	nop
 8002aa4:	200408b8 	.word	0x200408b8
 8002aa8:	48000c00 	.word	0x48000c00
 8002aac:	200408ba 	.word	0x200408ba
 8002ab0:	48001400 	.word	0x48001400
 8002ab4:	48001800 	.word	0x48001800
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2108      	movs	r1, #8
 8002abc:	485b      	ldr	r0, [pc, #364]	@ (8002c2c <runMotor+0x458>)
 8002abe:	f001 faef 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2110      	movs	r1, #16
 8002ac6:	4859      	ldr	r0, [pc, #356]	@ (8002c2c <runMotor+0x458>)
 8002ac8:	f001 faea 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2120      	movs	r1, #32
 8002ad0:	4856      	ldr	r0, [pc, #344]	@ (8002c2c <runMotor+0x458>)
 8002ad2:	f001 fae5 	bl	80040a0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2140      	movs	r1, #64	@ 0x40
 8002ada:	4854      	ldr	r0, [pc, #336]	@ (8002c2c <runMotor+0x458>)
 8002adc:	f001 fae0 	bl	80040a0 <HAL_GPIO_WritePin>
					modeLeft = (modeLeft + 1)%4;
 8002ae0:	4b53      	ldr	r3, [pc, #332]	@ (8002c30 <runMotor+0x45c>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	425a      	negs	r2, r3
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	f002 0203 	and.w	r2, r2, #3
 8002af2:	bf58      	it	pl
 8002af4:	4253      	negpl	r3, r2
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c30 <runMotor+0x45c>)
 8002afa:	801a      	strh	r2, [r3, #0]
				for(int i = 0 ; i < 1792 ;++i){
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b08:	f6ff af7a 	blt.w	8002a00 <runMotor+0x22c>
}
 8002b0c:	e089      	b.n	8002c22 <runMotor+0x44e>
			else if(left_0_right_1 == 4){
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	f040 8086 	bne.w	8002c22 <runMotor+0x44e>
				for(int i = 0 ; i < 1792 ;++i){
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	e07d      	b.n	8002c18 <runMotor+0x444>
					HAL_Delay(2);
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f000 fff7 	bl	8003b10 <HAL_Delay>
						if (modeRight == 0){
 8002b22:	4b44      	ldr	r3, [pc, #272]	@ (8002c34 <runMotor+0x460>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d116      	bne.n	8002b5a <runMotor+0x386>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2180      	movs	r1, #128	@ 0x80
 8002b30:	4841      	ldr	r0, [pc, #260]	@ (8002c38 <runMotor+0x464>)
 8002b32:	f001 fab5 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b3c:	483e      	ldr	r0, [pc, #248]	@ (8002c38 <runMotor+0x464>)
 8002b3e:	f001 faaf 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b48:	483b      	ldr	r0, [pc, #236]	@ (8002c38 <runMotor+0x464>)
 8002b4a:	f001 faa9 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2102      	movs	r1, #2
 8002b52:	483a      	ldr	r0, [pc, #232]	@ (8002c3c <runMotor+0x468>)
 8002b54:	f001 faa4 	bl	80040a0 <HAL_GPIO_WritePin>
 8002b58:	e04d      	b.n	8002bf6 <runMotor+0x422>
						else if(modeRight == 1){
 8002b5a:	4b36      	ldr	r3, [pc, #216]	@ (8002c34 <runMotor+0x460>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d116      	bne.n	8002b92 <runMotor+0x3be>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 8002b64:	2200      	movs	r2, #0
 8002b66:	2180      	movs	r1, #128	@ 0x80
 8002b68:	4833      	ldr	r0, [pc, #204]	@ (8002c38 <runMotor+0x464>)
 8002b6a:	f001 fa99 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b74:	4830      	ldr	r0, [pc, #192]	@ (8002c38 <runMotor+0x464>)
 8002b76:	f001 fa93 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 1);
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b80:	482d      	ldr	r0, [pc, #180]	@ (8002c38 <runMotor+0x464>)
 8002b82:	f001 fa8d 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2102      	movs	r1, #2
 8002b8a:	482c      	ldr	r0, [pc, #176]	@ (8002c3c <runMotor+0x468>)
 8002b8c:	f001 fa88 	bl	80040a0 <HAL_GPIO_WritePin>
 8002b90:	e031      	b.n	8002bf6 <runMotor+0x422>
						else if(modeRight == 2){
 8002b92:	4b28      	ldr	r3, [pc, #160]	@ (8002c34 <runMotor+0x460>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d116      	bne.n	8002bca <runMotor+0x3f6>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2180      	movs	r1, #128	@ 0x80
 8002ba0:	4825      	ldr	r0, [pc, #148]	@ (8002c38 <runMotor+0x464>)
 8002ba2:	f001 fa7d 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bac:	4822      	ldr	r0, [pc, #136]	@ (8002c38 <runMotor+0x464>)
 8002bae:	f001 fa77 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bb8:	481f      	ldr	r0, [pc, #124]	@ (8002c38 <runMotor+0x464>)
 8002bba:	f001 fa71 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	481e      	ldr	r0, [pc, #120]	@ (8002c3c <runMotor+0x468>)
 8002bc4:	f001 fa6c 	bl	80040a0 <HAL_GPIO_WritePin>
 8002bc8:	e015      	b.n	8002bf6 <runMotor+0x422>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 1);
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2180      	movs	r1, #128	@ 0x80
 8002bce:	481a      	ldr	r0, [pc, #104]	@ (8002c38 <runMotor+0x464>)
 8002bd0:	f001 fa66 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bda:	4817      	ldr	r0, [pc, #92]	@ (8002c38 <runMotor+0x464>)
 8002bdc:	f001 fa60 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002be6:	4814      	ldr	r0, [pc, #80]	@ (8002c38 <runMotor+0x464>)
 8002be8:	f001 fa5a 	bl	80040a0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4812      	ldr	r0, [pc, #72]	@ (8002c3c <runMotor+0x468>)
 8002bf2:	f001 fa55 	bl	80040a0 <HAL_GPIO_WritePin>
						modeRight = (modeRight + 1)%4;
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <runMotor+0x460>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	425a      	negs	r2, r3
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	f002 0203 	and.w	r2, r2, #3
 8002c08:	bf58      	it	pl
 8002c0a:	4253      	negpl	r3, r2
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <runMotor+0x460>)
 8002c10:	801a      	strh	r2, [r3, #0]
				for(int i = 0 ; i < 1792 ;++i){
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3301      	adds	r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c1e:	f6ff af7d 	blt.w	8002b1c <runMotor+0x348>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	48000c00 	.word	0x48000c00
 8002c30:	200408b8 	.word	0x200408b8
 8002c34:	200408ba 	.word	0x200408ba
 8002c38:	48001400 	.word	0x48001400
 8002c3c:	48001800 	.word	0x48001800

08002c40 <RC522_SPI_Transfer>:
#include "rfid.h"

//SPI transfer

uint8_t RC522_SPI_Transfer(uint8_t data){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, 100);
 8002c4a:	f107 020f 	add.w	r2, r7, #15
 8002c4e:	1df9      	adds	r1, r7, #7
 8002c50:	2364      	movs	r3, #100	@ 0x64
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2301      	movs	r3, #1
 8002c56:	4804      	ldr	r0, [pc, #16]	@ (8002c68 <RC522_SPI_Transfer+0x28>)
 8002c58:	f004 f971 	bl	8006f3e <HAL_SPI_TransmitReceive>
	return rx_data;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20040638 	.word	0x20040638

08002c6c <Write_MFRC522>:

void Write_MFRC522(uint8_t addr, uint8_t val){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	460a      	mov	r2, r1
 8002c76:	71fb      	strb	r3, [r7, #7]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71bb      	strb	r3, [r7, #6]
	//cs low to select the device
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2110      	movs	r1, #16
 8002c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c84:	f001 fa0c 	bl	80040a0 <HAL_GPIO_WritePin>

	//select addr
	RC522_SPI_Transfer((addr << 1) & 0x7E);
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ffd3 	bl	8002c40 <RC522_SPI_Transfer>

	//write to addr
	RC522_SPI_Transfer(val);
 8002c9a:	79bb      	ldrb	r3, [r7, #6]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ffcf 	bl	8002c40 <RC522_SPI_Transfer>

	//set back to high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	2110      	movs	r1, #16
 8002ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002caa:	f001 f9f9 	bl	80040a0 <HAL_GPIO_WritePin>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <Read_MFRC522>:

uint8_t Read_MFRC522(uint8_t addr){
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	//cs low to select SPI device
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cc8:	f001 f9ea 	bl	80040a0 <HAL_GPIO_WritePin>

	//select addr
	RC522_SPI_Transfer(((addr << 1) & 0x7E) | 0x80);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ffac 	bl	8002c40 <RC522_SPI_Transfer>

	//read addr
	val = RC522_SPI_Transfer(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7ff ffa9 	bl	8002c40 <RC522_SPI_Transfer>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	73fb      	strb	r3, [r7, #15]

	//set back to high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2110      	movs	r1, #16
 8002cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cfa:	f001 f9d1 	bl	80040a0 <HAL_GPIO_WritePin>
	return val;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <SetBitMask>:

//set bits in a MFRC522 register
void SetBitMask(uint8_t reg, uint8_t mask){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	460a      	mov	r2, r1
 8002d12:	71fb      	strb	r3, [r7, #7]
 8002d14:	4613      	mov	r3, r2
 8002d16:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	tmp = Read_MFRC522(reg);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff ffcb 	bl	8002cb6 <Read_MFRC522>
 8002d20:	4603      	mov	r3, r0
 8002d22:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	79bb      	ldrb	r3, [r7, #6]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff9b 	bl	8002c6c <Write_MFRC522>
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <ClearBitMask>:

//reset bits in register
void ClearBitMask(uint8_t reg, uint8_t mask){
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	460a      	mov	r2, r1
 8002d48:	71fb      	strb	r3, [r7, #7]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	tmp = Read_MFRC522(reg);
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ffb0 	bl	8002cb6 <Read_MFRC522>
 8002d56:	4603      	mov	r3, r0
 8002d58:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));
 8002d5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	b25a      	sxtb	r2, r3
 8002d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d66:	4013      	ands	r3, r2
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff7b 	bl	8002c6c <Write_MFRC522>
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <AntennaOn>:

void AntennaOn(void){
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
	Read_MFRC522(TxControlReg);
 8002d82:	2014      	movs	r0, #20
 8002d84:	f7ff ff97 	bl	8002cb6 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8002d88:	2103      	movs	r1, #3
 8002d8a:	2014      	movs	r0, #20
 8002d8c:	f7ff ffbc 	bl	8002d08 <SetBitMask>
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <MFRC522_Reset>:
void AntennaOff(void){
	ClearBitMask(TxControlReg, 0x03);
}

//reset RC522
void MFRC522_Reset(void){
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8002d98:	210f      	movs	r1, #15
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7ff ff66 	bl	8002c6c <Write_MFRC522>
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <MFRC522_Init>:

//start RC522
void MFRC522_Init(void){
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0

	//CS pin A4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002da8:	2201      	movs	r2, #1
 8002daa:	2110      	movs	r1, #16
 8002dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002db0:	f001 f976 	bl	80040a0 <HAL_GPIO_WritePin>

	//reset pin A8
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002db4:	2201      	movs	r2, #1
 8002db6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dbe:	f001 f96f 	bl	80040a0 <HAL_GPIO_WritePin>

	MFRC522_Reset();
 8002dc2:	f7ff ffe7 	bl	8002d94 <MFRC522_Reset>

	Write_MFRC522(TModeReg, 0x8D);
 8002dc6:	218d      	movs	r1, #141	@ 0x8d
 8002dc8:	202a      	movs	r0, #42	@ 0x2a
 8002dca:	f7ff ff4f 	bl	8002c6c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);
 8002dce:	213e      	movs	r1, #62	@ 0x3e
 8002dd0:	202b      	movs	r0, #43	@ 0x2b
 8002dd2:	f7ff ff4b 	bl	8002c6c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8002dd6:	211e      	movs	r1, #30
 8002dd8:	202d      	movs	r0, #45	@ 0x2d
 8002dda:	f7ff ff47 	bl	8002c6c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8002dde:	2100      	movs	r1, #0
 8002de0:	202c      	movs	r0, #44	@ 0x2c
 8002de2:	f7ff ff43 	bl	8002c6c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);
 8002de6:	2140      	movs	r1, #64	@ 0x40
 8002de8:	2015      	movs	r0, #21
 8002dea:	f7ff ff3f 	bl	8002c6c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);
 8002dee:	213d      	movs	r1, #61	@ 0x3d
 8002df0:	2011      	movs	r0, #17
 8002df2:	f7ff ff3b 	bl	8002c6c <Write_MFRC522>

	AntennaOn();
 8002df6:	f7ff ffc2 	bl	8002d7e <AntennaOn>
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen){
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b089      	sub	sp, #36	@ 0x24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	4603      	mov	r3, r0
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8002e10:	2302      	movs	r3, #2
 8002e12:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 8002e14:	2300      	movs	r3, #0
 8002e16:	77bb      	strb	r3, [r7, #30]
	uint8_t waitIRQ = 0x00;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	777b      	strb	r3, [r7, #29]
	uint8_t lastBits;
	uint8_t n;
	uint i;

	switch (command){
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d006      	beq.n	8002e30 <MFRC522_ToCard+0x32>
 8002e22:	2b0e      	cmp	r3, #14
 8002e24:	d109      	bne.n	8002e3a <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT:
		{
			irqEn = 0x12;
 8002e26:	2312      	movs	r3, #18
 8002e28:	77bb      	strb	r3, [r7, #30]
			waitIRQ = 0x10;
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	777b      	strb	r3, [r7, #29]
			break;
 8002e2e:	e005      	b.n	8002e3c <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:
		{
			irqEn = 0x77;
 8002e30:	2377      	movs	r3, #119	@ 0x77
 8002e32:	77bb      	strb	r3, [r7, #30]
			waitIRQ = 0x30;
 8002e34:	2330      	movs	r3, #48	@ 0x30
 8002e36:	777b      	strb	r3, [r7, #29]
			break;
 8002e38:	e000      	b.n	8002e3c <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8002e3a:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn|0x80);
 8002e3c:	7fbb      	ldrb	r3, [r7, #30]
 8002e3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	2002      	movs	r0, #2
 8002e48:	f7ff ff10 	bl	8002c6c <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);
 8002e4c:	2180      	movs	r1, #128	@ 0x80
 8002e4e:	2004      	movs	r0, #4
 8002e50:	f7ff ff75 	bl	8002d3e <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);
 8002e54:	2180      	movs	r1, #128	@ 0x80
 8002e56:	200a      	movs	r0, #10
 8002e58:	f7ff ff56 	bl	8002d08 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7ff ff04 	bl	8002c6c <Write_MFRC522>

	for(i = 0; i < sendLen; ++i){
 8002e64:	2300      	movs	r3, #0
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	e00a      	b.n	8002e80 <MFRC522_ToCard+0x82>
		Write_MFRC522(FIFODataReg, sendData[i]);
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	4413      	add	r3, r2
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	2009      	movs	r0, #9
 8002e76:	f7ff fef9 	bl	8002c6c <Write_MFRC522>
	for(i = 0; i < sendLen; ++i){
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	7bbb      	ldrb	r3, [r7, #14]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d3f0      	bcc.n	8002e6a <MFRC522_ToCard+0x6c>
	}

	Write_MFRC522(CommandReg, command);
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7ff feed 	bl	8002c6c <Write_MFRC522>
	if(command == PCD_TRANSCEIVE){
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	d103      	bne.n	8002ea0 <MFRC522_ToCard+0xa2>
		SetBitMask(BitFramingReg, 0x80);
 8002e98:	2180      	movs	r1, #128	@ 0x80
 8002e9a:	200d      	movs	r0, #13
 8002e9c:	f7ff ff34 	bl	8002d08 <SetBitMask>
	}

	i = 2000;
 8002ea0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ea4:	61bb      	str	r3, [r7, #24]
	do{
		n = Read_MFRC522(CommIrqReg);
 8002ea6:	2004      	movs	r0, #4
 8002ea8:	f7ff ff05 	bl	8002cb6 <Read_MFRC522>
 8002eac:	4603      	mov	r3, r0
 8002eae:	773b      	strb	r3, [r7, #28]
		--i;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
	}
	while((i != 0) && !(n & 0x01) && !(n & waitIRQ));
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <MFRC522_ToCard+0xd4>
 8002ebc:	7f3b      	ldrb	r3, [r7, #28]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <MFRC522_ToCard+0xd4>
 8002ec6:	7f3a      	ldrb	r2, [r7, #28]
 8002ec8:	7f7b      	ldrb	r3, [r7, #29]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0e9      	beq.n	8002ea6 <MFRC522_ToCard+0xa8>

	ClearBitMask(BitFramingReg, 0x80);
 8002ed2:	2180      	movs	r1, #128	@ 0x80
 8002ed4:	200d      	movs	r0, #13
 8002ed6:	f7ff ff32 	bl	8002d3e <ClearBitMask>

	if(i != 0){
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d052      	beq.n	8002f86 <MFRC522_ToCard+0x188>
		if(!(Read_MFRC522(ErrorReg) & 0x1B)){
 8002ee0:	2006      	movs	r0, #6
 8002ee2:	f7ff fee8 	bl	8002cb6 <Read_MFRC522>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f003 031b 	and.w	r3, r3, #27
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d148      	bne.n	8002f82 <MFRC522_ToCard+0x184>
			status = MI_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
			if(n & irqEn & 0x01){
 8002ef4:	7f3a      	ldrb	r2, [r7, #28]
 8002ef6:	7fbb      	ldrb	r3, [r7, #30]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
			}

			if(command == PCD_TRANSCEIVE){
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d13b      	bne.n	8002f86 <MFRC522_ToCard+0x188>
				n = Read_MFRC522(FIFOLevelReg);
 8002f0e:	200a      	movs	r0, #10
 8002f10:	f7ff fed1 	bl	8002cb6 <Read_MFRC522>
 8002f14:	4603      	mov	r3, r0
 8002f16:	773b      	strb	r3, [r7, #28]
				lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002f18:	200c      	movs	r0, #12
 8002f1a:	f7ff fecc 	bl	8002cb6 <Read_MFRC522>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	75fb      	strb	r3, [r7, #23]
				if(lastBits){
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <MFRC522_ToCard+0x140>
					*backLen = (n-1)*8 + lastBits;
 8002f2c:	7f3b      	ldrb	r3, [r7, #28]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	00da      	lsls	r2, r3, #3
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	4413      	add	r3, r2
 8002f36:	461a      	mov	r2, r3
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e004      	b.n	8002f48 <MFRC522_ToCard+0x14a>
				}
				else{
					*backLen = n*8;
 8002f3e:	7f3b      	ldrb	r3, [r7, #28]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	461a      	mov	r2, r3
 8002f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f46:	601a      	str	r2, [r3, #0]
				}

				if(n == 0){
 8002f48:	7f3b      	ldrb	r3, [r7, #28]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <MFRC522_ToCard+0x154>
					n = 1;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	773b      	strb	r3, [r7, #28]
				}
				if(n > MAX_LEN){
 8002f52:	7f3b      	ldrb	r3, [r7, #28]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d901      	bls.n	8002f5c <MFRC522_ToCard+0x15e>
					n = MAX_LEN;
 8002f58:	2310      	movs	r3, #16
 8002f5a:	773b      	strb	r3, [r7, #28]
				}

				for(i = 0; i < n; ++i){
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e00a      	b.n	8002f78 <MFRC522_ToCard+0x17a>
					backData[i] = Read_MFRC522(FIFODataReg);
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	18d4      	adds	r4, r2, r3
 8002f68:	2009      	movs	r0, #9
 8002f6a:	f7ff fea4 	bl	8002cb6 <Read_MFRC522>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	7023      	strb	r3, [r4, #0]
				for(i = 0; i < n; ++i){
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3301      	adds	r3, #1
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	7f3b      	ldrb	r3, [r7, #28]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d3f0      	bcc.n	8002f62 <MFRC522_ToCard+0x164>
 8002f80:	e001      	b.n	8002f86 <MFRC522_ToCard+0x188>
				}
			}
		}
		else{
			status = MI_ERR;
 8002f82:	2302      	movs	r3, #2
 8002f84:	77fb      	strb	r3, [r7, #31]
		}
	}
	return status;
 8002f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3724      	adds	r7, #36	@ 0x24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd90      	pop	{r4, r7, pc}

08002f90 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint backBits;

	Write_MFRC522(BitFramingReg, 0x07);
 8002f9c:	2107      	movs	r1, #7
 8002f9e:	200d      	movs	r0, #13
 8002fa0:	f7ff fe64 	bl	8002c6c <Write_MFRC522>

	TagType[0] = reqMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	79fa      	ldrb	r2, [r7, #7]
 8002fa8:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002faa:	f107 0308 	add.w	r3, r7, #8
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	200c      	movs	r0, #12
 8002fb8:	f7ff ff21 	bl	8002dfe <MFRC522_ToCard>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]

	if((status != MI_OK) || (backBits != 0x10)){
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <MFRC522_Request+0x3c>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d001      	beq.n	8002fd0 <MFRC522_Request+0x40>
		status = MI_ERR;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <MFRC522_Anticoll>:


uint8_t MFRC522_Anticoll(uint8_t *serNum){
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af02      	add	r7, sp, #8
 8002fe0:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	737b      	strb	r3, [r7, #13]
	uint unLen = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]

	Write_MFRC522(BitFramingReg, 0x00);
 8002fea:	2100      	movs	r1, #0
 8002fec:	200d      	movs	r0, #13
 8002fee:	f7ff fe3d 	bl	8002c6c <Write_MFRC522>

	serNum[0] = PICC_ANTICOLL;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2293      	movs	r2, #147	@ 0x93
 8002ff6:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003000:	f107 0308 	add.w	r3, r7, #8
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	200c      	movs	r0, #12
 800300e:	f7ff fef6 	bl	8002dfe <MFRC522_ToCard>
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]

	if(status == MI_OK){
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d118      	bne.n	800304e <MFRC522_Anticoll+0x74>
		for(i = 0; i < 4; ++i){
 800301c:	2300      	movs	r3, #0
 800301e:	73bb      	strb	r3, [r7, #14]
 8003020:	e009      	b.n	8003036 <MFRC522_Anticoll+0x5c>
			serNumCheck ^= serNum[i];
 8003022:	7bbb      	ldrb	r3, [r7, #14]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	7b7b      	ldrb	r3, [r7, #13]
 800302c:	4053      	eors	r3, r2
 800302e:	737b      	strb	r3, [r7, #13]
		for(i = 0; i < 4; ++i){
 8003030:	7bbb      	ldrb	r3, [r7, #14]
 8003032:	3301      	adds	r3, #1
 8003034:	73bb      	strb	r3, [r7, #14]
 8003036:	7bbb      	ldrb	r3, [r7, #14]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d9f2      	bls.n	8003022 <MFRC522_Anticoll+0x48>
		}
		if(serNumCheck != serNum[i]){
 800303c:	7bbb      	ldrb	r3, [r7, #14]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	7b7a      	ldrb	r2, [r7, #13]
 8003046:	429a      	cmp	r2, r3
 8003048:	d001      	beq.n	800304e <MFRC522_Anticoll+0x74>
			status = MI_ERR;
 800304a:	2302      	movs	r3, #2
 800304c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <CalculateCRC>:

void CalculateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData){
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	460b      	mov	r3, r1
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	ClearBitMask(DivIrqReg, 0x04);
 8003066:	2104      	movs	r1, #4
 8003068:	2005      	movs	r0, #5
 800306a:	f7ff fe68 	bl	8002d3e <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);
 800306e:	2180      	movs	r1, #128	@ 0x80
 8003070:	200a      	movs	r0, #10
 8003072:	f7ff fe49 	bl	8002d08 <SetBitMask>

	for(i = 0; i < len; ++i){
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
 800307a:	e00a      	b.n	8003092 <CalculateCRC+0x3a>
		Write_MFRC522(FIFODataReg, *(pIndata+i));
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	2009      	movs	r0, #9
 8003088:	f7ff fdf0 	bl	8002c6c <Write_MFRC522>
	for(i = 0; i < len; ++i){
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	3301      	adds	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
 8003092:	7dfa      	ldrb	r2, [r7, #23]
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	429a      	cmp	r2, r3
 8003098:	d3f0      	bcc.n	800307c <CalculateCRC+0x24>
	}

	Write_MFRC522(CommandReg, PCD_CALCCRC);
 800309a:	2103      	movs	r1, #3
 800309c:	2001      	movs	r0, #1
 800309e:	f7ff fde5 	bl	8002c6c <Write_MFRC522>

	i = 0xFF;
 80030a2:	23ff      	movs	r3, #255	@ 0xff
 80030a4:	75fb      	strb	r3, [r7, #23]
	do{
		n = Read_MFRC522(DivIrqReg);
 80030a6:	2005      	movs	r0, #5
 80030a8:	f7ff fe05 	bl	8002cb6 <Read_MFRC522>
 80030ac:	4603      	mov	r3, r0
 80030ae:	75bb      	strb	r3, [r7, #22]
		i--;
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
	}
	while((i != 0) && !(n & 0x04));
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <CalculateCRC+0x6e>
 80030bc:	7dbb      	ldrb	r3, [r7, #22]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ef      	beq.n	80030a6 <CalculateCRC+0x4e>

	pOutData[0] = Read_MFRC522(CRCResultRegL);
 80030c6:	2022      	movs	r0, #34	@ 0x22
 80030c8:	f7ff fdf5 	bl	8002cb6 <Read_MFRC522>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_MFRC522(CRCResultRegM);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	1c5c      	adds	r4, r3, #1
 80030d8:	2021      	movs	r0, #33	@ 0x21
 80030da:	f7ff fdec 	bl	8002cb6 <Read_MFRC522>
 80030de:	4603      	mov	r3, r0
 80030e0:	7023      	strb	r3, [r4, #0]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}

080030ea <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t *serNum){
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b08a      	sub	sp, #40	@ 0x28
 80030ee:	af02      	add	r7, sp, #8
 80030f0:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint recvBits;
	uint8_t buffer[9];

	buffer[0] = PICC_SElECTTAG;
 80030f2:	2393      	movs	r3, #147	@ 0x93
 80030f4:	733b      	strb	r3, [r7, #12]
	buffer[1] = 0x70;
 80030f6:	2370      	movs	r3, #112	@ 0x70
 80030f8:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < 5; ++i){
 80030fa:	2300      	movs	r3, #0
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e00c      	b.n	800311a <MFRC522_SelectTag+0x30>
		buffer[i + 2] = *(serNum + i);
 8003100:	7ffb      	ldrb	r3, [r7, #31]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	441a      	add	r2, r3
 8003106:	7ffb      	ldrb	r3, [r7, #31]
 8003108:	3302      	adds	r3, #2
 800310a:	7812      	ldrb	r2, [r2, #0]
 800310c:	3320      	adds	r3, #32
 800310e:	443b      	add	r3, r7
 8003110:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 5; ++i){
 8003114:	7ffb      	ldrb	r3, [r7, #31]
 8003116:	3301      	adds	r3, #1
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	7ffb      	ldrb	r3, [r7, #31]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d9ef      	bls.n	8003100 <MFRC522_SelectTag+0x16>
	}

	CalculateCRC(buffer, 7, &buffer[7]);
 8003120:	f107 030c 	add.w	r3, r7, #12
 8003124:	1dda      	adds	r2, r3, #7
 8003126:	f107 030c 	add.w	r3, r7, #12
 800312a:	2107      	movs	r1, #7
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff93 	bl	8003058 <CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8003132:	f107 020c 	add.w	r2, r7, #12
 8003136:	f107 010c 	add.w	r1, r7, #12
 800313a:	f107 0318 	add.w	r3, r7, #24
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4613      	mov	r3, r2
 8003142:	2209      	movs	r2, #9
 8003144:	200c      	movs	r0, #12
 8003146:	f7ff fe5a 	bl	8002dfe <MFRC522_ToCard>
 800314a:	4603      	mov	r3, r0
 800314c:	777b      	strb	r3, [r7, #29]

	if((status == MI_OK) && (recvBits == 0x18)){
 800314e:	7f7b      	ldrb	r3, [r7, #29]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <MFRC522_SelectTag+0x76>
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b18      	cmp	r3, #24
 8003158:	d102      	bne.n	8003160 <MFRC522_SelectTag+0x76>
		size = buffer[0];
 800315a:	7b3b      	ldrb	r3, [r7, #12]
 800315c:	77bb      	strb	r3, [r7, #30]
 800315e:	e001      	b.n	8003164 <MFRC522_SelectTag+0x7a>
	}
	else{
		size = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	77bb      	strb	r3, [r7, #30]
	}

	return size;
 8003164:	7fbb      	ldrb	r3, [r7, #30]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t *Sectorkey, uint8_t *serNum){
 800316e:	b580      	push	{r7, lr}
 8003170:	b08c      	sub	sp, #48	@ 0x30
 8003172:	af02      	add	r7, sp, #8
 8003174:	60ba      	str	r2, [r7, #8]
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	460b      	mov	r3, r1
 800317e:	73bb      	strb	r3, [r7, #14]
	uint8_t status;
	uint recvBits;
	uint8_t i;
	uint8_t buff[12];

	buff[0] = authMode;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	753b      	strb	r3, [r7, #20]
	buff[1] = BlockAddr;
 8003184:	7bbb      	ldrb	r3, [r7, #14]
 8003186:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < 6; ++i){
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800318e:	e010      	b.n	80031b2 <MFRC522_Auth+0x44>
		buff[i + 2] = *(Sectorkey + i);
 8003190:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	441a      	add	r2, r3
 8003198:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800319c:	3302      	adds	r3, #2
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	3328      	adds	r3, #40	@ 0x28
 80031a2:	443b      	add	r3, r7
 80031a4:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 6; ++i){
 80031a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031ac:	3301      	adds	r3, #1
 80031ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80031b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d9ea      	bls.n	8003190 <MFRC522_Auth+0x22>
	}

	for(i = 0; i < 4; ++i){
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80031c0:	e010      	b.n	80031e4 <MFRC522_Auth+0x76>
		buff[i + 8] = *(serNum + i);
 80031c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	441a      	add	r2, r3
 80031ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031ce:	3308      	adds	r3, #8
 80031d0:	7812      	ldrb	r2, [r2, #0]
 80031d2:	3328      	adds	r3, #40	@ 0x28
 80031d4:	443b      	add	r3, r7
 80031d6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 4; ++i){
 80031da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031de:	3301      	adds	r3, #1
 80031e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80031e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d9ea      	bls.n	80031c2 <MFRC522_Auth+0x54>
	}

	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 80031ec:	f107 0214 	add.w	r2, r7, #20
 80031f0:	f107 0114 	add.w	r1, r7, #20
 80031f4:	f107 0320 	add.w	r3, r7, #32
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	220c      	movs	r2, #12
 80031fe:	200e      	movs	r0, #14
 8003200:	f7ff fdfd 	bl	8002dfe <MFRC522_ToCard>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if((status != MI_OK) || (!(Read_MFRC522(Status2Reg & 0x08)))){
 800320a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <MFRC522_Auth+0xb0>
 8003212:	2008      	movs	r0, #8
 8003214:	f7ff fd4f 	bl	8002cb6 <Read_MFRC522>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <MFRC522_Auth+0xb6>
		status = MI_ERR;
 800321e:	2302      	movs	r3, #2
 8003220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return status;
 8003224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003228:	4618      	mov	r0, r3
 800322a:	3728      	adds	r7, #40	@ 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t *recvData)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af02      	add	r7, sp, #8
 8003236:	4603      	mov	r3, r0
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint unLen;

    recvData[0] = PICC_READ;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2230      	movs	r2, #48	@ 0x30
 8003240:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	79fa      	ldrb	r2, [r7, #7]
 8003248:	701a      	strb	r2, [r3, #0]
    CalculateCRC(recvData,2, &recvData[2]);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	3302      	adds	r3, #2
 800324e:	461a      	mov	r2, r3
 8003250:	2102      	movs	r1, #2
 8003252:	6838      	ldr	r0, [r7, #0]
 8003254:	f7ff ff00 	bl	8003058 <CalculateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8003258:	f107 0308 	add.w	r3, r7, #8
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2204      	movs	r2, #4
 8003262:	6839      	ldr	r1, [r7, #0]
 8003264:	200c      	movs	r0, #12
 8003266:	f7ff fdca 	bl	8002dfe <MFRC522_ToCard>
 800326a:	4603      	mov	r3, r0
 800326c:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (unLen != 0x90))
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <MFRC522_Read+0x4a>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b90      	cmp	r3, #144	@ 0x90
 8003278:	d001      	beq.n	800327e <MFRC522_Read+0x4e>
    {
        status = MI_ERR;
 800327a:	2302      	movs	r3, #2
 800327c:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <getSerNum>:

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
}


uint8_t getSerNum(uint8_t *serNum){
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	MFRC522_Reset();
 8003290:	f7ff fd80 	bl	8002d94 <MFRC522_Reset>
	MFRC522_Init();
 8003294:	f7ff fd86 	bl	8002da4 <MFRC522_Init>
	HAL_Delay(10);
 8003298:	200a      	movs	r0, #10
 800329a:	f000 fc39 	bl	8003b10 <HAL_Delay>
	MFRC522_Request(PICC_REQIDL, serNum);
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	2026      	movs	r0, #38	@ 0x26
 80032a2:	f7ff fe75 	bl	8002f90 <MFRC522_Request>
	return MFRC522_Anticoll(serNum);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fe97 	bl	8002fda <MFRC522_Anticoll>
 80032ac:	4603      	mov	r3, r0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <readCard>:

uint8_t readCard(uint8_t blockNum, uint8_t *readData){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
	uint8_t *serNum;
	uint8_t KEY[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 80032c4:	4a12      	ldr	r2, [pc, #72]	@ (8003310 <readCard+0x58>)
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032ce:	6018      	str	r0, [r3, #0]
 80032d0:	3304      	adds	r3, #4
 80032d2:	8019      	strh	r1, [r3, #0]
	 uint8_t status = getSerNum(serNum);
 80032d4:	6978      	ldr	r0, [r7, #20]
 80032d6:	f7ff ffd7 	bl	8003288 <getSerNum>
 80032da:	4603      	mov	r3, r0
 80032dc:	74fb      	strb	r3, [r7, #19]
	 if(status == MI_OK){
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d110      	bne.n	8003306 <readCard+0x4e>
			MFRC522_SelectTag(serNum);
 80032e4:	6978      	ldr	r0, [r7, #20]
 80032e6:	f7ff ff00 	bl	80030ea <MFRC522_SelectTag>
			MFRC522_Auth(PICC_AUTHENT1A, blockNum, KEY, serNum);
 80032ea:	f107 020c 	add.w	r2, r7, #12
 80032ee:	79f9      	ldrb	r1, [r7, #7]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2060      	movs	r0, #96	@ 0x60
 80032f4:	f7ff ff3b 	bl	800316e <MFRC522_Auth>
			return MFRC522_Read(blockNum, readData);
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff97 	bl	8003230 <MFRC522_Read>
 8003302:	4603      	mov	r3, r0
 8003304:	e7ff      	b.n	8003306 <readCard+0x4e>
	 }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	0800fb34 	.word	0x0800fb34

08003314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331a:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <HAL_MspInit+0x44>)
 800331c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331e:	4a0e      	ldr	r2, [pc, #56]	@ (8003358 <HAL_MspInit+0x44>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6613      	str	r3, [r2, #96]	@ 0x60
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <HAL_MspInit+0x44>)
 8003328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <HAL_MspInit+0x44>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	4a08      	ldr	r2, [pc, #32]	@ (8003358 <HAL_MspInit+0x44>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6593      	str	r3, [r2, #88]	@ 0x58
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <HAL_MspInit+0x44>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000

0800335c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b0ae      	sub	sp, #184	@ 0xb8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003374:	f107 0310 	add.w	r3, r7, #16
 8003378:	2294      	movs	r2, #148	@ 0x94
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f00a fbf1 	bl	800db64 <memset>
  if(hi2c->Instance==I2C1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a21      	ldr	r2, [pc, #132]	@ (800340c <HAL_I2C_MspInit+0xb0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d13b      	bne.n	8003404 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800338c:	2340      	movs	r3, #64	@ 0x40
 800338e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003390:	2300      	movs	r3, #0
 8003392:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003394:	f107 0310 	add.w	r3, r7, #16
 8003398:	4618      	mov	r0, r3
 800339a:	f002 fe9f 	bl	80060dc <HAL_RCCEx_PeriphCLKConfig>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80033a4:	f7ff f9c0 	bl	8002728 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a8:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <HAL_I2C_MspInit+0xb4>)
 80033aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ac:	4a18      	ldr	r2, [pc, #96]	@ (8003410 <HAL_I2C_MspInit+0xb4>)
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b4:	4b16      	ldr	r3, [pc, #88]	@ (8003410 <HAL_I2C_MspInit+0xb4>)
 80033b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033c8:	2312      	movs	r3, #18
 80033ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d4:	2303      	movs	r3, #3
 80033d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033da:	2304      	movs	r3, #4
 80033dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033e4:	4619      	mov	r1, r3
 80033e6:	480b      	ldr	r0, [pc, #44]	@ (8003414 <HAL_I2C_MspInit+0xb8>)
 80033e8:	f000 fcc8 	bl	8003d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033ec:	4b08      	ldr	r3, [pc, #32]	@ (8003410 <HAL_I2C_MspInit+0xb4>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	4a07      	ldr	r2, [pc, #28]	@ (8003410 <HAL_I2C_MspInit+0xb4>)
 80033f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_I2C_MspInit+0xb4>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003404:	bf00      	nop
 8003406:	37b8      	adds	r7, #184	@ 0xb8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40005400 	.word	0x40005400
 8003410:	40021000 	.word	0x40021000
 8003414:	48000400 	.word	0x48000400

08003418 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b0b0      	sub	sp, #192	@ 0xc0
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003430:	f107 0318 	add.w	r3, r7, #24
 8003434:	2294      	movs	r2, #148	@ 0x94
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f00a fb93 	bl	800db64 <memset>
  if(huart->Instance==LPUART1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a44      	ldr	r2, [pc, #272]	@ (8003554 <HAL_UART_MspInit+0x13c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d13e      	bne.n	80034c6 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003448:	2320      	movs	r3, #32
 800344a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800344c:	2300      	movs	r3, #0
 800344e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003450:	f107 0318 	add.w	r3, r7, #24
 8003454:	4618      	mov	r0, r3
 8003456:	f002 fe41 	bl	80060dc <HAL_RCCEx_PeriphCLKConfig>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003460:	f7ff f962 	bl	8002728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003464:	4b3c      	ldr	r3, [pc, #240]	@ (8003558 <HAL_UART_MspInit+0x140>)
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	4a3b      	ldr	r2, [pc, #236]	@ (8003558 <HAL_UART_MspInit+0x140>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003470:	4b39      	ldr	r3, [pc, #228]	@ (8003558 <HAL_UART_MspInit+0x140>)
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800347c:	4b36      	ldr	r3, [pc, #216]	@ (8003558 <HAL_UART_MspInit+0x140>)
 800347e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003480:	4a35      	ldr	r2, [pc, #212]	@ (8003558 <HAL_UART_MspInit+0x140>)
 8003482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003488:	4b33      	ldr	r3, [pc, #204]	@ (8003558 <HAL_UART_MspInit+0x140>)
 800348a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8003494:	f001 ff3a 	bl	800530c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003498:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800349c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80034b2:	2308      	movs	r3, #8
 80034b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034b8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80034bc:	4619      	mov	r1, r3
 80034be:	4827      	ldr	r0, [pc, #156]	@ (800355c <HAL_UART_MspInit+0x144>)
 80034c0:	f000 fc5c 	bl	8003d7c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80034c4:	e042      	b.n	800354c <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a25      	ldr	r2, [pc, #148]	@ (8003560 <HAL_UART_MspInit+0x148>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d13d      	bne.n	800354c <HAL_UART_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034d0:	2301      	movs	r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034d4:	2300      	movs	r3, #0
 80034d6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034d8:	f107 0318 	add.w	r3, r7, #24
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fdfd 	bl	80060dc <HAL_RCCEx_PeriphCLKConfig>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80034e8:	f7ff f91e 	bl	8002728 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003558 <HAL_UART_MspInit+0x140>)
 80034ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f0:	4a19      	ldr	r2, [pc, #100]	@ (8003558 <HAL_UART_MspInit+0x140>)
 80034f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80034f8:	4b17      	ldr	r3, [pc, #92]	@ (8003558 <HAL_UART_MspInit+0x140>)
 80034fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <HAL_UART_MspInit+0x140>)
 8003506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003508:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <HAL_UART_MspInit+0x140>)
 800350a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800350e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003510:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_UART_MspInit+0x140>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800351c:	f001 fef6 	bl	800530c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003520:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800353a:	2307      	movs	r3, #7
 800353c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003540:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003544:	4619      	mov	r1, r3
 8003546:	4805      	ldr	r0, [pc, #20]	@ (800355c <HAL_UART_MspInit+0x144>)
 8003548:	f000 fc18 	bl	8003d7c <HAL_GPIO_Init>
}
 800354c:	bf00      	nop
 800354e:	37c0      	adds	r7, #192	@ 0xc0
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40008000 	.word	0x40008000
 8003558:	40021000 	.word	0x40021000
 800355c:	48001800 	.word	0x48001800
 8003560:	40013800 	.word	0x40013800

08003564 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08c      	sub	sp, #48	@ 0x30
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 031c 	add.w	r3, r7, #28
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a2e      	ldr	r2, [pc, #184]	@ (800363c <HAL_SPI_MspInit+0xd8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d129      	bne.n	80035da <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003586:	4b2e      	ldr	r3, [pc, #184]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 8003588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358a:	4a2d      	ldr	r2, [pc, #180]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 800358c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003590:	6613      	str	r3, [r2, #96]	@ 0x60
 8003592:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 8003594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003596:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	4b28      	ldr	r3, [pc, #160]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	4a27      	ldr	r2, [pc, #156]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035aa:	4b25      	ldr	r3, [pc, #148]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 80035ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035b6:	23f0      	movs	r3, #240	@ 0xf0
 80035b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ba:	2302      	movs	r3, #2
 80035bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c2:	2303      	movs	r3, #3
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035c6:	2305      	movs	r3, #5
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ca:	f107 031c 	add.w	r3, r7, #28
 80035ce:	4619      	mov	r1, r3
 80035d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035d4:	f000 fbd2 	bl	8003d7c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80035d8:	e02c      	b.n	8003634 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a19      	ldr	r2, [pc, #100]	@ (8003644 <HAL_SPI_MspInit+0xe0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d127      	bne.n	8003634 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035e4:	4b16      	ldr	r3, [pc, #88]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 80035ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f0:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 80035f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fc:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 80035fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003600:	4a0f      	ldr	r2, [pc, #60]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003608:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <HAL_SPI_MspInit+0xdc>)
 800360a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003614:	2338      	movs	r3, #56	@ 0x38
 8003616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003624:	2306      	movs	r3, #6
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003628:	f107 031c 	add.w	r3, r7, #28
 800362c:	4619      	mov	r1, r3
 800362e:	4806      	ldr	r0, [pc, #24]	@ (8003648 <HAL_SPI_MspInit+0xe4>)
 8003630:	f000 fba4 	bl	8003d7c <HAL_GPIO_Init>
}
 8003634:	bf00      	nop
 8003636:	3730      	adds	r7, #48	@ 0x30
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40013000 	.word	0x40013000
 8003640:	40021000 	.word	0x40021000
 8003644:	40003c00 	.word	0x40003c00
 8003648:	48000400 	.word	0x48000400

0800364c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003650:	bf00      	nop
 8003652:	e7fd      	b.n	8003650 <NMI_Handler+0x4>

08003654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <HardFault_Handler+0x4>

0800365c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <MemManage_Handler+0x4>

08003664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <BusFault_Handler+0x4>

0800366c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <UsageFault_Handler+0x4>

08003674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036a2:	f000 fa15 	bl	8003ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}

080036aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80036ae:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80036b2:	f000 fd0d 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80036b6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80036ba:	f000 fd09 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0
  return 1;
 80036c6:	2301      	movs	r3, #1
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <_kill>:

int _kill(int pid, int sig)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036dc:	f00a faa4 	bl	800dc28 <__errno>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2216      	movs	r2, #22
 80036e4:	601a      	str	r2, [r3, #0]
  return -1;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_exit>:

void _exit (int status)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036fa:	f04f 31ff 	mov.w	r1, #4294967295
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ffe7 	bl	80036d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <_exit+0x12>

08003708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e00a      	b.n	8003730 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800371a:	f3af 8000 	nop.w
 800371e:	4601      	mov	r1, r0
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	60ba      	str	r2, [r7, #8]
 8003726:	b2ca      	uxtb	r2, r1
 8003728:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	3301      	adds	r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	dbf0      	blt.n	800371a <_read+0x12>
  }

  return len;
 8003738:	687b      	ldr	r3, [r7, #4]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b086      	sub	sp, #24
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e009      	b.n	8003768 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	60ba      	str	r2, [r7, #8]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe ffd1 	bl	8002704 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3301      	adds	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	dbf1      	blt.n	8003754 <_write+0x12>
  }
  return len;
 8003770:	687b      	ldr	r3, [r7, #4]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <_close>:

int _close(int file)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037a2:	605a      	str	r2, [r3, #4]
  return 0;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <_isatty>:

int _isatty(int file)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037ec:	4a14      	ldr	r2, [pc, #80]	@ (8003840 <_sbrk+0x5c>)
 80037ee:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <_sbrk+0x60>)
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037f8:	4b13      	ldr	r3, [pc, #76]	@ (8003848 <_sbrk+0x64>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003800:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <_sbrk+0x64>)
 8003802:	4a12      	ldr	r2, [pc, #72]	@ (800384c <_sbrk+0x68>)
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003806:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <_sbrk+0x64>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d207      	bcs.n	8003824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003814:	f00a fa08 	bl	800dc28 <__errno>
 8003818:	4603      	mov	r3, r0
 800381a:	220c      	movs	r2, #12
 800381c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	e009      	b.n	8003838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003824:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <_sbrk+0x64>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <_sbrk+0x64>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	4a05      	ldr	r2, [pc, #20]	@ (8003848 <_sbrk+0x64>)
 8003834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200a0000 	.word	0x200a0000
 8003844:	00000400 	.word	0x00000400
 8003848:	200408bc 	.word	0x200408bc
 800384c:	20040a50 	.word	0x20040a50

08003850 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <SystemInit+0x20>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	4a05      	ldr	r2, [pc, #20]	@ (8003870 <SystemInit+0x20>)
 800385c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <convert_data>:
#include "temp_humid.h"
// Convert raw temperature and humidity values into physical quantities
void convert_data(uint16_t raw_temp, uint16_t raw_humidity, float *temperature, float *humidity) {
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60ba      	str	r2, [r7, #8]
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	4603      	mov	r3, r0
 8003880:	81fb      	strh	r3, [r7, #14]
 8003882:	460b      	mov	r3, r1
 8003884:	81bb      	strh	r3, [r7, #12]
    // Temperature conversion (in °C)
    *temperature = -49 + 315 * (float)raw_temp / ((1 << 16) - 1);
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	ee07 3a90 	vmov	s15, r3
 800388c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003890:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80038dc <convert_data+0x68>
 8003894:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003898:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80038e0 <convert_data+0x6c>
 800389c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038a0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80038e4 <convert_data+0x70>
 80038a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	edc3 7a00 	vstr	s15, [r3]

    // Humidity conversion (% RH)
    *humidity = 100 * (float)raw_humidity / ((1 << 16) - 1);
 80038ae:	89bb      	ldrh	r3, [r7, #12]
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b8:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80038e8 <convert_data+0x74>
 80038bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038c0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80038e0 <convert_data+0x6c>
 80038c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	edc3 7a00 	vstr	s15, [r3]
}
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	439d8000 	.word	0x439d8000
 80038e0:	477fff00 	.word	0x477fff00
 80038e4:	42440000 	.word	0x42440000
 80038e8:	42c80000 	.word	0x42c80000

080038ec <read_sensor_data>:

// Function to read sensor data (temperature and humidity) in Single Shot Mode
HAL_StatusTypeDef read_sensor_data(I2C_HandleTypeDef *hi2c, uint16_t command, uint16_t *temperature, uint16_t *humidity) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	@ 0x28
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	460b      	mov	r3, r1
 80038fa:	817b      	strh	r3, [r7, #10]

	HAL_StatusTypeDef ret;
	uint8_t data[6];  // Buffer to store 6 data bytes (temperature, humidity, CRC)

    // Send the measurement command (16-bit)
    uint8_t command_data[2] = {command >> 8, command & 0xFF};
 80038fc:	897b      	ldrh	r3, [r7, #10]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	b29b      	uxth	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	753b      	strb	r3, [r7, #20]
 8003906:	897b      	ldrh	r3, [r7, #10]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	757b      	strb	r3, [r7, #21]
    ret = HAL_I2C_Master_Transmit(hi2c, SENSOR_I2C_ADDRESS << 1, command_data, 2, HAL_MAX_DELAY);
 800390c:	f107 0214 	add.w	r2, r7, #20
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2302      	movs	r3, #2
 8003918:	2188      	movs	r1, #136	@ 0x88
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fc8c 	bl	8004238 <HAL_I2C_Master_Transmit>
 8003920:	4603      	mov	r3, r0
 8003922:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK){
 8003924:	7ffb      	ldrb	r3, [r7, #31]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d127      	bne.n	800397a <read_sensor_data+0x8e>
    	//printf( "ERROR Tx \r\n" );
    }

    else{
        // Wait for the measurement to complete
        HAL_Delay(100);  // Adjust delay based on measurement time for your command
 800392a:	2064      	movs	r0, #100	@ 0x64
 800392c:	f000 f8f0 	bl	8003b10 <HAL_Delay>
        // Start read transfer and get all 6 bytes
           ret = HAL_I2C_Master_Receive(hi2c, SENSOR_I2C_ADDRESS << 1, data, 6, HAL_MAX_DELAY);
 8003930:	f107 0218 	add.w	r2, r7, #24
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	2306      	movs	r3, #6
 800393c:	2188      	movs	r1, #136	@ 0x88
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fd92 	bl	8004468 <HAL_I2C_Master_Receive>
 8003944:	4603      	mov	r3, r0
 8003946:	77fb      	strb	r3, [r7, #31]

           if (ret != HAL_OK){
 8003948:	7ffb      	ldrb	r3, [r7, #31]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d115      	bne.n	800397a <read_sensor_data+0x8e>
        	   //printf("ERROR Rx \r\n");
           }

           else{
        	   // Extract temperature and humidity while skipping CRC bytes
			   *temperature = (data[0] << 8) | data[1];  // First 2 bytes are temperature
 800394e:	7e3b      	ldrb	r3, [r7, #24]
 8003950:	b21b      	sxth	r3, r3
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	b21a      	sxth	r2, r3
 8003956:	7e7b      	ldrb	r3, [r7, #25]
 8003958:	b21b      	sxth	r3, r3
 800395a:	4313      	orrs	r3, r2
 800395c:	b21b      	sxth	r3, r3
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	801a      	strh	r2, [r3, #0]
			   *humidity = (data[3] << 8) | data[4];     // Skip 1 CRC byte, use next 2 bytes for humidity
 8003964:	7efb      	ldrb	r3, [r7, #27]
 8003966:	b21b      	sxth	r3, r3
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	b21a      	sxth	r2, r3
 800396c:	7f3b      	ldrb	r3, [r7, #28]
 800396e:	b21b      	sxth	r3, r3
 8003970:	4313      	orrs	r3, r2
 8003972:	b21b      	sxth	r3, r3
 8003974:	b29a      	uxth	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	801a      	strh	r2, [r3, #0]
    }

    // Ignore CRC, no need to process it, just discard the next 2 bytes (CRC for temp and humidity)
    // No need to read additional CRC bytes if you don't need them

    return ret;  // Successful read without processing CRC
 800397a:	7ffb      	ldrb	r3, [r7, #31]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <temp_humid>:

//runs the temphumidity sensor and returns 1 if succeeds
uint8_t temp_humid(float *buffer, I2C_HandleTypeDef *hi2c1){
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
	uint16_t temperature_raw, humidity_raw;
	float temperature, humidity;


	if (read_sensor_data(hi2c1, 0x2400, &temperature_raw, &humidity_raw) == HAL_OK) {
 800398e:	f107 0314 	add.w	r3, r7, #20
 8003992:	f107 0216 	add.w	r2, r7, #22
 8003996:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	f7ff ffa6 	bl	80038ec <read_sensor_data>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d110      	bne.n	80039c8 <temp_humid+0x44>
	  // Convert the raw values into physical units
	  convert_data(temperature_raw, humidity_raw, &temperature, &humidity);
 80039a6:	8af8      	ldrh	r0, [r7, #22]
 80039a8:	8ab9      	ldrh	r1, [r7, #20]
 80039aa:	f107 030c 	add.w	r3, r7, #12
 80039ae:	f107 0210 	add.w	r2, r7, #16
 80039b2:	f7ff ff5f 	bl	8003874 <convert_data>

	  buffer[0] = temperature;
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	601a      	str	r2, [r3, #0]
	  buffer[1] = humidity;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

	  // Print out the results (or send them to a display)
//	  printf("Temperature: %.2f°F \r\n", temperature);
//	  printf("Humidity: %.2f%% RH \r\n", humidity);
	  return 1;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <temp_humid+0x46>
	} else {
	  // Handle read error
		return 0;
 80039c8:	2300      	movs	r3, #0
	}


}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80039d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039d8:	f7ff ff3a 	bl	8003850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039dc:	480c      	ldr	r0, [pc, #48]	@ (8003a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80039de:	490d      	ldr	r1, [pc, #52]	@ (8003a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a18 <LoopForever+0xe>)
  movs r3, #0
 80039e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039e4:	e002      	b.n	80039ec <LoopCopyDataInit>

080039e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ea:	3304      	adds	r3, #4

080039ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039f0:	d3f9      	bcc.n	80039e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039f2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80039f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003a20 <LoopForever+0x16>)
  movs r3, #0
 80039f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039f8:	e001      	b.n	80039fe <LoopFillZerobss>

080039fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039fc:	3204      	adds	r2, #4

080039fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a00:	d3fb      	bcc.n	80039fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a02:	f00a f917 	bl	800dc34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a06:	f7fe f893 	bl	8001b30 <main>

08003a0a <LoopForever>:

LoopForever:
    b LoopForever
 8003a0a:	e7fe      	b.n	8003a0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a0c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003a10:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8003a14:	20040494 	.word	0x20040494
  ldr r2, =_sidata
 8003a18:	08010434 	.word	0x08010434
  ldr r2, =_sbss
 8003a1c:	20040494 	.word	0x20040494
  ldr r4, =_ebss
 8003a20:	20040a50 	.word	0x20040a50

08003a24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a24:	e7fe      	b.n	8003a24 <ADC1_IRQHandler>

08003a26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a30:	2003      	movs	r0, #3
 8003a32:	f000 f961 	bl	8003cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a36:	2000      	movs	r0, #0
 8003a38:	f000 f80e 	bl	8003a58 <HAL_InitTick>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	71fb      	strb	r3, [r7, #7]
 8003a46:	e001      	b.n	8003a4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a48:	f7ff fc64 	bl	8003314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a64:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <HAL_InitTick+0x6c>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d023      	beq.n	8003ab4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a6c:	4b16      	ldr	r3, [pc, #88]	@ (8003ac8 <HAL_InitTick+0x70>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <HAL_InitTick+0x6c>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f96d 	bl	8003d62 <HAL_SYSTICK_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10f      	bne.n	8003aae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b0f      	cmp	r3, #15
 8003a92:	d809      	bhi.n	8003aa8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a94:	2200      	movs	r2, #0
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	f000 f937 	bl	8003d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <HAL_InitTick+0x74>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e007      	b.n	8003ab8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e004      	b.n	8003ab8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
 8003ab2:	e001      	b.n	8003ab8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2004000c 	.word	0x2004000c
 8003ac8:	20040004 	.word	0x20040004
 8003acc:	20040008 	.word	0x20040008

08003ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <HAL_IncTick+0x20>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <HAL_IncTick+0x24>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4413      	add	r3, r2
 8003ae0:	4a04      	ldr	r2, [pc, #16]	@ (8003af4 <HAL_IncTick+0x24>)
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	2004000c 	.word	0x2004000c
 8003af4:	200408c0 	.word	0x200408c0

08003af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return uwTick;
 8003afc:	4b03      	ldr	r3, [pc, #12]	@ (8003b0c <HAL_GetTick+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	200408c0 	.word	0x200408c0

08003b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7ff ffee 	bl	8003af8 <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d005      	beq.n	8003b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <HAL_Delay+0x44>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b36:	bf00      	nop
 8003b38:	f7ff ffde 	bl	8003af8 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d8f7      	bhi.n	8003b38 <HAL_Delay+0x28>
  {
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2004000c 	.word	0x2004000c

08003b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b68:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b74:	4013      	ands	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8a:	4a04      	ldr	r2, [pc, #16]	@ (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	60d3      	str	r3, [r2, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba4:	4b04      	ldr	r3, [pc, #16]	@ (8003bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 0307 	and.w	r3, r3, #7
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db0b      	blt.n	8003be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	4907      	ldr	r1, [pc, #28]	@ (8003bf4 <__NVIC_EnableIRQ+0x38>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2001      	movs	r0, #1
 8003bde:	fa00 f202 	lsl.w	r2, r0, r2
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db0a      	blt.n	8003c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	490c      	ldr	r1, [pc, #48]	@ (8003c44 <__NVIC_SetPriority+0x4c>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c20:	e00a      	b.n	8003c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4908      	ldr	r1, [pc, #32]	@ (8003c48 <__NVIC_SetPriority+0x50>)
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	440b      	add	r3, r1
 8003c36:	761a      	strb	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000e100 	.word	0xe000e100
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	@ 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f1c3 0307 	rsb	r3, r3, #7
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf28      	it	cs
 8003c6a:	2304      	movcs	r3, #4
 8003c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d902      	bls.n	8003c7c <NVIC_EncodePriority+0x30>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3b03      	subs	r3, #3
 8003c7a:	e000      	b.n	8003c7e <NVIC_EncodePriority+0x32>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	401a      	ands	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c94:	f04f 31ff 	mov.w	r1, #4294967295
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43d9      	mvns	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	4313      	orrs	r3, r2
         );
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	@ 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cc4:	d301      	bcc.n	8003cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cca:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <SysTick_Config+0x40>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	f7ff ff8e 	bl	8003bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cdc:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <SysTick_Config+0x40>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce2:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <SysTick_Config+0x40>)
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000e010 	.word	0xe000e010

08003cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff29 	bl	8003b58 <__NVIC_SetPriorityGrouping>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d20:	f7ff ff3e 	bl	8003ba0 <__NVIC_GetPriorityGrouping>
 8003d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff ff8e 	bl	8003c4c <NVIC_EncodePriority>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff5d 	bl	8003bf8 <__NVIC_SetPriority>
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff31 	bl	8003bbc <__NVIC_EnableIRQ>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffa2 	bl	8003cb4 <SysTick_Config>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d8a:	e166      	b.n	800405a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2101      	movs	r1, #1
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8158 	beq.w	8004054 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d005      	beq.n	8003dbc <HAL_GPIO_Init+0x40>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d130      	bne.n	8003e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003df2:	2201      	movs	r2, #1
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	f003 0201 	and.w	r2, r3, #1
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d017      	beq.n	8003e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	2203      	movs	r2, #3
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d123      	bne.n	8003eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	08da      	lsrs	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3208      	adds	r2, #8
 8003e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	220f      	movs	r2, #15
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	08da      	lsrs	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3208      	adds	r2, #8
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	2203      	movs	r2, #3
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0203 	and.w	r2, r3, #3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80b2 	beq.w	8004054 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef0:	4b61      	ldr	r3, [pc, #388]	@ (8004078 <HAL_GPIO_Init+0x2fc>)
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef4:	4a60      	ldr	r2, [pc, #384]	@ (8004078 <HAL_GPIO_Init+0x2fc>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6613      	str	r3, [r2, #96]	@ 0x60
 8003efc:	4b5e      	ldr	r3, [pc, #376]	@ (8004078 <HAL_GPIO_Init+0x2fc>)
 8003efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f08:	4a5c      	ldr	r2, [pc, #368]	@ (800407c <HAL_GPIO_Init+0x300>)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	3302      	adds	r3, #2
 8003f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	220f      	movs	r2, #15
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f32:	d02b      	beq.n	8003f8c <HAL_GPIO_Init+0x210>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a52      	ldr	r2, [pc, #328]	@ (8004080 <HAL_GPIO_Init+0x304>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d025      	beq.n	8003f88 <HAL_GPIO_Init+0x20c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a51      	ldr	r2, [pc, #324]	@ (8004084 <HAL_GPIO_Init+0x308>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d01f      	beq.n	8003f84 <HAL_GPIO_Init+0x208>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a50      	ldr	r2, [pc, #320]	@ (8004088 <HAL_GPIO_Init+0x30c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d019      	beq.n	8003f80 <HAL_GPIO_Init+0x204>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a4f      	ldr	r2, [pc, #316]	@ (800408c <HAL_GPIO_Init+0x310>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <HAL_GPIO_Init+0x200>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4e      	ldr	r2, [pc, #312]	@ (8004090 <HAL_GPIO_Init+0x314>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00d      	beq.n	8003f78 <HAL_GPIO_Init+0x1fc>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a4d      	ldr	r2, [pc, #308]	@ (8004094 <HAL_GPIO_Init+0x318>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d007      	beq.n	8003f74 <HAL_GPIO_Init+0x1f8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a4c      	ldr	r2, [pc, #304]	@ (8004098 <HAL_GPIO_Init+0x31c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_GPIO_Init+0x1f4>
 8003f6c:	2307      	movs	r3, #7
 8003f6e:	e00e      	b.n	8003f8e <HAL_GPIO_Init+0x212>
 8003f70:	2308      	movs	r3, #8
 8003f72:	e00c      	b.n	8003f8e <HAL_GPIO_Init+0x212>
 8003f74:	2306      	movs	r3, #6
 8003f76:	e00a      	b.n	8003f8e <HAL_GPIO_Init+0x212>
 8003f78:	2305      	movs	r3, #5
 8003f7a:	e008      	b.n	8003f8e <HAL_GPIO_Init+0x212>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e006      	b.n	8003f8e <HAL_GPIO_Init+0x212>
 8003f80:	2303      	movs	r3, #3
 8003f82:	e004      	b.n	8003f8e <HAL_GPIO_Init+0x212>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e002      	b.n	8003f8e <HAL_GPIO_Init+0x212>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_GPIO_Init+0x212>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	f002 0203 	and.w	r2, r2, #3
 8003f94:	0092      	lsls	r2, r2, #2
 8003f96:	4093      	lsls	r3, r2
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f9e:	4937      	ldr	r1, [pc, #220]	@ (800407c <HAL_GPIO_Init+0x300>)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fac:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <HAL_GPIO_Init+0x320>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fd0:	4a32      	ldr	r2, [pc, #200]	@ (800409c <HAL_GPIO_Init+0x320>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fd6:	4b31      	ldr	r3, [pc, #196]	@ (800409c <HAL_GPIO_Init+0x320>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ffa:	4a28      	ldr	r2, [pc, #160]	@ (800409c <HAL_GPIO_Init+0x320>)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004000:	4b26      	ldr	r3, [pc, #152]	@ (800409c <HAL_GPIO_Init+0x320>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	43db      	mvns	r3, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004024:	4a1d      	ldr	r2, [pc, #116]	@ (800409c <HAL_GPIO_Init+0x320>)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800402a:	4b1c      	ldr	r3, [pc, #112]	@ (800409c <HAL_GPIO_Init+0x320>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	43db      	mvns	r3, r3
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800404e:	4a13      	ldr	r2, [pc, #76]	@ (800409c <HAL_GPIO_Init+0x320>)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	3301      	adds	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	f47f ae91 	bne.w	8003d8c <HAL_GPIO_Init+0x10>
  }
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40021000 	.word	0x40021000
 800407c:	40010000 	.word	0x40010000
 8004080:	48000400 	.word	0x48000400
 8004084:	48000800 	.word	0x48000800
 8004088:	48000c00 	.word	0x48000c00
 800408c:	48001000 	.word	0x48001000
 8004090:	48001400 	.word	0x48001400
 8004094:	48001800 	.word	0x48001800
 8004098:	48001c00 	.word	0x48001c00
 800409c:	40010400 	.word	0x40010400

080040a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
 80040ac:	4613      	mov	r3, r2
 80040ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b0:	787b      	ldrb	r3, [r7, #1]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040bc:	e002      	b.n	80040c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040da:	4b08      	ldr	r3, [pc, #32]	@ (80040fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040e6:	4a05      	ldr	r2, [pc, #20]	@ (80040fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fb20 	bl	8002734 <HAL_GPIO_EXTI_Callback>
  }
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40010400 	.word	0x40010400

08004100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e08d      	b.n	800422e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff f918 	bl	800335c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	@ 0x24
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004150:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004160:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	e006      	b.n	8004188 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004186:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d108      	bne.n	80041a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	e007      	b.n	80041b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	461a      	mov	r2, r3
 8004244:	460b      	mov	r3, r1
 8004246:	817b      	strh	r3, [r7, #10]
 8004248:	4613      	mov	r3, r2
 800424a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b20      	cmp	r3, #32
 8004256:	f040 80fd 	bne.w	8004454 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_I2C_Master_Transmit+0x30>
 8004264:	2302      	movs	r3, #2
 8004266:	e0f6      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004270:	f7ff fc42 	bl	8003af8 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2319      	movs	r3, #25
 800427c:	2201      	movs	r2, #1
 800427e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fc64 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0e1      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2221      	movs	r2, #33	@ 0x21
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2210      	movs	r2, #16
 800429e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	893a      	ldrh	r2, [r7, #8]
 80042b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2bff      	cmp	r3, #255	@ 0xff
 80042c2:	d906      	bls.n	80042d2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	22ff      	movs	r2, #255	@ 0xff
 80042c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80042ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e007      	b.n	80042e2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80042dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d024      	beq.n	8004334 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	781a      	ldrb	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3301      	adds	r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	8979      	ldrh	r1, [r7, #10]
 8004326:	4b4e      	ldr	r3, [pc, #312]	@ (8004460 <HAL_I2C_Master_Transmit+0x228>)
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fe5f 	bl	8004ff0 <I2C_TransferConfig>
 8004332:	e066      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	b2da      	uxtb	r2, r3
 800433a:	8979      	ldrh	r1, [r7, #10]
 800433c:	4b48      	ldr	r3, [pc, #288]	@ (8004460 <HAL_I2C_Master_Transmit+0x228>)
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fe54 	bl	8004ff0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004348:	e05b      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	6a39      	ldr	r1, [r7, #32]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fc57 	bl	8004c02 <I2C_WaitOnTXISFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07b      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d034      	beq.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d130      	bne.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2180      	movs	r1, #128	@ 0x80
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fbd0 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e04d      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2bff      	cmp	r3, #255	@ 0xff
 80043c2:	d90e      	bls.n	80043e2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	22ff      	movs	r2, #255	@ 0xff
 80043c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	8979      	ldrh	r1, [r7, #10]
 80043d2:	2300      	movs	r3, #0
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fe08 	bl	8004ff0 <I2C_TransferConfig>
 80043e0:	e00f      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	8979      	ldrh	r1, [r7, #10]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fdf7 	bl	8004ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d19e      	bne.n	800434a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	6a39      	ldr	r1, [r7, #32]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fc3d 	bl	8004c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e01a      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2220      	movs	r2, #32
 8004426:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <HAL_I2C_Master_Transmit+0x22c>)
 8004434:	400b      	ands	r3, r1
 8004436:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	80002000 	.word	0x80002000
 8004464:	fe00e800 	.word	0xfe00e800

08004468 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	460b      	mov	r3, r1
 8004476:	817b      	strh	r3, [r7, #10]
 8004478:	4613      	mov	r3, r2
 800447a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b20      	cmp	r3, #32
 8004486:	f040 80db 	bne.w	8004640 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_I2C_Master_Receive+0x30>
 8004494:	2302      	movs	r3, #2
 8004496:	e0d4      	b.n	8004642 <HAL_I2C_Master_Receive+0x1da>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044a0:	f7ff fb2a 	bl	8003af8 <HAL_GetTick>
 80044a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2319      	movs	r3, #25
 80044ac:	2201      	movs	r2, #1
 80044ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fb4c 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e0bf      	b.n	8004642 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2222      	movs	r2, #34	@ 0x22
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2210      	movs	r2, #16
 80044ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	893a      	ldrh	r2, [r7, #8]
 80044e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2bff      	cmp	r3, #255	@ 0xff
 80044f2:	d90e      	bls.n	8004512 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	8979      	ldrh	r1, [r7, #10]
 8004502:	4b52      	ldr	r3, [pc, #328]	@ (800464c <HAL_I2C_Master_Receive+0x1e4>)
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fd70 	bl	8004ff0 <I2C_TransferConfig>
 8004510:	e06d      	b.n	80045ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004520:	b2da      	uxtb	r2, r3
 8004522:	8979      	ldrh	r1, [r7, #10]
 8004524:	4b49      	ldr	r3, [pc, #292]	@ (800464c <HAL_I2C_Master_Receive+0x1e4>)
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fd5f 	bl	8004ff0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004532:	e05c      	b.n	80045ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	6a39      	ldr	r1, [r7, #32]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fbed 	bl	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e07c      	b.n	8004642 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d034      	beq.n	80045ee <HAL_I2C_Master_Receive+0x186>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004588:	2b00      	cmp	r3, #0
 800458a:	d130      	bne.n	80045ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	2200      	movs	r2, #0
 8004594:	2180      	movs	r1, #128	@ 0x80
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fada 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e04d      	b.n	8004642 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2bff      	cmp	r3, #255	@ 0xff
 80045ae:	d90e      	bls.n	80045ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	22ff      	movs	r2, #255	@ 0xff
 80045b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	8979      	ldrh	r1, [r7, #10]
 80045be:	2300      	movs	r3, #0
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fd12 	bl	8004ff0 <I2C_TransferConfig>
 80045cc:	e00f      	b.n	80045ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	8979      	ldrh	r1, [r7, #10]
 80045e0:	2300      	movs	r3, #0
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fd01 	bl	8004ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d19d      	bne.n	8004534 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	6a39      	ldr	r1, [r7, #32]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fb47 	bl	8004c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e01a      	b.n	8004642 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2220      	movs	r2, #32
 8004612:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <HAL_I2C_Master_Receive+0x1e8>)
 8004620:	400b      	ands	r3, r1
 8004622:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	80002400 	.word	0x80002400
 8004650:	fe00e800 	.word	0xfe00e800

08004654 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	4603      	mov	r3, r0
 8004664:	817b      	strh	r3, [r7, #10]
 8004666:	460b      	mov	r3, r1
 8004668:	813b      	strh	r3, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b20      	cmp	r3, #32
 8004678:	f040 80fd 	bne.w	8004876 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_I2C_Mem_Read+0x34>
 8004682:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800468e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0f1      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_I2C_Mem_Read+0x4e>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0ea      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046aa:	f7ff fa25 	bl	8003af8 <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	2319      	movs	r3, #25
 80046b6:	2201      	movs	r2, #1
 80046b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 fa47 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0d5      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2222      	movs	r2, #34	@ 0x22
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2240      	movs	r2, #64	@ 0x40
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046f4:	88f8      	ldrh	r0, [r7, #6]
 80046f6:	893a      	ldrh	r2, [r7, #8]
 80046f8:	8979      	ldrh	r1, [r7, #10]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	4603      	mov	r3, r0
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f9ab 	bl	8004a60 <I2C_RequestMemoryRead>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0ad      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2bff      	cmp	r3, #255	@ 0xff
 8004724:	d90e      	bls.n	8004744 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004730:	b2da      	uxtb	r2, r3
 8004732:	8979      	ldrh	r1, [r7, #10]
 8004734:	4b52      	ldr	r3, [pc, #328]	@ (8004880 <HAL_I2C_Mem_Read+0x22c>)
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fc57 	bl	8004ff0 <I2C_TransferConfig>
 8004742:	e00f      	b.n	8004764 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004752:	b2da      	uxtb	r2, r3
 8004754:	8979      	ldrh	r1, [r7, #10]
 8004756:	4b4a      	ldr	r3, [pc, #296]	@ (8004880 <HAL_I2C_Mem_Read+0x22c>)
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fc46 	bl	8004ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476a:	2200      	movs	r2, #0
 800476c:	2104      	movs	r1, #4
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f9ee 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07c      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d034      	beq.n	8004824 <HAL_I2C_Mem_Read+0x1d0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d130      	bne.n	8004824 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	@ 0x80
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f9bf 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e04d      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2bff      	cmp	r3, #255	@ 0xff
 80047e4:	d90e      	bls.n	8004804 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	8979      	ldrh	r1, [r7, #10]
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fbf7 	bl	8004ff0 <I2C_TransferConfig>
 8004802:	e00f      	b.n	8004824 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004812:	b2da      	uxtb	r2, r3
 8004814:	8979      	ldrh	r1, [r7, #10]
 8004816:	2300      	movs	r3, #0
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fbe6 	bl	8004ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d19a      	bne.n	8004764 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fa2c 	bl	8004c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e01a      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2220      	movs	r2, #32
 8004848:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_I2C_Mem_Read+0x230>)
 8004856:	400b      	ands	r3, r1
 8004858:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	80002400 	.word	0x80002400
 8004884:	fe00e800 	.word	0xfe00e800

08004888 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	@ 0x28
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	460b      	mov	r3, r1
 8004896:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	f040 80d6 	bne.w	8004a56 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b8:	d101      	bne.n	80048be <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
 80048bc:	e0cc      	b.n	8004a58 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_I2C_IsDeviceReady+0x44>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e0c5      	b.n	8004a58 <HAL_I2C_IsDeviceReady+0x1d0>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2224      	movs	r2, #36	@ 0x24
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d107      	bne.n	80048fa <HAL_I2C_IsDeviceReady+0x72>
 80048ea:	897b      	ldrh	r3, [r7, #10]
 80048ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048f8:	e006      	b.n	8004908 <HAL_I2C_IsDeviceReady+0x80>
 80048fa:	897b      	ldrh	r3, [r7, #10]
 80048fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004904:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800490e:	f7ff f8f3 	bl	8003af8 <HAL_GetTick>
 8004912:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b10      	cmp	r3, #16
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004940:	e034      	b.n	80049ac <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d01a      	beq.n	8004980 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800494a:	f7ff f8d5 	bl	8003af8 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d302      	bcc.n	8004960 <HAL_I2C_IsDeviceReady+0xd8>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10f      	bne.n	8004980 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e06b      	b.n	8004a58 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b20      	cmp	r3, #32
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80049ac:	7ffb      	ldrb	r3, [r7, #31]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <HAL_I2C_IsDeviceReady+0x130>
 80049b2:	7fbb      	ldrb	r3, [r7, #30]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0c4      	beq.n	8004942 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d01a      	beq.n	80049fc <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2120      	movs	r1, #32
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f8bd 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e03b      	b.n	8004a58 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2220      	movs	r2, #32
 80049e6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e02d      	b.n	8004a58 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	2120      	movs	r1, #32
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f8a2 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e020      	b.n	8004a58 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2220      	movs	r2, #32
 8004a24:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	f63f af56 	bhi.w	80048e2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	817b      	strh	r3, [r7, #10]
 8004a72:	460b      	mov	r3, r1
 8004a74:	813b      	strh	r3, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	8979      	ldrh	r1, [r7, #10]
 8004a80:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <I2C_RequestMemoryRead+0xa4>)
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fab2 	bl	8004ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	69b9      	ldr	r1, [r7, #24]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f8b6 	bl	8004c02 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e02c      	b.n	8004afa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d105      	bne.n	8004ab2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa6:	893b      	ldrh	r3, [r7, #8]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ab0:	e015      	b.n	8004ade <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ab2:	893b      	ldrh	r3, [r7, #8]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	69b9      	ldr	r1, [r7, #24]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f89c 	bl	8004c02 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e012      	b.n	8004afa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad4:	893b      	ldrh	r3, [r7, #8]
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2140      	movs	r1, #64	@ 0x40
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f831 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	80002000 	.word	0x80002000

08004b08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d103      	bne.n	8004b26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d007      	beq.n	8004b44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	619a      	str	r2, [r3, #24]
  }
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b60:	e03b      	b.n	8004bda <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f962 	bl	8004e30 <I2C_IsErrorOccurred>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e041      	b.n	8004bfa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d02d      	beq.n	8004bda <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fe ffbb 	bl	8003af8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d122      	bne.n	8004bda <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d113      	bne.n	8004bda <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e00f      	b.n	8004bfa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699a      	ldr	r2, [r3, #24]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	bf0c      	ite	eq
 8004bea:	2301      	moveq	r3, #1
 8004bec:	2300      	movne	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d0b4      	beq.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c0e:	e033      	b.n	8004c78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f90b 	bl	8004e30 <I2C_IsErrorOccurred>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e031      	b.n	8004c88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d025      	beq.n	8004c78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2c:	f7fe ff64 	bl	8003af8 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d302      	bcc.n	8004c42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d11a      	bne.n	8004c78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d013      	beq.n	8004c78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e007      	b.n	8004c88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d1c4      	bne.n	8004c10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c9c:	e02f      	b.n	8004cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f8c4 	bl	8004e30 <I2C_IsErrorOccurred>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e02d      	b.n	8004d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb2:	f7fe ff21 	bl	8003af8 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d11a      	bne.n	8004cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d013      	beq.n	8004cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e007      	b.n	8004d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d1c8      	bne.n	8004c9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004d28:	e071      	b.n	8004e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f87e 	bl	8004e30 <I2C_IsErrorOccurred>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d13b      	bne.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d138      	bne.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d105      	bne.n	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d121      	bne.n	8004dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2210      	movs	r2, #16
 8004d80:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2204      	movs	r2, #4
 8004d86:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004d9c:	400b      	ands	r3, r1
 8004d9e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
 8004dbc:	e002      	b.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004dc4:	f7fe fe98 	bl	8003af8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d302      	bcc.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d119      	bne.n	8004e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d116      	bne.n	8004e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d00f      	beq.n	8004e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	f043 0220 	orr.w	r2, r3, #32
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d002      	beq.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d083      	beq.n	8004d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	fe00e800 	.word	0xfe00e800

08004e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	@ 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d068      	beq.n	8004f2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2210      	movs	r2, #16
 8004e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e64:	e049      	b.n	8004efa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d045      	beq.n	8004efa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fe fe43 	bl	8003af8 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_IsErrorOccurred+0x54>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d13a      	bne.n	8004efa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea6:	d121      	bne.n	8004eec <I2C_IsErrorOccurred+0xbc>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eae:	d01d      	beq.n	8004eec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d01a      	beq.n	8004eec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ec4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ec6:	f7fe fe17 	bl	8003af8 <HAL_GetTick>
 8004eca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ecc:	e00e      	b.n	8004eec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ece:	f7fe fe13 	bl	8003af8 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b19      	cmp	r3, #25
 8004eda:	d907      	bls.n	8004eec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	f043 0320 	orr.w	r3, r3, #32
 8004ee2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004eea:	e006      	b.n	8004efa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d1e9      	bne.n	8004ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d003      	beq.n	8004f10 <I2C_IsErrorOccurred+0xe0>
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0aa      	beq.n	8004e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	f043 0304 	orr.w	r3, r3, #4
 8004f26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f043 0308 	orr.w	r3, r3, #8
 8004f68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01c      	beq.n	8004fde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff fdaf 	bl	8004b08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8004fec <I2C_IsErrorOccurred+0x1bc>)
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3728      	adds	r7, #40	@ 0x28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	fe00e800 	.word	0xfe00e800

08004ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	4613      	mov	r3, r2
 8005000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005002:	897b      	ldrh	r3, [r7, #10]
 8005004:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005008:	7a7b      	ldrb	r3, [r7, #9]
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005010:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	4313      	orrs	r3, r2
 800501a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800501e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	0d5b      	lsrs	r3, r3, #21
 800502a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800502e:	4b08      	ldr	r3, [pc, #32]	@ (8005050 <I2C_TransferConfig+0x60>)
 8005030:	430b      	orrs	r3, r1
 8005032:	43db      	mvns	r3, r3
 8005034:	ea02 0103 	and.w	r1, r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	03ff63ff 	.word	0x03ff63ff

08005054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b20      	cmp	r3, #32
 8005068:	d138      	bne.n	80050dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005074:	2302      	movs	r3, #2
 8005076:	e032      	b.n	80050de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2224      	movs	r2, #36	@ 0x24
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6819      	ldr	r1, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d139      	bne.n	8005174 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800510a:	2302      	movs	r3, #2
 800510c:	e033      	b.n	8005176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2224      	movs	r2, #36	@ 0x24
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800513c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005188:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005194:	d102      	bne.n	800519c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800519a:	e00b      	b.n	80051b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800519c:	4b08      	ldr	r3, [pc, #32]	@ (80051c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800519e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051aa:	d102      	bne.n	80051b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80051ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051b0:	e000      	b.n	80051b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80051b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40007000 	.word	0x40007000

080051c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d141      	bne.n	8005256 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051de:	d131      	bne.n	8005244 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051e0:	4b47      	ldr	r3, [pc, #284]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e6:	4a46      	ldr	r2, [pc, #280]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051f0:	4b43      	ldr	r3, [pc, #268]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051f8:	4a41      	ldr	r2, [pc, #260]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005200:	4b40      	ldr	r3, [pc, #256]	@ (8005304 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2232      	movs	r2, #50	@ 0x32
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	4a3f      	ldr	r2, [pc, #252]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	0c9b      	lsrs	r3, r3, #18
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005216:	e002      	b.n	800521e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3b01      	subs	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800521e:	4b38      	ldr	r3, [pc, #224]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522a:	d102      	bne.n	8005232 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f2      	bne.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005232:	4b33      	ldr	r3, [pc, #204]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523e:	d158      	bne.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e057      	b.n	80052f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005244:	4b2e      	ldr	r3, [pc, #184]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800524a:	4a2d      	ldr	r2, [pc, #180]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005250:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005254:	e04d      	b.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800525c:	d141      	bne.n	80052e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800525e:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526a:	d131      	bne.n	80052d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800526c:	4b24      	ldr	r3, [pc, #144]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005272:	4a23      	ldr	r2, [pc, #140]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005278:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800527c:	4b20      	ldr	r3, [pc, #128]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005284:	4a1e      	ldr	r2, [pc, #120]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800528a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800528c:	4b1d      	ldr	r3, [pc, #116]	@ (8005304 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2232      	movs	r2, #50	@ 0x32
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	4a1c      	ldr	r2, [pc, #112]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	0c9b      	lsrs	r3, r3, #18
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052a2:	e002      	b.n	80052aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052aa:	4b15      	ldr	r3, [pc, #84]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052b6:	d102      	bne.n	80052be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f2      	bne.n	80052a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052be:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ca:	d112      	bne.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e011      	b.n	80052f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052e0:	e007      	b.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052e2:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052ea:	4a05      	ldr	r2, [pc, #20]	@ (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40007000 	.word	0x40007000
 8005304:	20040004 	.word	0x20040004
 8005308:	431bde83 	.word	0x431bde83

0800530c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4a04      	ldr	r2, [pc, #16]	@ (8005328 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005316:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800531a:	6053      	str	r3, [r2, #4]
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40007000 	.word	0x40007000

0800532c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f000 bc08 	b.w	8005b50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005340:	4b96      	ldr	r3, [pc, #600]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 030c 	and.w	r3, r3, #12
 8005348:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800534a:	4b94      	ldr	r3, [pc, #592]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80e4 	beq.w	800552a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_RCC_OscConfig+0x4c>
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b0c      	cmp	r3, #12
 800536c:	f040 808b 	bne.w	8005486 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b01      	cmp	r3, #1
 8005374:	f040 8087 	bne.w	8005486 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005378:	4b88      	ldr	r3, [pc, #544]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_OscConfig+0x64>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e3df      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1a      	ldr	r2, [r3, #32]
 8005394:	4b81      	ldr	r3, [pc, #516]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <HAL_RCC_OscConfig+0x7e>
 80053a0:	4b7e      	ldr	r3, [pc, #504]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053a8:	e005      	b.n	80053b6 <HAL_RCC_OscConfig+0x8a>
 80053aa:	4b7c      	ldr	r3, [pc, #496]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80053ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d223      	bcs.n	8005402 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fdcc 	bl	8005f5c <RCC_SetFlashLatencyFromMSIRange>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e3c0      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ce:	4b73      	ldr	r3, [pc, #460]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a72      	ldr	r2, [pc, #456]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80053d4:	f043 0308 	orr.w	r3, r3, #8
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b70      	ldr	r3, [pc, #448]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	496d      	ldr	r1, [pc, #436]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ec:	4b6b      	ldr	r3, [pc, #428]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	4968      	ldr	r1, [pc, #416]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	604b      	str	r3, [r1, #4]
 8005400:	e025      	b.n	800544e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005402:	4b66      	ldr	r3, [pc, #408]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a65      	ldr	r2, [pc, #404]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005408:	f043 0308 	orr.w	r3, r3, #8
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	4b63      	ldr	r3, [pc, #396]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	4960      	ldr	r1, [pc, #384]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005420:	4b5e      	ldr	r3, [pc, #376]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	495b      	ldr	r1, [pc, #364]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fd8c 	bl	8005f5c <RCC_SetFlashLatencyFromMSIRange>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e380      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800544e:	f000 fcc1 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8005452:	4602      	mov	r2, r0
 8005454:	4b51      	ldr	r3, [pc, #324]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	4950      	ldr	r1, [pc, #320]	@ (80055a0 <HAL_RCC_OscConfig+0x274>)
 8005460:	5ccb      	ldrb	r3, [r1, r3]
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	fa22 f303 	lsr.w	r3, r2, r3
 800546a:	4a4e      	ldr	r2, [pc, #312]	@ (80055a4 <HAL_RCC_OscConfig+0x278>)
 800546c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800546e:	4b4e      	ldr	r3, [pc, #312]	@ (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe faf0 	bl	8003a58 <HAL_InitTick>
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d052      	beq.n	8005528 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	e364      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d032      	beq.n	80054f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800548e:	4b43      	ldr	r3, [pc, #268]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a42      	ldr	r2, [pc, #264]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800549a:	f7fe fb2d 	bl	8003af8 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054a2:	f7fe fb29 	bl	8003af8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e34d      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054b4:	4b39      	ldr	r3, [pc, #228]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054c0:	4b36      	ldr	r3, [pc, #216]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a35      	ldr	r2, [pc, #212]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80054c6:	f043 0308 	orr.w	r3, r3, #8
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	4b33      	ldr	r3, [pc, #204]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	4930      	ldr	r1, [pc, #192]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054de:	4b2f      	ldr	r3, [pc, #188]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	492b      	ldr	r1, [pc, #172]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	604b      	str	r3, [r1, #4]
 80054f2:	e01a      	b.n	800552a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054f4:	4b29      	ldr	r3, [pc, #164]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a28      	ldr	r2, [pc, #160]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005500:	f7fe fafa 	bl	8003af8 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005508:	f7fe faf6 	bl	8003af8 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e31a      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800551a:	4b20      	ldr	r3, [pc, #128]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <HAL_RCC_OscConfig+0x1dc>
 8005526:	e000      	b.n	800552a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d073      	beq.n	800561e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b08      	cmp	r3, #8
 800553a:	d005      	beq.n	8005548 <HAL_RCC_OscConfig+0x21c>
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b0c      	cmp	r3, #12
 8005540:	d10e      	bne.n	8005560 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b03      	cmp	r3, #3
 8005546:	d10b      	bne.n	8005560 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005548:	4b14      	ldr	r3, [pc, #80]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d063      	beq.n	800561c <HAL_RCC_OscConfig+0x2f0>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d15f      	bne.n	800561c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e2f7      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005568:	d106      	bne.n	8005578 <HAL_RCC_OscConfig+0x24c>
 800556a:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a0b      	ldr	r2, [pc, #44]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e025      	b.n	80055c4 <HAL_RCC_OscConfig+0x298>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005580:	d114      	bne.n	80055ac <HAL_RCC_OscConfig+0x280>
 8005582:	4b06      	ldr	r3, [pc, #24]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a05      	ldr	r2, [pc, #20]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	4b03      	ldr	r3, [pc, #12]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a02      	ldr	r2, [pc, #8]	@ (800559c <HAL_RCC_OscConfig+0x270>)
 8005594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e013      	b.n	80055c4 <HAL_RCC_OscConfig+0x298>
 800559c:	40021000 	.word	0x40021000
 80055a0:	0801003c 	.word	0x0801003c
 80055a4:	20040004 	.word	0x20040004
 80055a8:	20040008 	.word	0x20040008
 80055ac:	4ba0      	ldr	r3, [pc, #640]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a9f      	ldr	r2, [pc, #636]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80055b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	4b9d      	ldr	r3, [pc, #628]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a9c      	ldr	r2, [pc, #624]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80055be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d013      	beq.n	80055f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fe fa94 	bl	8003af8 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d4:	f7fe fa90 	bl	8003af8 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b64      	cmp	r3, #100	@ 0x64
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e2b4      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055e6:	4b92      	ldr	r3, [pc, #584]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x2a8>
 80055f2:	e014      	b.n	800561e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fe fa80 	bl	8003af8 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055fc:	f7fe fa7c 	bl	8003af8 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b64      	cmp	r3, #100	@ 0x64
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e2a0      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800560e:	4b88      	ldr	r3, [pc, #544]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x2d0>
 800561a:	e000      	b.n	800561e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d060      	beq.n	80056ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d005      	beq.n	800563c <HAL_RCC_OscConfig+0x310>
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b0c      	cmp	r3, #12
 8005634:	d119      	bne.n	800566a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d116      	bne.n	800566a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800563c:	4b7c      	ldr	r3, [pc, #496]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_RCC_OscConfig+0x328>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e27d      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005654:	4b76      	ldr	r3, [pc, #472]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	061b      	lsls	r3, r3, #24
 8005662:	4973      	ldr	r1, [pc, #460]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005664:	4313      	orrs	r3, r2
 8005666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005668:	e040      	b.n	80056ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d023      	beq.n	80056ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005672:	4b6f      	ldr	r3, [pc, #444]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6e      	ldr	r2, [pc, #440]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567e:	f7fe fa3b 	bl	8003af8 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005686:	f7fe fa37 	bl	8003af8 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e25b      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005698:	4b65      	ldr	r3, [pc, #404]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a4:	4b62      	ldr	r3, [pc, #392]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	495f      	ldr	r1, [pc, #380]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
 80056b8:	e018      	b.n	80056ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a5c      	ldr	r2, [pc, #368]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80056c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c6:	f7fe fa17 	bl	8003af8 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ce:	f7fe fa13 	bl	8003af8 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e237      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056e0:	4b53      	ldr	r3, [pc, #332]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d03c      	beq.n	8005772 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01c      	beq.n	800573a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005700:	4b4b      	ldr	r3, [pc, #300]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005706:	4a4a      	ldr	r2, [pc, #296]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fe f9f2 	bl	8003af8 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005718:	f7fe f9ee 	bl	8003af8 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e212      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800572a:	4b41      	ldr	r3, [pc, #260]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 800572c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ef      	beq.n	8005718 <HAL_RCC_OscConfig+0x3ec>
 8005738:	e01b      	b.n	8005772 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800573a:	4b3d      	ldr	r3, [pc, #244]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 800573c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005740:	4a3b      	ldr	r2, [pc, #236]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574a:	f7fe f9d5 	bl	8003af8 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005752:	f7fe f9d1 	bl	8003af8 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e1f5      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005764:	4b32      	ldr	r3, [pc, #200]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ef      	bne.n	8005752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80a6 	beq.w	80058cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005780:	2300      	movs	r3, #0
 8005782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005784:	4b2a      	ldr	r3, [pc, #168]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10d      	bne.n	80057ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005790:	4b27      	ldr	r3, [pc, #156]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005794:	4a26      	ldr	r2, [pc, #152]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800579a:	6593      	str	r3, [r2, #88]	@ 0x58
 800579c:	4b24      	ldr	r3, [pc, #144]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 800579e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a8:	2301      	movs	r3, #1
 80057aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ac:	4b21      	ldr	r3, [pc, #132]	@ (8005834 <HAL_RCC_OscConfig+0x508>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d118      	bne.n	80057ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005834 <HAL_RCC_OscConfig+0x508>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005834 <HAL_RCC_OscConfig+0x508>)
 80057be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c4:	f7fe f998 	bl	8003af8 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057cc:	f7fe f994 	bl	8003af8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e1b8      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057de:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <HAL_RCC_OscConfig+0x508>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d108      	bne.n	8005804 <HAL_RCC_OscConfig+0x4d8>
 80057f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005802:	e029      	b.n	8005858 <HAL_RCC_OscConfig+0x52c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b05      	cmp	r3, #5
 800580a:	d115      	bne.n	8005838 <HAL_RCC_OscConfig+0x50c>
 800580c:	4b08      	ldr	r3, [pc, #32]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005812:	4a07      	ldr	r2, [pc, #28]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005814:	f043 0304 	orr.w	r3, r3, #4
 8005818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800581c:	4b04      	ldr	r3, [pc, #16]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005822:	4a03      	ldr	r2, [pc, #12]	@ (8005830 <HAL_RCC_OscConfig+0x504>)
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800582c:	e014      	b.n	8005858 <HAL_RCC_OscConfig+0x52c>
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000
 8005834:	40007000 	.word	0x40007000
 8005838:	4b9d      	ldr	r3, [pc, #628]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583e:	4a9c      	ldr	r2, [pc, #624]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005848:	4b99      	ldr	r3, [pc, #612]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584e:	4a98      	ldr	r2, [pc, #608]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d016      	beq.n	800588e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fe f94a 	bl	8003af8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005866:	e00a      	b.n	800587e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005868:	f7fe f946 	bl	8003af8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e168      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800587e:	4b8c      	ldr	r3, [pc, #560]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0ed      	beq.n	8005868 <HAL_RCC_OscConfig+0x53c>
 800588c:	e015      	b.n	80058ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588e:	f7fe f933 	bl	8003af8 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005894:	e00a      	b.n	80058ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fe f92f 	bl	8003af8 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e151      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058ac:	4b80      	ldr	r3, [pc, #512]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1ed      	bne.n	8005896 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ba:	7ffb      	ldrb	r3, [r7, #31]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d105      	bne.n	80058cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c0:	4b7b      	ldr	r3, [pc, #492]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 80058c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 80058c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d03c      	beq.n	8005952 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01c      	beq.n	800591a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058e0:	4b73      	ldr	r3, [pc, #460]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 80058e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058e6:	4a72      	ldr	r2, [pc, #456]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fe f902 	bl	8003af8 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058f8:	f7fe f8fe 	bl	8003af8 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e122      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800590a:	4b69      	ldr	r3, [pc, #420]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 800590c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0ef      	beq.n	80058f8 <HAL_RCC_OscConfig+0x5cc>
 8005918:	e01b      	b.n	8005952 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800591a:	4b65      	ldr	r3, [pc, #404]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 800591c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005920:	4a63      	ldr	r2, [pc, #396]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592a:	f7fe f8e5 	bl	8003af8 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005932:	f7fe f8e1 	bl	8003af8 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e105      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005944:	4b5a      	ldr	r3, [pc, #360]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1ef      	bne.n	8005932 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 80f9 	beq.w	8005b4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005960:	2b02      	cmp	r3, #2
 8005962:	f040 80cf 	bne.w	8005b04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005966:	4b52      	ldr	r3, [pc, #328]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f003 0203 	and.w	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	429a      	cmp	r2, r3
 8005978:	d12c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	3b01      	subs	r3, #1
 8005986:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d123      	bne.n	80059d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005996:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d11b      	bne.n	80059d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d113      	bne.n	80059d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	3b01      	subs	r3, #1
 80059ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d109      	bne.n	80059d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ca:	085b      	lsrs	r3, r3, #1
 80059cc:	3b01      	subs	r3, #1
 80059ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d071      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b0c      	cmp	r3, #12
 80059d8:	d068      	beq.n	8005aac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059da:	4b35      	ldr	r3, [pc, #212]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d105      	bne.n	80059f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80059e6:	4b32      	ldr	r3, [pc, #200]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0ac      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059f6:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 80059fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a02:	f7fe f879 	bl	8003af8 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0a:	f7fe f875 	bl	8003af8 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e099      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a1c:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a28:	4b21      	ldr	r3, [pc, #132]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	4b21      	ldr	r3, [pc, #132]	@ (8005ab4 <HAL_RCC_OscConfig+0x788>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a38:	3a01      	subs	r2, #1
 8005a3a:	0112      	lsls	r2, r2, #4
 8005a3c:	4311      	orrs	r1, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a42:	0212      	lsls	r2, r2, #8
 8005a44:	4311      	orrs	r1, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a4a:	0852      	lsrs	r2, r2, #1
 8005a4c:	3a01      	subs	r2, #1
 8005a4e:	0552      	lsls	r2, r2, #21
 8005a50:	4311      	orrs	r1, r2
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a56:	0852      	lsrs	r2, r2, #1
 8005a58:	3a01      	subs	r2, #1
 8005a5a:	0652      	lsls	r2, r2, #25
 8005a5c:	4311      	orrs	r1, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a62:	06d2      	lsls	r2, r2, #27
 8005a64:	430a      	orrs	r2, r1
 8005a66:	4912      	ldr	r1, [pc, #72]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a6c:	4b10      	ldr	r3, [pc, #64]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a0f      	ldr	r2, [pc, #60]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a78:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a84:	f7fe f838 	bl	8003af8 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a8c:	f7fe f834 	bl	8003af8 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e058      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a9e:	4b04      	ldr	r3, [pc, #16]	@ (8005ab0 <HAL_RCC_OscConfig+0x784>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005aaa:	e050      	b.n	8005b4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e04f      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ab8:	4b27      	ldr	r3, [pc, #156]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d144      	bne.n	8005b4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ac4:	4b24      	ldr	r3, [pc, #144]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a23      	ldr	r2, [pc, #140]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ad0:	4b21      	ldr	r3, [pc, #132]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a20      	ldr	r2, [pc, #128]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005adc:	f7fe f80c 	bl	8003af8 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae4:	f7fe f808 	bl	8003af8 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e02c      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af6:	4b18      	ldr	r3, [pc, #96]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x7b8>
 8005b02:	e024      	b.n	8005b4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b0c      	cmp	r3, #12
 8005b08:	d01f      	beq.n	8005b4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0a:	4b13      	ldr	r3, [pc, #76]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a12      	ldr	r2, [pc, #72]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b16:	f7fd ffef 	bl	8003af8 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1e:	f7fd ffeb 	bl	8003af8 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e00f      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b30:	4b09      	ldr	r3, [pc, #36]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f0      	bne.n	8005b1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b3c:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	4905      	ldr	r1, [pc, #20]	@ (8005b58 <HAL_RCC_OscConfig+0x82c>)
 8005b42:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <HAL_RCC_OscConfig+0x830>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	60cb      	str	r3, [r1, #12]
 8005b48:	e001      	b.n	8005b4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3720      	adds	r7, #32
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	feeefffc 	.word	0xfeeefffc

08005b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e11d      	b.n	8005db4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b78:	4b90      	ldr	r3, [pc, #576]	@ (8005dbc <HAL_RCC_ClockConfig+0x25c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d910      	bls.n	8005ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4b8d      	ldr	r3, [pc, #564]	@ (8005dbc <HAL_RCC_ClockConfig+0x25c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f023 020f 	bic.w	r2, r3, #15
 8005b8e:	498b      	ldr	r1, [pc, #556]	@ (8005dbc <HAL_RCC_ClockConfig+0x25c>)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b96:	4b89      	ldr	r3, [pc, #548]	@ (8005dbc <HAL_RCC_ClockConfig+0x25c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d001      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e105      	b.n	8005db4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d010      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	4b81      	ldr	r3, [pc, #516]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d908      	bls.n	8005bd6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	497b      	ldr	r1, [pc, #492]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d079      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d11e      	bne.n	8005c28 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bea:	4b75      	ldr	r3, [pc, #468]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e0dc      	b.n	8005db4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005bfa:	f000 fa09 	bl	8006010 <RCC_GetSysClockFreqFromPLLSource>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4a70      	ldr	r2, [pc, #448]	@ (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d946      	bls.n	8005c94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c06:	4b6e      	ldr	r3, [pc, #440]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d140      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c12:	4b6b      	ldr	r3, [pc, #428]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c1a:	4a69      	ldr	r2, [pc, #420]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c22:	2380      	movs	r3, #128	@ 0x80
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	e035      	b.n	8005c94 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c30:	4b63      	ldr	r3, [pc, #396]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d115      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0b9      	b.n	8005db4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d107      	bne.n	8005c58 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c48:	4b5d      	ldr	r3, [pc, #372]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d109      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0ad      	b.n	8005db4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c58:	4b59      	ldr	r3, [pc, #356]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0a5      	b.n	8005db4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005c68:	f000 f8b4 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	4a55      	ldr	r2, [pc, #340]	@ (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d90f      	bls.n	8005c94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c74:	4b52      	ldr	r3, [pc, #328]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c80:	4b4f      	ldr	r3, [pc, #316]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c88:	4a4d      	ldr	r2, [pc, #308]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c90:	2380      	movs	r3, #128	@ 0x80
 8005c92:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c94:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f023 0203 	bic.w	r2, r3, #3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4947      	ldr	r1, [pc, #284]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca6:	f7fd ff27 	bl	8003af8 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cac:	e00a      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cae:	f7fd ff23 	bl	8003af8 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e077      	b.n	8005db4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 020c 	and.w	r2, r3, #12
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d1eb      	bne.n	8005cae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b80      	cmp	r3, #128	@ 0x80
 8005cda:	d105      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cdc:	4b38      	ldr	r3, [pc, #224]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a37      	ldr	r2, [pc, #220]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ce6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d010      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	4b31      	ldr	r3, [pc, #196]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d208      	bcs.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d04:	4b2e      	ldr	r3, [pc, #184]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	492b      	ldr	r1, [pc, #172]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d16:	4b29      	ldr	r3, [pc, #164]	@ (8005dbc <HAL_RCC_ClockConfig+0x25c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d210      	bcs.n	8005d46 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d24:	4b25      	ldr	r3, [pc, #148]	@ (8005dbc <HAL_RCC_ClockConfig+0x25c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f023 020f 	bic.w	r2, r3, #15
 8005d2c:	4923      	ldr	r1, [pc, #140]	@ (8005dbc <HAL_RCC_ClockConfig+0x25c>)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d34:	4b21      	ldr	r3, [pc, #132]	@ (8005dbc <HAL_RCC_ClockConfig+0x25c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d001      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e036      	b.n	8005db4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d52:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	4918      	ldr	r1, [pc, #96]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d70:	4b13      	ldr	r3, [pc, #76]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4910      	ldr	r1, [pc, #64]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d84:	f000 f826 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	490c      	ldr	r1, [pc, #48]	@ (8005dc8 <HAL_RCC_ClockConfig+0x268>)
 8005d96:	5ccb      	ldrb	r3, [r1, r3]
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005da0:	4a0a      	ldr	r2, [pc, #40]	@ (8005dcc <HAL_RCC_ClockConfig+0x26c>)
 8005da2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005da4:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <HAL_RCC_ClockConfig+0x270>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fd fe55 	bl	8003a58 <HAL_InitTick>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40022000 	.word	0x40022000
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	04c4b400 	.word	0x04c4b400
 8005dc8:	0801003c 	.word	0x0801003c
 8005dcc:	20040004 	.word	0x20040004
 8005dd0:	20040008 	.word	0x20040008

08005dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b089      	sub	sp, #36	@ 0x24
 8005dd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de2:	4b3e      	ldr	r3, [pc, #248]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x108>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
 8005dea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dec:	4b3b      	ldr	r3, [pc, #236]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x108>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_GetSysClockFreq+0x34>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b0c      	cmp	r3, #12
 8005e00:	d121      	bne.n	8005e46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d11e      	bne.n	8005e46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e08:	4b34      	ldr	r3, [pc, #208]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d107      	bne.n	8005e24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e14:	4b31      	ldr	r3, [pc, #196]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e1a:	0a1b      	lsrs	r3, r3, #8
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	e005      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e24:	4b2d      	ldr	r3, [pc, #180]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e30:	4a2b      	ldr	r2, [pc, #172]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10d      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e44:	e00a      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d102      	bne.n	8005e52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	e004      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d101      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e58:	4b23      	ldr	r3, [pc, #140]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	d134      	bne.n	8005ecc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e62:	4b1e      	ldr	r3, [pc, #120]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d003      	beq.n	8005e7a <HAL_RCC_GetSysClockFreq+0xa6>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d003      	beq.n	8005e80 <HAL_RCC_GetSysClockFreq+0xac>
 8005e78:	e005      	b.n	8005e86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e7c:	617b      	str	r3, [r7, #20]
      break;
 8005e7e:	e005      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e80:	4b19      	ldr	r3, [pc, #100]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e82:	617b      	str	r3, [r7, #20]
      break;
 8005e84:	e002      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	617b      	str	r3, [r7, #20]
      break;
 8005e8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e8c:	4b13      	ldr	r3, [pc, #76]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	091b      	lsrs	r3, r3, #4
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	3301      	adds	r3, #1
 8005e98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e9a:	4b10      	ldr	r3, [pc, #64]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	fb03 f202 	mul.w	r2, r3, r2
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	0e5b      	lsrs	r3, r3, #25
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ecc:	69bb      	ldr	r3, [r7, #24]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3724      	adds	r7, #36	@ 0x24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	08010054 	.word	0x08010054
 8005ee4:	00f42400 	.word	0x00f42400
 8005ee8:	007a1200 	.word	0x007a1200

08005eec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	@ (8005f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20040004 	.word	0x20040004

08005f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f08:	f7ff fff0 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	4904      	ldr	r1, [pc, #16]	@ (8005f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f1a:	5ccb      	ldrb	r3, [r1, r3]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	0801004c 	.word	0x0801004c

08005f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f34:	f7ff ffda 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	0adb      	lsrs	r3, r3, #11
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	4904      	ldr	r1, [pc, #16]	@ (8005f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f46:	5ccb      	ldrb	r3, [r1, r3]
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40021000 	.word	0x40021000
 8005f58:	0801004c 	.word	0x0801004c

08005f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f64:	2300      	movs	r3, #0
 8005f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f68:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f74:	f7ff f906 	bl	8005184 <HAL_PWREx_GetVoltageRange>
 8005f78:	6178      	str	r0, [r7, #20]
 8005f7a:	e014      	b.n	8005fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f7c:	4b22      	ldr	r3, [pc, #136]	@ (8006008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f80:	4a21      	ldr	r2, [pc, #132]	@ (8006008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f88:	4b1f      	ldr	r3, [pc, #124]	@ (8006008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f94:	f7ff f8f6 	bl	8005184 <HAL_PWREx_GetVoltageRange>
 8005f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fa4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fac:	d10b      	bne.n	8005fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b80      	cmp	r3, #128	@ 0x80
 8005fb2:	d913      	bls.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8005fb8:	d902      	bls.n	8005fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fba:	2302      	movs	r3, #2
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	e00d      	b.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	e00a      	b.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fca:	d902      	bls.n	8005fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005fcc:	2302      	movs	r3, #2
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e004      	b.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b70      	cmp	r3, #112	@ 0x70
 8005fd6:	d101      	bne.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fd8:	2301      	movs	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f023 020f 	bic.w	r2, r3, #15
 8005fe4:	4909      	ldr	r1, [pc, #36]	@ (800600c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fec:	4b07      	ldr	r3, [pc, #28]	@ (800600c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d001      	beq.n	8005ffe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40021000 	.word	0x40021000
 800600c:	40022000 	.word	0x40022000

08006010 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006016:	4b2d      	ldr	r3, [pc, #180]	@ (80060cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b03      	cmp	r3, #3
 8006024:	d00b      	beq.n	800603e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b03      	cmp	r3, #3
 800602a:	d825      	bhi.n	8006078 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d008      	beq.n	8006044 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d11f      	bne.n	8006078 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006038:	4b25      	ldr	r3, [pc, #148]	@ (80060d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800603a:	613b      	str	r3, [r7, #16]
    break;
 800603c:	e01f      	b.n	800607e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800603e:	4b25      	ldr	r3, [pc, #148]	@ (80060d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006040:	613b      	str	r3, [r7, #16]
    break;
 8006042:	e01c      	b.n	800607e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006044:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d107      	bne.n	8006060 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006050:	4b1e      	ldr	r3, [pc, #120]	@ (80060cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e005      	b.n	800606c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006060:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800606c:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006074:	613b      	str	r3, [r7, #16]
    break;
 8006076:	e002      	b.n	800607e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
    break;
 800607c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800607e:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	3301      	adds	r3, #1
 800608a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800608c:	4b0f      	ldr	r3, [pc, #60]	@ (80060cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	0a1b      	lsrs	r3, r3, #8
 8006092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	fb03 f202 	mul.w	r2, r3, r2
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060a4:	4b09      	ldr	r3, [pc, #36]	@ (80060cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	0e5b      	lsrs	r3, r3, #25
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	3301      	adds	r3, #1
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80060be:	683b      	ldr	r3, [r7, #0]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	40021000 	.word	0x40021000
 80060d0:	00f42400 	.word	0x00f42400
 80060d4:	007a1200 	.word	0x007a1200
 80060d8:	08010054 	.word	0x08010054

080060dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060e4:	2300      	movs	r3, #0
 80060e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060e8:	2300      	movs	r3, #0
 80060ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d040      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060fc:	2b80      	cmp	r3, #128	@ 0x80
 80060fe:	d02a      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006100:	2b80      	cmp	r3, #128	@ 0x80
 8006102:	d825      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006104:	2b60      	cmp	r3, #96	@ 0x60
 8006106:	d026      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006108:	2b60      	cmp	r3, #96	@ 0x60
 800610a:	d821      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800610c:	2b40      	cmp	r3, #64	@ 0x40
 800610e:	d006      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006110:	2b40      	cmp	r3, #64	@ 0x40
 8006112:	d81d      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d009      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006118:	2b20      	cmp	r3, #32
 800611a:	d010      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800611c:	e018      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800611e:	4b89      	ldr	r3, [pc, #548]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	4a88      	ldr	r2, [pc, #544]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006128:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612a:	e015      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fb02 	bl	800673c <RCCEx_PLLSAI1_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800613c:	e00c      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3320      	adds	r3, #32
 8006142:	2100      	movs	r1, #0
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fbed 	bl	8006924 <RCCEx_PLLSAI2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800614e:	e003      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	74fb      	strb	r3, [r7, #19]
      break;
 8006154:	e000      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10b      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800615e:	4b79      	ldr	r3, [pc, #484]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006160:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006164:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800616c:	4975      	ldr	r1, [pc, #468]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006174:	e001      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006176:	7cfb      	ldrb	r3, [r7, #19]
 8006178:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d047      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800618e:	d030      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006194:	d82a      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800619a:	d02a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800619c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061a0:	d824      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a6:	d008      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80061a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ac:	d81e      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b6:	d010      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80061b8:	e018      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061ba:	4b62      	ldr	r3, [pc, #392]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	4a61      	ldr	r2, [pc, #388]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061c6:	e015      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	2100      	movs	r1, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fab4 	bl	800673c <RCCEx_PLLSAI1_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061d8:	e00c      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3320      	adds	r3, #32
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fb9f 	bl	8006924 <RCCEx_PLLSAI2_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061ea:	e003      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	74fb      	strb	r3, [r7, #19]
      break;
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80061f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061fa:	4b52      	ldr	r3, [pc, #328]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006208:	494e      	ldr	r1, [pc, #312]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006210:	e001      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	7cfb      	ldrb	r3, [r7, #19]
 8006214:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 809f 	beq.w	8006362 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006224:	2300      	movs	r3, #0
 8006226:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006228:	4b46      	ldr	r3, [pc, #280]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800622a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006238:	2300      	movs	r3, #0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00d      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800623e:	4b41      	ldr	r3, [pc, #260]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006242:	4a40      	ldr	r2, [pc, #256]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006248:	6593      	str	r3, [r2, #88]	@ 0x58
 800624a:	4b3e      	ldr	r3, [pc, #248]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800624c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006252:	60bb      	str	r3, [r7, #8]
 8006254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006256:	2301      	movs	r3, #1
 8006258:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800625a:	4b3b      	ldr	r3, [pc, #236]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a3a      	ldr	r2, [pc, #232]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006266:	f7fd fc47 	bl	8003af8 <HAL_GetTick>
 800626a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800626c:	e009      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626e:	f7fd fc43 	bl	8003af8 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d902      	bls.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	74fb      	strb	r3, [r7, #19]
        break;
 8006280:	e005      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006282:	4b31      	ldr	r3, [pc, #196]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0ef      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800628e:	7cfb      	ldrb	r3, [r7, #19]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d15b      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006294:	4b2b      	ldr	r3, [pc, #172]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800629e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01f      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d019      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062b2:	4b24      	ldr	r3, [pc, #144]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062be:	4b21      	ldr	r3, [pc, #132]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062de:	4a19      	ldr	r2, [pc, #100]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d016      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fd fc02 	bl	8003af8 <HAL_GetTick>
 80062f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f6:	e00b      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f8:	f7fd fbfe 	bl	8003af8 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006306:	4293      	cmp	r3, r2
 8006308:	d902      	bls.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	74fb      	strb	r3, [r7, #19]
            break;
 800630e:	e006      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006310:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0ec      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800631e:	7cfb      	ldrb	r3, [r7, #19]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10c      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006324:	4b07      	ldr	r3, [pc, #28]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006334:	4903      	ldr	r1, [pc, #12]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800633c:	e008      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	74bb      	strb	r3, [r7, #18]
 8006342:	e005      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006344:	40021000 	.word	0x40021000
 8006348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634c:	7cfb      	ldrb	r3, [r7, #19]
 800634e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006350:	7c7b      	ldrb	r3, [r7, #17]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d105      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006356:	4ba0      	ldr	r3, [pc, #640]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	4a9f      	ldr	r2, [pc, #636]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800635c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006360:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800636e:	4b9a      	ldr	r3, [pc, #616]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006374:	f023 0203 	bic.w	r2, r3, #3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637c:	4996      	ldr	r1, [pc, #600]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006390:	4b91      	ldr	r3, [pc, #580]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	f023 020c 	bic.w	r2, r3, #12
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	498e      	ldr	r1, [pc, #568]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063b2:	4b89      	ldr	r3, [pc, #548]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c0:	4985      	ldr	r1, [pc, #532]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063d4:	4b80      	ldr	r3, [pc, #512]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063e2:	497d      	ldr	r1, [pc, #500]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063f6:	4b78      	ldr	r3, [pc, #480]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006404:	4974      	ldr	r1, [pc, #464]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006418:	4b6f      	ldr	r3, [pc, #444]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006426:	496c      	ldr	r1, [pc, #432]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800643a:	4b67      	ldr	r3, [pc, #412]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006440:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006448:	4963      	ldr	r1, [pc, #396]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800645c:	4b5e      	ldr	r3, [pc, #376]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006462:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800646a:	495b      	ldr	r1, [pc, #364]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800647e:	4b56      	ldr	r3, [pc, #344]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648c:	4952      	ldr	r1, [pc, #328]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064a0:	4b4d      	ldr	r3, [pc, #308]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ae:	494a      	ldr	r1, [pc, #296]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064c2:	4b45      	ldr	r3, [pc, #276]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d0:	4941      	ldr	r1, [pc, #260]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064e4:	4b3c      	ldr	r3, [pc, #240]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064ea:	f023 0203 	bic.w	r2, r3, #3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f2:	4939      	ldr	r1, [pc, #228]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d028      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006506:	4b34      	ldr	r3, [pc, #208]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006514:	4930      	ldr	r1, [pc, #192]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006524:	d106      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006526:	4b2c      	ldr	r3, [pc, #176]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	4a2b      	ldr	r2, [pc, #172]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800652c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006530:	60d3      	str	r3, [r2, #12]
 8006532:	e011      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006538:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800653c:	d10c      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3304      	adds	r3, #4
 8006542:	2101      	movs	r1, #1
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f8f9 	bl	800673c <RCCEx_PLLSAI1_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800654e:	7cfb      	ldrb	r3, [r7, #19]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006554:	7cfb      	ldrb	r3, [r7, #19]
 8006556:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d04d      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006568:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800656c:	d108      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800656e:	4b1a      	ldr	r3, [pc, #104]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006570:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006574:	4a18      	ldr	r2, [pc, #96]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800657a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800657e:	e012      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006580:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006586:	4a14      	ldr	r2, [pc, #80]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006588:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800658c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006590:	4b11      	ldr	r3, [pc, #68]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006596:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800659e:	490e      	ldr	r1, [pc, #56]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ae:	d106      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065b0:	4b09      	ldr	r3, [pc, #36]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4a08      	ldr	r2, [pc, #32]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ba:	60d3      	str	r3, [r2, #12]
 80065bc:	e020      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c6:	d109      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065c8:	4b03      	ldr	r3, [pc, #12]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4a02      	ldr	r2, [pc, #8]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d2:	60d3      	str	r3, [r2, #12]
 80065d4:	e014      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80065d6:	bf00      	nop
 80065d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065e4:	d10c      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3304      	adds	r3, #4
 80065ea:	2101      	movs	r1, #1
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 f8a5 	bl	800673c <RCCEx_PLLSAI1_Config>
 80065f2:	4603      	mov	r3, r0
 80065f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065f6:	7cfb      	ldrb	r3, [r7, #19]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d028      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800660c:	4b4a      	ldr	r3, [pc, #296]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006612:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800661a:	4947      	ldr	r1, [pc, #284]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800662a:	d106      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800662c:	4b42      	ldr	r3, [pc, #264]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4a41      	ldr	r2, [pc, #260]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006636:	60d3      	str	r3, [r2, #12]
 8006638:	e011      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800663e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006642:	d10c      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	2101      	movs	r1, #1
 800664a:	4618      	mov	r0, r3
 800664c:	f000 f876 	bl	800673c <RCCEx_PLLSAI1_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006654:	7cfb      	ldrb	r3, [r7, #19]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800665a:	7cfb      	ldrb	r3, [r7, #19]
 800665c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01e      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800666a:	4b33      	ldr	r3, [pc, #204]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006670:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800667a:	492f      	ldr	r1, [pc, #188]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800668c:	d10c      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3304      	adds	r3, #4
 8006692:	2102      	movs	r1, #2
 8006694:	4618      	mov	r0, r3
 8006696:	f000 f851 	bl	800673c <RCCEx_PLLSAI1_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800669e:	7cfb      	ldrb	r3, [r7, #19]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80066a4:	7cfb      	ldrb	r3, [r7, #19]
 80066a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066b4:	4b20      	ldr	r3, [pc, #128]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066ba:	f023 0204 	bic.w	r2, r3, #4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066c4:	491c      	ldr	r1, [pc, #112]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80066d8:	4b17      	ldr	r3, [pc, #92]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066de:	f023 0218 	bic.w	r2, r3, #24
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e8:	4913      	ldr	r1, [pc, #76]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d017      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80066fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006702:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800670c:	490a      	ldr	r1, [pc, #40]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800671a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800671e:	d105      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006720:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4a04      	ldr	r2, [pc, #16]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800672a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800672c:	7cbb      	ldrb	r3, [r7, #18]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000

0800673c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800674a:	4b72      	ldr	r3, [pc, #456]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00e      	beq.n	8006774 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006756:	4b6f      	ldr	r3, [pc, #444]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0203 	and.w	r2, r3, #3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d103      	bne.n	800676e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
       ||
 800676a:	2b00      	cmp	r3, #0
 800676c:	d142      	bne.n	80067f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	73fb      	strb	r3, [r7, #15]
 8006772:	e03f      	b.n	80067f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b03      	cmp	r3, #3
 800677a:	d018      	beq.n	80067ae <RCCEx_PLLSAI1_Config+0x72>
 800677c:	2b03      	cmp	r3, #3
 800677e:	d825      	bhi.n	80067cc <RCCEx_PLLSAI1_Config+0x90>
 8006780:	2b01      	cmp	r3, #1
 8006782:	d002      	beq.n	800678a <RCCEx_PLLSAI1_Config+0x4e>
 8006784:	2b02      	cmp	r3, #2
 8006786:	d009      	beq.n	800679c <RCCEx_PLLSAI1_Config+0x60>
 8006788:	e020      	b.n	80067cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800678a:	4b62      	ldr	r3, [pc, #392]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d11d      	bne.n	80067d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800679a:	e01a      	b.n	80067d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800679c:	4b5d      	ldr	r3, [pc, #372]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d116      	bne.n	80067d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067ac:	e013      	b.n	80067d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067ae:	4b59      	ldr	r3, [pc, #356]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067ba:	4b56      	ldr	r3, [pc, #344]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067ca:	e006      	b.n	80067da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	73fb      	strb	r3, [r7, #15]
      break;
 80067d0:	e004      	b.n	80067dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80067da:	bf00      	nop
    }

    if(status == HAL_OK)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d108      	bne.n	80067f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80067e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f023 0203 	bic.w	r2, r3, #3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4949      	ldr	r1, [pc, #292]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f040 8086 	bne.w	8006908 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80067fc:	4b45      	ldr	r3, [pc, #276]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a44      	ldr	r2, [pc, #272]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006802:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006808:	f7fd f976 	bl	8003af8 <HAL_GetTick>
 800680c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800680e:	e009      	b.n	8006824 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006810:	f7fd f972 	bl	8003af8 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d902      	bls.n	8006824 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	73fb      	strb	r3, [r7, #15]
        break;
 8006822:	e005      	b.n	8006830 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006824:	4b3b      	ldr	r3, [pc, #236]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1ef      	bne.n	8006810 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d168      	bne.n	8006908 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d113      	bne.n	8006864 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800683c:	4b35      	ldr	r3, [pc, #212]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	4b35      	ldr	r3, [pc, #212]	@ (8006918 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006842:	4013      	ands	r3, r2
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6892      	ldr	r2, [r2, #8]
 8006848:	0211      	lsls	r1, r2, #8
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	68d2      	ldr	r2, [r2, #12]
 800684e:	06d2      	lsls	r2, r2, #27
 8006850:	4311      	orrs	r1, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6852      	ldr	r2, [r2, #4]
 8006856:	3a01      	subs	r2, #1
 8006858:	0112      	lsls	r2, r2, #4
 800685a:	430a      	orrs	r2, r1
 800685c:	492d      	ldr	r1, [pc, #180]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800685e:	4313      	orrs	r3, r2
 8006860:	610b      	str	r3, [r1, #16]
 8006862:	e02d      	b.n	80068c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d115      	bne.n	8006896 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800686a:	4b2a      	ldr	r3, [pc, #168]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	4b2b      	ldr	r3, [pc, #172]	@ (800691c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006870:	4013      	ands	r3, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6892      	ldr	r2, [r2, #8]
 8006876:	0211      	lsls	r1, r2, #8
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6912      	ldr	r2, [r2, #16]
 800687c:	0852      	lsrs	r2, r2, #1
 800687e:	3a01      	subs	r2, #1
 8006880:	0552      	lsls	r2, r2, #21
 8006882:	4311      	orrs	r1, r2
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6852      	ldr	r2, [r2, #4]
 8006888:	3a01      	subs	r2, #1
 800688a:	0112      	lsls	r2, r2, #4
 800688c:	430a      	orrs	r2, r1
 800688e:	4921      	ldr	r1, [pc, #132]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006890:	4313      	orrs	r3, r2
 8006892:	610b      	str	r3, [r1, #16]
 8006894:	e014      	b.n	80068c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006896:	4b1f      	ldr	r3, [pc, #124]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	4b21      	ldr	r3, [pc, #132]	@ (8006920 <RCCEx_PLLSAI1_Config+0x1e4>)
 800689c:	4013      	ands	r3, r2
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6892      	ldr	r2, [r2, #8]
 80068a2:	0211      	lsls	r1, r2, #8
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6952      	ldr	r2, [r2, #20]
 80068a8:	0852      	lsrs	r2, r2, #1
 80068aa:	3a01      	subs	r2, #1
 80068ac:	0652      	lsls	r2, r2, #25
 80068ae:	4311      	orrs	r1, r2
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6852      	ldr	r2, [r2, #4]
 80068b4:	3a01      	subs	r2, #1
 80068b6:	0112      	lsls	r2, r2, #4
 80068b8:	430a      	orrs	r2, r1
 80068ba:	4916      	ldr	r1, [pc, #88]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068c0:	4b14      	ldr	r3, [pc, #80]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a13      	ldr	r2, [pc, #76]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068cc:	f7fd f914 	bl	8003af8 <HAL_GetTick>
 80068d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068d2:	e009      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068d4:	f7fd f910 	bl	8003af8 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d902      	bls.n	80068e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	73fb      	strb	r3, [r7, #15]
          break;
 80068e6:	e005      	b.n	80068f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0ef      	beq.n	80068d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80068fa:	4b06      	ldr	r3, [pc, #24]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	4904      	ldr	r1, [pc, #16]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006904:	4313      	orrs	r3, r2
 8006906:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40021000 	.word	0x40021000
 8006918:	07ff800f 	.word	0x07ff800f
 800691c:	ff9f800f 	.word	0xff9f800f
 8006920:	f9ff800f 	.word	0xf9ff800f

08006924 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006932:	4b72      	ldr	r3, [pc, #456]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00e      	beq.n	800695c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800693e:	4b6f      	ldr	r3, [pc, #444]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0203 	and.w	r2, r3, #3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d103      	bne.n	8006956 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
       ||
 8006952:	2b00      	cmp	r3, #0
 8006954:	d142      	bne.n	80069dc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	73fb      	strb	r3, [r7, #15]
 800695a:	e03f      	b.n	80069dc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b03      	cmp	r3, #3
 8006962:	d018      	beq.n	8006996 <RCCEx_PLLSAI2_Config+0x72>
 8006964:	2b03      	cmp	r3, #3
 8006966:	d825      	bhi.n	80069b4 <RCCEx_PLLSAI2_Config+0x90>
 8006968:	2b01      	cmp	r3, #1
 800696a:	d002      	beq.n	8006972 <RCCEx_PLLSAI2_Config+0x4e>
 800696c:	2b02      	cmp	r3, #2
 800696e:	d009      	beq.n	8006984 <RCCEx_PLLSAI2_Config+0x60>
 8006970:	e020      	b.n	80069b4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006972:	4b62      	ldr	r3, [pc, #392]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d11d      	bne.n	80069ba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006982:	e01a      	b.n	80069ba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006984:	4b5d      	ldr	r3, [pc, #372]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800698c:	2b00      	cmp	r3, #0
 800698e:	d116      	bne.n	80069be <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006994:	e013      	b.n	80069be <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006996:	4b59      	ldr	r3, [pc, #356]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10f      	bne.n	80069c2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069a2:	4b56      	ldr	r3, [pc, #344]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069b2:	e006      	b.n	80069c2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
      break;
 80069b8:	e004      	b.n	80069c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80069c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d108      	bne.n	80069dc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80069ca:	4b4c      	ldr	r3, [pc, #304]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f023 0203 	bic.w	r2, r3, #3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4949      	ldr	r1, [pc, #292]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f040 8086 	bne.w	8006af0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80069e4:	4b45      	ldr	r3, [pc, #276]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a44      	ldr	r2, [pc, #272]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069f0:	f7fd f882 	bl	8003af8 <HAL_GetTick>
 80069f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80069f6:	e009      	b.n	8006a0c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069f8:	f7fd f87e 	bl	8003af8 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d902      	bls.n	8006a0c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	73fb      	strb	r3, [r7, #15]
        break;
 8006a0a:	e005      	b.n	8006a18 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1ef      	bne.n	80069f8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d168      	bne.n	8006af0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d113      	bne.n	8006a4c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a24:	4b35      	ldr	r3, [pc, #212]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a26:	695a      	ldr	r2, [r3, #20]
 8006a28:	4b35      	ldr	r3, [pc, #212]	@ (8006b00 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6892      	ldr	r2, [r2, #8]
 8006a30:	0211      	lsls	r1, r2, #8
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	68d2      	ldr	r2, [r2, #12]
 8006a36:	06d2      	lsls	r2, r2, #27
 8006a38:	4311      	orrs	r1, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6852      	ldr	r2, [r2, #4]
 8006a3e:	3a01      	subs	r2, #1
 8006a40:	0112      	lsls	r2, r2, #4
 8006a42:	430a      	orrs	r2, r1
 8006a44:	492d      	ldr	r1, [pc, #180]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	614b      	str	r3, [r1, #20]
 8006a4a:	e02d      	b.n	8006aa8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d115      	bne.n	8006a7e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a52:	4b2a      	ldr	r3, [pc, #168]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	4b2b      	ldr	r3, [pc, #172]	@ (8006b04 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6892      	ldr	r2, [r2, #8]
 8006a5e:	0211      	lsls	r1, r2, #8
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6912      	ldr	r2, [r2, #16]
 8006a64:	0852      	lsrs	r2, r2, #1
 8006a66:	3a01      	subs	r2, #1
 8006a68:	0552      	lsls	r2, r2, #21
 8006a6a:	4311      	orrs	r1, r2
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6852      	ldr	r2, [r2, #4]
 8006a70:	3a01      	subs	r2, #1
 8006a72:	0112      	lsls	r2, r2, #4
 8006a74:	430a      	orrs	r2, r1
 8006a76:	4921      	ldr	r1, [pc, #132]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	614b      	str	r3, [r1, #20]
 8006a7c:	e014      	b.n	8006aa8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a80:	695a      	ldr	r2, [r3, #20]
 8006a82:	4b21      	ldr	r3, [pc, #132]	@ (8006b08 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6892      	ldr	r2, [r2, #8]
 8006a8a:	0211      	lsls	r1, r2, #8
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6952      	ldr	r2, [r2, #20]
 8006a90:	0852      	lsrs	r2, r2, #1
 8006a92:	3a01      	subs	r2, #1
 8006a94:	0652      	lsls	r2, r2, #25
 8006a96:	4311      	orrs	r1, r2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6852      	ldr	r2, [r2, #4]
 8006a9c:	3a01      	subs	r2, #1
 8006a9e:	0112      	lsls	r2, r2, #4
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	4916      	ldr	r1, [pc, #88]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006aa8:	4b14      	ldr	r3, [pc, #80]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a13      	ldr	r2, [pc, #76]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab4:	f7fd f820 	bl	8003af8 <HAL_GetTick>
 8006ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006aba:	e009      	b.n	8006ad0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006abc:	f7fd f81c 	bl	8003af8 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d902      	bls.n	8006ad0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	73fb      	strb	r3, [r7, #15]
          break;
 8006ace:	e005      	b.n	8006adc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0ef      	beq.n	8006abc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ae2:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	4904      	ldr	r1, [pc, #16]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	07ff800f 	.word	0x07ff800f
 8006b04:	ff9f800f 	.word	0xff9f800f
 8006b08:	f9ff800f 	.word	0xf9ff800f

08006b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e095      	b.n	8006c4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d108      	bne.n	8006b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b2e:	d009      	beq.n	8006b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	61da      	str	r2, [r3, #28]
 8006b36:	e005      	b.n	8006b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fc fd00 	bl	8003564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b84:	d902      	bls.n	8006b8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	e002      	b.n	8006b92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006b9a:	d007      	beq.n	8006bac <HAL_SPI_Init+0xa0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ba4:	d002      	beq.n	8006bac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bee:	ea42 0103 	orr.w	r1, r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	f003 0204 	and.w	r2, r3, #4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c28:	ea42 0103 	orr.w	r1, r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b088      	sub	sp, #32
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	603b      	str	r3, [r7, #0]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c62:	f7fc ff49 	bl	8003af8 <HAL_GetTick>
 8006c66:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d001      	beq.n	8006c7c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e15c      	b.n	8006f36 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_SPI_Transmit+0x36>
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e154      	b.n	8006f36 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_SPI_Transmit+0x48>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e14d      	b.n	8006f36 <HAL_SPI_Transmit+0x2e4>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	88fa      	ldrh	r2, [r7, #6]
 8006cba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cec:	d10f      	bne.n	8006d0e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d18:	2b40      	cmp	r3, #64	@ 0x40
 8006d1a:	d007      	beq.n	8006d2c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d34:	d952      	bls.n	8006ddc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_SPI_Transmit+0xf2>
 8006d3e:	8b7b      	ldrh	r3, [r7, #26]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d145      	bne.n	8006dd0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	881a      	ldrh	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	1c9a      	adds	r2, r3, #2
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d68:	e032      	b.n	8006dd0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d112      	bne.n	8006d9e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7c:	881a      	ldrh	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d88:	1c9a      	adds	r2, r3, #2
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d9c:	e018      	b.n	8006dd0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d9e:	f7fc feab 	bl	8003af8 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d803      	bhi.n	8006db6 <HAL_SPI_Transmit+0x164>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d102      	bne.n	8006dbc <HAL_SPI_Transmit+0x16a>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e0b2      	b.n	8006f36 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1c7      	bne.n	8006d6a <HAL_SPI_Transmit+0x118>
 8006dda:	e083      	b.n	8006ee4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <HAL_SPI_Transmit+0x198>
 8006de4:	8b7b      	ldrh	r3, [r7, #26]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d177      	bne.n	8006eda <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d912      	bls.n	8006e1a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	881a      	ldrh	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e04:	1c9a      	adds	r2, r3, #2
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b02      	subs	r3, #2
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e18:	e05f      	b.n	8006eda <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	7812      	ldrb	r2, [r2, #0]
 8006e26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e40:	e04b      	b.n	8006eda <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d12b      	bne.n	8006ea8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d912      	bls.n	8006e80 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5e:	881a      	ldrh	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	1c9a      	adds	r2, r3, #2
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b02      	subs	r3, #2
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e7e:	e02c      	b.n	8006eda <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ea6:	e018      	b.n	8006eda <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ea8:	f7fc fe26 	bl	8003af8 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d803      	bhi.n	8006ec0 <HAL_SPI_Transmit+0x26e>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d102      	bne.n	8006ec6 <HAL_SPI_Transmit+0x274>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e02d      	b.n	8006f36 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1ae      	bne.n	8006e42 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fb65 	bl	80075b8 <SPI_EndRxTxTransaction>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006f34:	2300      	movs	r3, #0
  }
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3720      	adds	r7, #32
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b08a      	sub	sp, #40	@ 0x28
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	607a      	str	r2, [r7, #4]
 8006f4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f50:	f7fc fdd2 	bl	8003af8 <HAL_GetTick>
 8006f54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006f64:	887b      	ldrh	r3, [r7, #2]
 8006f66:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006f68:	887b      	ldrh	r3, [r7, #2]
 8006f6a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f6c:	7ffb      	ldrb	r3, [r7, #31]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d00c      	beq.n	8006f8c <HAL_SPI_TransmitReceive+0x4e>
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f78:	d106      	bne.n	8006f88 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <HAL_SPI_TransmitReceive+0x4a>
 8006f82:	7ffb      	ldrb	r3, [r7, #31]
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d001      	beq.n	8006f8c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e1f3      	b.n	8007374 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <HAL_SPI_TransmitReceive+0x60>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_SPI_TransmitReceive+0x60>
 8006f98:	887b      	ldrh	r3, [r7, #2]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e1e8      	b.n	8007374 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_SPI_TransmitReceive+0x72>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e1e1      	b.n	8007374 <HAL_SPI_TransmitReceive+0x436>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d003      	beq.n	8006fcc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2205      	movs	r2, #5
 8006fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	887a      	ldrh	r2, [r7, #2]
 8006fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	887a      	ldrh	r2, [r7, #2]
 8006fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	887a      	ldrh	r2, [r7, #2]
 8006ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	887a      	ldrh	r2, [r7, #2]
 8006ff8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800700e:	d802      	bhi.n	8007016 <HAL_SPI_TransmitReceive+0xd8>
 8007010:	8abb      	ldrh	r3, [r7, #20]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d908      	bls.n	8007028 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	e007      	b.n	8007038 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007042:	2b40      	cmp	r3, #64	@ 0x40
 8007044:	d007      	beq.n	8007056 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800705e:	f240 8083 	bls.w	8007168 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <HAL_SPI_TransmitReceive+0x132>
 800706a:	8afb      	ldrh	r3, [r7, #22]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d16f      	bne.n	8007150 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007074:	881a      	ldrh	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007080:	1c9a      	adds	r2, r3, #2
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007094:	e05c      	b.n	8007150 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d11b      	bne.n	80070dc <HAL_SPI_TransmitReceive+0x19e>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d016      	beq.n	80070dc <HAL_SPI_TransmitReceive+0x19e>
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d113      	bne.n	80070dc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b8:	881a      	ldrh	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c4:	1c9a      	adds	r2, r3, #2
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d11c      	bne.n	8007124 <HAL_SPI_TransmitReceive+0x1e6>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d016      	beq.n	8007124 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007100:	b292      	uxth	r2, r2
 8007102:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007108:	1c9a      	adds	r2, r3, #2
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007120:	2301      	movs	r3, #1
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007124:	f7fc fce8 	bl	8003af8 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007130:	429a      	cmp	r2, r3
 8007132:	d80d      	bhi.n	8007150 <HAL_SPI_TransmitReceive+0x212>
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d009      	beq.n	8007150 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e111      	b.n	8007374 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d19d      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x158>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d197      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x158>
 8007166:	e0e5      	b.n	8007334 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_SPI_TransmitReceive+0x23a>
 8007170:	8afb      	ldrh	r3, [r7, #22]
 8007172:	2b01      	cmp	r3, #1
 8007174:	f040 80d1 	bne.w	800731a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b01      	cmp	r3, #1
 8007180:	d912      	bls.n	80071a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007186:	881a      	ldrh	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007192:	1c9a      	adds	r2, r3, #2
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b02      	subs	r3, #2
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071a6:	e0b8      	b.n	800731a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ce:	e0a4      	b.n	800731a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d134      	bne.n	8007248 <HAL_SPI_TransmitReceive+0x30a>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d02f      	beq.n	8007248 <HAL_SPI_TransmitReceive+0x30a>
 80071e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d12c      	bne.n	8007248 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d912      	bls.n	800721e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fc:	881a      	ldrh	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007208:	1c9a      	adds	r2, r3, #2
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b02      	subs	r3, #2
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800721c:	e012      	b.n	8007244 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b01      	cmp	r3, #1
 8007254:	d148      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x3aa>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d042      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b01      	cmp	r3, #1
 800726c:	d923      	bls.n	80072b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007278:	b292      	uxth	r2, r2
 800727a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007280:	1c9a      	adds	r2, r3, #2
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b02      	subs	r3, #2
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d81f      	bhi.n	80072e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072b2:	605a      	str	r2, [r3, #4]
 80072b4:	e016      	b.n	80072e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f103 020c 	add.w	r2, r3, #12
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c2:	7812      	ldrb	r2, [r2, #0]
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072e4:	2301      	movs	r3, #1
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072e8:	f7fc fc06 	bl	8003af8 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d803      	bhi.n	8007300 <HAL_SPI_TransmitReceive+0x3c2>
 80072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d102      	bne.n	8007306 <HAL_SPI_TransmitReceive+0x3c8>
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e02c      	b.n	8007374 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	f47f af55 	bne.w	80071d0 <HAL_SPI_TransmitReceive+0x292>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	f47f af4e 	bne.w	80071d0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007334:	6a3a      	ldr	r2, [r7, #32]
 8007336:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f93d 	bl	80075b8 <SPI_EndRxTxTransaction>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e00e      	b.n	8007374 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e000      	b.n	8007374 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007372:	2300      	movs	r3, #0
  }
}
 8007374:	4618      	mov	r0, r3
 8007376:	3728      	adds	r7, #40	@ 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	4613      	mov	r3, r2
 800738a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800738c:	f7fc fbb4 	bl	8003af8 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	4413      	add	r3, r2
 800739a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800739c:	f7fc fbac 	bl	8003af8 <HAL_GetTick>
 80073a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073a2:	4b39      	ldr	r3, [pc, #228]	@ (8007488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	015b      	lsls	r3, r3, #5
 80073a8:	0d1b      	lsrs	r3, r3, #20
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073b2:	e054      	b.n	800745e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d050      	beq.n	800745e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073bc:	f7fc fb9c 	bl	8003af8 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d902      	bls.n	80073d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d13d      	bne.n	800744e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073ea:	d111      	bne.n	8007410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073f4:	d004      	beq.n	8007400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fe:	d107      	bne.n	8007410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800740e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007418:	d10f      	bne.n	800743a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e017      	b.n	800747e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	3b01      	subs	r3, #1
 800745c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4013      	ands	r3, r2
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	429a      	cmp	r2, r3
 800747a:	d19b      	bne.n	80073b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20040004 	.word	0x20040004

0800748c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	@ 0x28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800749e:	f7fc fb2b 	bl	8003af8 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	4413      	add	r3, r2
 80074ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80074ae:	f7fc fb23 	bl	8003af8 <HAL_GetTick>
 80074b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	330c      	adds	r3, #12
 80074ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80074bc:	4b3d      	ldr	r3, [pc, #244]	@ (80075b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	00da      	lsls	r2, r3, #3
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	0d1b      	lsrs	r3, r3, #20
 80074cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ce:	fb02 f303 	mul.w	r3, r2, r3
 80074d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80074d4:	e060      	b.n	8007598 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074dc:	d107      	bne.n	80074ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d050      	beq.n	8007598 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074f6:	f7fc faff 	bl	8003af8 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007502:	429a      	cmp	r2, r3
 8007504:	d902      	bls.n	800750c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	d13d      	bne.n	8007588 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800751a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007524:	d111      	bne.n	800754a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800752e:	d004      	beq.n	800753a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007538:	d107      	bne.n	800754a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007548:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007552:	d10f      	bne.n	8007574 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007572:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e010      	b.n	80075aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	3b01      	subs	r3, #1
 8007596:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4013      	ands	r3, r2
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d196      	bne.n	80074d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3728      	adds	r7, #40	@ 0x28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20040004 	.word	0x20040004

080075b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af02      	add	r7, sp, #8
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff ff5b 	bl	800748c <SPI_WaitFifoStateUntilTimeout>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075e0:	f043 0220 	orr.w	r2, r3, #32
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e027      	b.n	800763c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	2180      	movs	r1, #128	@ 0x80
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fec0 	bl	800737c <SPI_WaitFlagStateUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007606:	f043 0220 	orr.w	r2, r3, #32
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e014      	b.n	800763c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2200      	movs	r2, #0
 800761a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f7ff ff34 	bl	800748c <SPI_WaitFifoStateUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d007      	beq.n	800763a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800762e:	f043 0220 	orr.w	r2, r3, #32
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e000      	b.n	800763c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e042      	b.n	80076dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7fb fed5 	bl	8003418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2224      	movs	r2, #36	@ 0x24
 8007672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0201 	bic.w	r2, r2, #1
 8007684:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fbb2 	bl	8007df8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f8b3 	bl	8007800 <UART_SetConfig>
 800769a:	4603      	mov	r3, r0
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e01b      	b.n	80076dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0201 	orr.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fc31 	bl	8007f3c <UART_CheckIdleState>
 80076da:	4603      	mov	r3, r0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	@ 0x28
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	4613      	mov	r3, r2
 80076f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d17b      	bne.n	80077f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_UART_Transmit+0x26>
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e074      	b.n	80077f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2221      	movs	r2, #33	@ 0x21
 800771a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800771e:	f7fc f9eb 	bl	8003af8 <HAL_GetTick>
 8007722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	88fa      	ldrh	r2, [r7, #6]
 8007728:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	88fa      	ldrh	r2, [r7, #6]
 8007730:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800773c:	d108      	bne.n	8007750 <HAL_UART_Transmit+0x6c>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	e003      	b.n	8007758 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007758:	e030      	b.n	80077bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2200      	movs	r2, #0
 8007762:	2180      	movs	r1, #128	@ 0x80
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fc93 	bl	8008090 <UART_WaitOnFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d005      	beq.n	800777c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e03d      	b.n	80077f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10b      	bne.n	800779a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	881a      	ldrh	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800778e:	b292      	uxth	r2, r2
 8007790:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	3302      	adds	r3, #2
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	e007      	b.n	80077aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1c8      	bne.n	800775a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2200      	movs	r2, #0
 80077d0:	2140      	movs	r1, #64	@ 0x40
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 fc5c 	bl	8008090 <UART_WaitOnFlagUntilTimeout>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e006      	b.n	80077f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e000      	b.n	80077f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077f6:	2302      	movs	r3, #2
  }
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3720      	adds	r7, #32
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007804:	b08c      	sub	sp, #48	@ 0x30
 8007806:	af00      	add	r7, sp, #0
 8007808:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	431a      	orrs	r2, r3
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	431a      	orrs	r2, r3
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	4313      	orrs	r3, r2
 8007826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	4baa      	ldr	r3, [pc, #680]	@ (8007ad8 <UART_SetConfig+0x2d8>)
 8007830:	4013      	ands	r3, r2
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007838:	430b      	orrs	r3, r1
 800783a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a9f      	ldr	r2, [pc, #636]	@ (8007adc <UART_SetConfig+0x2dc>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d004      	beq.n	800786c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007868:	4313      	orrs	r3, r2
 800786a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007876:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007880:	430b      	orrs	r3, r1
 8007882:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	f023 010f 	bic.w	r1, r3, #15
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a90      	ldr	r2, [pc, #576]	@ (8007ae0 <UART_SetConfig+0x2e0>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d125      	bne.n	80078f0 <UART_SetConfig+0xf0>
 80078a4:	4b8f      	ldr	r3, [pc, #572]	@ (8007ae4 <UART_SetConfig+0x2e4>)
 80078a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d81a      	bhi.n	80078e8 <UART_SetConfig+0xe8>
 80078b2:	a201      	add	r2, pc, #4	@ (adr r2, 80078b8 <UART_SetConfig+0xb8>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078d9 	.word	0x080078d9
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	080078e1 	.word	0x080078e1
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ce:	e116      	b.n	8007afe <UART_SetConfig+0x2fe>
 80078d0:	2302      	movs	r3, #2
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d6:	e112      	b.n	8007afe <UART_SetConfig+0x2fe>
 80078d8:	2304      	movs	r3, #4
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078de:	e10e      	b.n	8007afe <UART_SetConfig+0x2fe>
 80078e0:	2308      	movs	r3, #8
 80078e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e6:	e10a      	b.n	8007afe <UART_SetConfig+0x2fe>
 80078e8:	2310      	movs	r3, #16
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ee:	e106      	b.n	8007afe <UART_SetConfig+0x2fe>
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a7c      	ldr	r2, [pc, #496]	@ (8007ae8 <UART_SetConfig+0x2e8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d138      	bne.n	800796c <UART_SetConfig+0x16c>
 80078fa:	4b7a      	ldr	r3, [pc, #488]	@ (8007ae4 <UART_SetConfig+0x2e4>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007900:	f003 030c 	and.w	r3, r3, #12
 8007904:	2b0c      	cmp	r3, #12
 8007906:	d82d      	bhi.n	8007964 <UART_SetConfig+0x164>
 8007908:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <UART_SetConfig+0x110>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007945 	.word	0x08007945
 8007914:	08007965 	.word	0x08007965
 8007918:	08007965 	.word	0x08007965
 800791c:	08007965 	.word	0x08007965
 8007920:	08007955 	.word	0x08007955
 8007924:	08007965 	.word	0x08007965
 8007928:	08007965 	.word	0x08007965
 800792c:	08007965 	.word	0x08007965
 8007930:	0800794d 	.word	0x0800794d
 8007934:	08007965 	.word	0x08007965
 8007938:	08007965 	.word	0x08007965
 800793c:	08007965 	.word	0x08007965
 8007940:	0800795d 	.word	0x0800795d
 8007944:	2300      	movs	r3, #0
 8007946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800794a:	e0d8      	b.n	8007afe <UART_SetConfig+0x2fe>
 800794c:	2302      	movs	r3, #2
 800794e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007952:	e0d4      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007954:	2304      	movs	r3, #4
 8007956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800795a:	e0d0      	b.n	8007afe <UART_SetConfig+0x2fe>
 800795c:	2308      	movs	r3, #8
 800795e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007962:	e0cc      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007964:	2310      	movs	r3, #16
 8007966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800796a:	e0c8      	b.n	8007afe <UART_SetConfig+0x2fe>
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a5e      	ldr	r2, [pc, #376]	@ (8007aec <UART_SetConfig+0x2ec>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d125      	bne.n	80079c2 <UART_SetConfig+0x1c2>
 8007976:	4b5b      	ldr	r3, [pc, #364]	@ (8007ae4 <UART_SetConfig+0x2e4>)
 8007978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800797c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007980:	2b30      	cmp	r3, #48	@ 0x30
 8007982:	d016      	beq.n	80079b2 <UART_SetConfig+0x1b2>
 8007984:	2b30      	cmp	r3, #48	@ 0x30
 8007986:	d818      	bhi.n	80079ba <UART_SetConfig+0x1ba>
 8007988:	2b20      	cmp	r3, #32
 800798a:	d00a      	beq.n	80079a2 <UART_SetConfig+0x1a2>
 800798c:	2b20      	cmp	r3, #32
 800798e:	d814      	bhi.n	80079ba <UART_SetConfig+0x1ba>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <UART_SetConfig+0x19a>
 8007994:	2b10      	cmp	r3, #16
 8007996:	d008      	beq.n	80079aa <UART_SetConfig+0x1aa>
 8007998:	e00f      	b.n	80079ba <UART_SetConfig+0x1ba>
 800799a:	2300      	movs	r3, #0
 800799c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a0:	e0ad      	b.n	8007afe <UART_SetConfig+0x2fe>
 80079a2:	2302      	movs	r3, #2
 80079a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a8:	e0a9      	b.n	8007afe <UART_SetConfig+0x2fe>
 80079aa:	2304      	movs	r3, #4
 80079ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b0:	e0a5      	b.n	8007afe <UART_SetConfig+0x2fe>
 80079b2:	2308      	movs	r3, #8
 80079b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b8:	e0a1      	b.n	8007afe <UART_SetConfig+0x2fe>
 80079ba:	2310      	movs	r3, #16
 80079bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079c0:	e09d      	b.n	8007afe <UART_SetConfig+0x2fe>
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a4a      	ldr	r2, [pc, #296]	@ (8007af0 <UART_SetConfig+0x2f0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d125      	bne.n	8007a18 <UART_SetConfig+0x218>
 80079cc:	4b45      	ldr	r3, [pc, #276]	@ (8007ae4 <UART_SetConfig+0x2e4>)
 80079ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079d8:	d016      	beq.n	8007a08 <UART_SetConfig+0x208>
 80079da:	2bc0      	cmp	r3, #192	@ 0xc0
 80079dc:	d818      	bhi.n	8007a10 <UART_SetConfig+0x210>
 80079de:	2b80      	cmp	r3, #128	@ 0x80
 80079e0:	d00a      	beq.n	80079f8 <UART_SetConfig+0x1f8>
 80079e2:	2b80      	cmp	r3, #128	@ 0x80
 80079e4:	d814      	bhi.n	8007a10 <UART_SetConfig+0x210>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <UART_SetConfig+0x1f0>
 80079ea:	2b40      	cmp	r3, #64	@ 0x40
 80079ec:	d008      	beq.n	8007a00 <UART_SetConfig+0x200>
 80079ee:	e00f      	b.n	8007a10 <UART_SetConfig+0x210>
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079f6:	e082      	b.n	8007afe <UART_SetConfig+0x2fe>
 80079f8:	2302      	movs	r3, #2
 80079fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079fe:	e07e      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007a00:	2304      	movs	r3, #4
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a06:	e07a      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007a08:	2308      	movs	r3, #8
 8007a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a0e:	e076      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007a10:	2310      	movs	r3, #16
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a16:	e072      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a35      	ldr	r2, [pc, #212]	@ (8007af4 <UART_SetConfig+0x2f4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d12a      	bne.n	8007a78 <UART_SetConfig+0x278>
 8007a22:	4b30      	ldr	r3, [pc, #192]	@ (8007ae4 <UART_SetConfig+0x2e4>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a30:	d01a      	beq.n	8007a68 <UART_SetConfig+0x268>
 8007a32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a36:	d81b      	bhi.n	8007a70 <UART_SetConfig+0x270>
 8007a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a3c:	d00c      	beq.n	8007a58 <UART_SetConfig+0x258>
 8007a3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a42:	d815      	bhi.n	8007a70 <UART_SetConfig+0x270>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <UART_SetConfig+0x250>
 8007a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a4c:	d008      	beq.n	8007a60 <UART_SetConfig+0x260>
 8007a4e:	e00f      	b.n	8007a70 <UART_SetConfig+0x270>
 8007a50:	2300      	movs	r3, #0
 8007a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a56:	e052      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a5e:	e04e      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007a60:	2304      	movs	r3, #4
 8007a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a66:	e04a      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007a68:	2308      	movs	r3, #8
 8007a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a6e:	e046      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007a70:	2310      	movs	r3, #16
 8007a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a76:	e042      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a17      	ldr	r2, [pc, #92]	@ (8007adc <UART_SetConfig+0x2dc>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d13a      	bne.n	8007af8 <UART_SetConfig+0x2f8>
 8007a82:	4b18      	ldr	r3, [pc, #96]	@ (8007ae4 <UART_SetConfig+0x2e4>)
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a90:	d01a      	beq.n	8007ac8 <UART_SetConfig+0x2c8>
 8007a92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a96:	d81b      	bhi.n	8007ad0 <UART_SetConfig+0x2d0>
 8007a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a9c:	d00c      	beq.n	8007ab8 <UART_SetConfig+0x2b8>
 8007a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aa2:	d815      	bhi.n	8007ad0 <UART_SetConfig+0x2d0>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <UART_SetConfig+0x2b0>
 8007aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aac:	d008      	beq.n	8007ac0 <UART_SetConfig+0x2c0>
 8007aae:	e00f      	b.n	8007ad0 <UART_SetConfig+0x2d0>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ab6:	e022      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007abe:	e01e      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac6:	e01a      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007ac8:	2308      	movs	r3, #8
 8007aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ace:	e016      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad6:	e012      	b.n	8007afe <UART_SetConfig+0x2fe>
 8007ad8:	cfff69f3 	.word	0xcfff69f3
 8007adc:	40008000 	.word	0x40008000
 8007ae0:	40013800 	.word	0x40013800
 8007ae4:	40021000 	.word	0x40021000
 8007ae8:	40004400 	.word	0x40004400
 8007aec:	40004800 	.word	0x40004800
 8007af0:	40004c00 	.word	0x40004c00
 8007af4:	40005000 	.word	0x40005000
 8007af8:	2310      	movs	r3, #16
 8007afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4aae      	ldr	r2, [pc, #696]	@ (8007dbc <UART_SetConfig+0x5bc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	f040 8097 	bne.w	8007c38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d823      	bhi.n	8007b5a <UART_SetConfig+0x35a>
 8007b12:	a201      	add	r2, pc, #4	@ (adr r2, 8007b18 <UART_SetConfig+0x318>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b5b 	.word	0x08007b5b
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b5b 	.word	0x08007b5b
 8007b28:	08007b4b 	.word	0x08007b4b
 8007b2c:	08007b5b 	.word	0x08007b5b
 8007b30:	08007b5b 	.word	0x08007b5b
 8007b34:	08007b5b 	.word	0x08007b5b
 8007b38:	08007b53 	.word	0x08007b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3c:	f7fe f9e2 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8007b40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b42:	e010      	b.n	8007b66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b44:	4b9e      	ldr	r3, [pc, #632]	@ (8007dc0 <UART_SetConfig+0x5c0>)
 8007b46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b48:	e00d      	b.n	8007b66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4a:	f7fe f943 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8007b4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b50:	e009      	b.n	8007b66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b58:	e005      	b.n	8007b66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8130 	beq.w	8007dce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b72:	4a94      	ldr	r2, [pc, #592]	@ (8007dc4 <UART_SetConfig+0x5c4>)
 8007b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	4613      	mov	r3, r2
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	4413      	add	r3, r2
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d305      	bcc.n	8007b9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d903      	bls.n	8007ba6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ba4:	e113      	b.n	8007dce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba8:	2200      	movs	r2, #0
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	60fa      	str	r2, [r7, #12]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb2:	4a84      	ldr	r2, [pc, #528]	@ (8007dc4 <UART_SetConfig+0x5c4>)
 8007bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2200      	movs	r2, #0
 8007bbc:	603b      	str	r3, [r7, #0]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bc8:	f7f9 f856 	bl	8000c78 <__aeabi_uldivmod>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	020b      	lsls	r3, r1, #8
 8007bde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007be2:	0202      	lsls	r2, r0, #8
 8007be4:	6979      	ldr	r1, [r7, #20]
 8007be6:	6849      	ldr	r1, [r1, #4]
 8007be8:	0849      	lsrs	r1, r1, #1
 8007bea:	2000      	movs	r0, #0
 8007bec:	460c      	mov	r4, r1
 8007bee:	4605      	mov	r5, r0
 8007bf0:	eb12 0804 	adds.w	r8, r2, r4
 8007bf4:	eb43 0905 	adc.w	r9, r3, r5
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	469a      	mov	sl, r3
 8007c00:	4693      	mov	fp, r2
 8007c02:	4652      	mov	r2, sl
 8007c04:	465b      	mov	r3, fp
 8007c06:	4640      	mov	r0, r8
 8007c08:	4649      	mov	r1, r9
 8007c0a:	f7f9 f835 	bl	8000c78 <__aeabi_uldivmod>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4613      	mov	r3, r2
 8007c14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c1c:	d308      	bcc.n	8007c30 <UART_SetConfig+0x430>
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c24:	d204      	bcs.n	8007c30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6a3a      	ldr	r2, [r7, #32]
 8007c2c:	60da      	str	r2, [r3, #12]
 8007c2e:	e0ce      	b.n	8007dce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c36:	e0ca      	b.n	8007dce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c40:	d166      	bne.n	8007d10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007c42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	d827      	bhi.n	8007c9a <UART_SetConfig+0x49a>
 8007c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <UART_SetConfig+0x450>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c75 	.word	0x08007c75
 8007c54:	08007c7d 	.word	0x08007c7d
 8007c58:	08007c85 	.word	0x08007c85
 8007c5c:	08007c9b 	.word	0x08007c9b
 8007c60:	08007c8b 	.word	0x08007c8b
 8007c64:	08007c9b 	.word	0x08007c9b
 8007c68:	08007c9b 	.word	0x08007c9b
 8007c6c:	08007c9b 	.word	0x08007c9b
 8007c70:	08007c93 	.word	0x08007c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c74:	f7fe f946 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8007c78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c7a:	e014      	b.n	8007ca6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c7c:	f7fe f958 	bl	8005f30 <HAL_RCC_GetPCLK2Freq>
 8007c80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c82:	e010      	b.n	8007ca6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c84:	4b4e      	ldr	r3, [pc, #312]	@ (8007dc0 <UART_SetConfig+0x5c0>)
 8007c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c88:	e00d      	b.n	8007ca6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8a:	f7fe f8a3 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8007c8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c90:	e009      	b.n	8007ca6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c98:	e005      	b.n	8007ca6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ca4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8090 	beq.w	8007dce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb2:	4a44      	ldr	r2, [pc, #272]	@ (8007dc4 <UART_SetConfig+0x5c4>)
 8007cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cc0:	005a      	lsls	r2, r3, #1
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	441a      	add	r2, r3
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	2b0f      	cmp	r3, #15
 8007cd8:	d916      	bls.n	8007d08 <UART_SetConfig+0x508>
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce0:	d212      	bcs.n	8007d08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f023 030f 	bic.w	r3, r3, #15
 8007cea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	085b      	lsrs	r3, r3, #1
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	8bfb      	ldrh	r3, [r7, #30]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	8bfa      	ldrh	r2, [r7, #30]
 8007d04:	60da      	str	r2, [r3, #12]
 8007d06:	e062      	b.n	8007dce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d0e:	e05e      	b.n	8007dce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d828      	bhi.n	8007d6a <UART_SetConfig+0x56a>
 8007d18:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <UART_SetConfig+0x520>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6b 	.word	0x08007d6b
 8007d30:	08007d5b 	.word	0x08007d5b
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007d6b 	.word	0x08007d6b
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	08007d63 	.word	0x08007d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fe f8de 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8007d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d4a:	e014      	b.n	8007d76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fe f8f0 	bl	8005f30 <HAL_RCC_GetPCLK2Freq>
 8007d50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d52:	e010      	b.n	8007d76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d54:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc0 <UART_SetConfig+0x5c0>)
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d58:	e00d      	b.n	8007d76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5a:	f7fe f83b 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8007d5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d60:	e009      	b.n	8007d76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d68:	e005      	b.n	8007d76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d74:	bf00      	nop
    }

    if (pclk != 0U)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d028      	beq.n	8007dce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d80:	4a10      	ldr	r2, [pc, #64]	@ (8007dc4 <UART_SetConfig+0x5c4>)
 8007d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d86:	461a      	mov	r2, r3
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	085b      	lsrs	r3, r3, #1
 8007d94:	441a      	add	r2, r3
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	2b0f      	cmp	r3, #15
 8007da4:	d910      	bls.n	8007dc8 <UART_SetConfig+0x5c8>
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dac:	d20c      	bcs.n	8007dc8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60da      	str	r2, [r3, #12]
 8007db8:	e009      	b.n	8007dce <UART_SetConfig+0x5ce>
 8007dba:	bf00      	nop
 8007dbc:	40008000 	.word	0x40008000
 8007dc0:	00f42400 	.word	0x00f42400
 8007dc4:	08010084 	.word	0x08010084
      }
      else
      {
        ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2200      	movs	r2, #0
 8007de2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2200      	movs	r2, #0
 8007de8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007dea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3730      	adds	r7, #48	@ 0x30
 8007df2:	46bd      	mov	sp, r7
 8007df4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00a      	beq.n	8007e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6a:	f003 0304 	and.w	r3, r3, #4
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01a      	beq.n	8007f0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ef6:	d10a      	bne.n	8007f0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	605a      	str	r2, [r3, #4]
  }
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b098      	sub	sp, #96	@ 0x60
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f4c:	f7fb fdd4 	bl	8003af8 <HAL_GetTick>
 8007f50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d12f      	bne.n	8007fc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f88e 	bl	8008090 <UART_WaitOnFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d022      	beq.n	8007fc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e6      	bne.n	8007f7a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e063      	b.n	8008088 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d149      	bne.n	8008062 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f857 	bl	8008090 <UART_WaitOnFlagUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d03c      	beq.n	8008062 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008006:	633b      	str	r3, [r7, #48]	@ 0x30
 8008008:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800800c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e6      	bne.n	8007fe8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	60fb      	str	r3, [r7, #12]
   return(result);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f023 0301 	bic.w	r3, r3, #1
 8008030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800803a:	61fa      	str	r2, [r7, #28]
 800803c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	69b9      	ldr	r1, [r7, #24]
 8008040:	69fa      	ldr	r2, [r7, #28]
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	617b      	str	r3, [r7, #20]
   return(result);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e5      	bne.n	800801a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e012      	b.n	8008088 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3758      	adds	r7, #88	@ 0x58
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	4613      	mov	r3, r2
 800809e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a0:	e04f      	b.n	8008142 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d04b      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080aa:	f7fb fd25 	bl	8003af8 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d302      	bcc.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e04e      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d037      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b80      	cmp	r3, #128	@ 0x80
 80080d6:	d034      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b40      	cmp	r3, #64	@ 0x40
 80080dc:	d031      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d110      	bne.n	800810e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2208      	movs	r2, #8
 80080f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 f838 	bl	800816a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2208      	movs	r2, #8
 80080fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e029      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800811c:	d111      	bne.n	8008142 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f81e 	bl	800816a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2220      	movs	r2, #32
 8008132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e00f      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4013      	ands	r3, r2
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	429a      	cmp	r2, r3
 8008150:	bf0c      	ite	eq
 8008152:	2301      	moveq	r3, #1
 8008154:	2300      	movne	r3, #0
 8008156:	b2db      	uxtb	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	429a      	cmp	r2, r3
 800815e:	d0a0      	beq.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800816a:	b480      	push	{r7}
 800816c:	b095      	sub	sp, #84	@ 0x54
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800817a:	e853 3f00 	ldrex	r3, [r3]
 800817e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	461a      	mov	r2, r3
 800818e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008190:	643b      	str	r3, [r7, #64]	@ 0x40
 8008192:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008196:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008198:	e841 2300 	strex	r3, r2, [r1]
 800819c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800819e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e6      	bne.n	8008172 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081ba:	f023 0301 	bic.w	r3, r3, #1
 80081be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3308      	adds	r3, #8
 80081c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e3      	bne.n	80081a4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d118      	bne.n	8008216 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f023 0310 	bic.w	r3, r3, #16
 80081f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008202:	61bb      	str	r3, [r7, #24]
 8008204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	6979      	ldr	r1, [r7, #20]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	613b      	str	r3, [r7, #16]
   return(result);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e6      	bne.n	80081e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800822a:	bf00      	nop
 800822c:	3754      	adds	r7, #84	@ 0x54
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008244:	2b01      	cmp	r3, #1
 8008246:	d101      	bne.n	800824c <HAL_UARTEx_DisableFifoMode+0x16>
 8008248:	2302      	movs	r3, #2
 800824a:	e027      	b.n	800829c <HAL_UARTEx_DisableFifoMode+0x66>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2224      	movs	r2, #36	@ 0x24
 8008258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 0201 	bic.w	r2, r2, #1
 8008272:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800827a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082bc:	2302      	movs	r3, #2
 80082be:	e02d      	b.n	800831c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2224      	movs	r2, #36	@ 0x24
 80082cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f84f 	bl	80083a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2220      	movs	r2, #32
 800830e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008338:	2302      	movs	r3, #2
 800833a:	e02d      	b.n	8008398 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2224      	movs	r2, #36	@ 0x24
 8008348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0201 	bic.w	r2, r2, #1
 8008362:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f811 	bl	80083a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d108      	bne.n	80083c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083c0:	e031      	b.n	8008426 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083c2:	2308      	movs	r3, #8
 80083c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083c6:	2308      	movs	r3, #8
 80083c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	0e5b      	lsrs	r3, r3, #25
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	0f5b      	lsrs	r3, r3, #29
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 0307 	and.w	r3, r3, #7
 80083e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	7b3a      	ldrb	r2, [r7, #12]
 80083ee:	4911      	ldr	r1, [pc, #68]	@ (8008434 <UARTEx_SetNbDataToProcess+0x94>)
 80083f0:	5c8a      	ldrb	r2, [r1, r2]
 80083f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083f6:	7b3a      	ldrb	r2, [r7, #12]
 80083f8:	490f      	ldr	r1, [pc, #60]	@ (8008438 <UARTEx_SetNbDataToProcess+0x98>)
 80083fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008400:	b29a      	uxth	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	7b7a      	ldrb	r2, [r7, #13]
 800840c:	4909      	ldr	r1, [pc, #36]	@ (8008434 <UARTEx_SetNbDataToProcess+0x94>)
 800840e:	5c8a      	ldrb	r2, [r1, r2]
 8008410:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008414:	7b7a      	ldrb	r2, [r7, #13]
 8008416:	4908      	ldr	r1, [pc, #32]	@ (8008438 <UARTEx_SetNbDataToProcess+0x98>)
 8008418:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800841a:	fb93 f3f2 	sdiv	r3, r3, r2
 800841e:	b29a      	uxth	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	0801009c 	.word	0x0801009c
 8008438:	080100a4 	.word	0x080100a4

0800843c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 fc8a 	bl	8009d66 <VL53L0X_get_offset_calibration_data_micro_meter>
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8008456:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b096      	sub	sp, #88	@ 0x58
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800846c:	2300      	movs	r3, #0
 800846e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8008472:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008476:	2b00      	cmp	r3, #0
 8008478:	d107      	bne.n	800848a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800847a:	2200      	movs	r2, #0
 800847c:	2188      	movs	r1, #136	@ 0x88
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f004 fbe4 	bl	800cc4c <VL53L0X_WrByte>
 8008484:	4603      	mov	r3, r0
 8008486:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008498:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80084a2:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a9e      	ldr	r2, [pc, #632]	@ (8008724 <VL53L0X_DataInit+0x2c0>)
 80084aa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a9d      	ldr	r2, [pc, #628]	@ (8008728 <VL53L0X_DataInit+0x2c4>)
 80084b2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80084bc:	f107 0310 	add.w	r3, r7, #16
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fac0 	bl	8008a48 <VL53L0X_GetDeviceParameters>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80084ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d112      	bne.n	80084fc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80084d6:	2300      	movs	r3, #0
 80084d8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80084da:	2300      	movs	r3, #0
 80084dc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f103 0410 	add.w	r4, r3, #16
 80084e4:	f107 0510 	add.w	r5, r7, #16
 80084e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80084f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2264      	movs	r2, #100	@ 0x64
 8008500:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800850a:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008514:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800851e:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800852a:	2201      	movs	r2, #1
 800852c:	2180      	movs	r1, #128	@ 0x80
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f004 fb8c 	bl	800cc4c <VL53L0X_WrByte>
 8008534:	4603      	mov	r3, r0
 8008536:	461a      	mov	r2, r3
 8008538:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800853c:	4313      	orrs	r3, r2
 800853e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008542:	2201      	movs	r2, #1
 8008544:	21ff      	movs	r1, #255	@ 0xff
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f004 fb80 	bl	800cc4c <VL53L0X_WrByte>
 800854c:	4603      	mov	r3, r0
 800854e:	461a      	mov	r2, r3
 8008550:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008554:	4313      	orrs	r3, r2
 8008556:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800855a:	2200      	movs	r2, #0
 800855c:	2100      	movs	r1, #0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f004 fb74 	bl	800cc4c <VL53L0X_WrByte>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800856c:	4313      	orrs	r3, r2
 800856e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8008572:	f107 030f 	add.w	r3, r7, #15
 8008576:	461a      	mov	r2, r3
 8008578:	2191      	movs	r1, #145	@ 0x91
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f004 fbe8 	bl	800cd50 <VL53L0X_RdByte>
 8008580:	4603      	mov	r3, r0
 8008582:	461a      	mov	r2, r3
 8008584:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008588:	4313      	orrs	r3, r2
 800858a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800858e:	7bfa      	ldrb	r2, [r7, #15]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008596:	2201      	movs	r2, #1
 8008598:	2100      	movs	r1, #0
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f004 fb56 	bl	800cc4c <VL53L0X_WrByte>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085a8:	4313      	orrs	r3, r2
 80085aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80085ae:	2200      	movs	r2, #0
 80085b0:	21ff      	movs	r1, #255	@ 0xff
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f004 fb4a 	bl	800cc4c <VL53L0X_WrByte>
 80085b8:	4603      	mov	r3, r0
 80085ba:	461a      	mov	r2, r3
 80085bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085c0:	4313      	orrs	r3, r2
 80085c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80085c6:	2200      	movs	r2, #0
 80085c8:	2180      	movs	r1, #128	@ 0x80
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f004 fb3e 	bl	800cc4c <VL53L0X_WrByte>
 80085d0:	4603      	mov	r3, r0
 80085d2:	461a      	mov	r2, r3
 80085d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085d8:	4313      	orrs	r3, r2
 80085da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80085de:	2300      	movs	r3, #0
 80085e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80085e2:	e014      	b.n	800860e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80085e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d114      	bne.n	8008616 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80085ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	2201      	movs	r2, #1
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fd19 	bl	800902c <VL53L0X_SetLimitCheckEnable>
 80085fa:	4603      	mov	r3, r0
 80085fc:	461a      	mov	r2, r3
 80085fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008602:	4313      	orrs	r3, r2
 8008604:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800860a:	3301      	adds	r3, #1
 800860c:	653b      	str	r3, [r7, #80]	@ 0x50
 800860e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008610:	2b05      	cmp	r3, #5
 8008612:	dde7      	ble.n	80085e4 <VL53L0X_DataInit+0x180>
 8008614:	e000      	b.n	8008618 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8008616:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008618:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800861c:	2b00      	cmp	r3, #0
 800861e:	d107      	bne.n	8008630 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008620:	2200      	movs	r2, #0
 8008622:	2102      	movs	r1, #2
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fd01 	bl	800902c <VL53L0X_SetLimitCheckEnable>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008630:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008634:	2b00      	cmp	r3, #0
 8008636:	d107      	bne.n	8008648 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008638:	2200      	movs	r2, #0
 800863a:	2103      	movs	r1, #3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fcf5 	bl	800902c <VL53L0X_SetLimitCheckEnable>
 8008642:	4603      	mov	r3, r0
 8008644:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008648:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800864c:	2b00      	cmp	r3, #0
 800864e:	d107      	bne.n	8008660 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008650:	2200      	movs	r2, #0
 8008652:	2104      	movs	r1, #4
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fce9 	bl	800902c <VL53L0X_SetLimitCheckEnable>
 800865a:	4603      	mov	r3, r0
 800865c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008660:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008664:	2b00      	cmp	r3, #0
 8008666:	d107      	bne.n	8008678 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008668:	2200      	movs	r2, #0
 800866a:	2105      	movs	r1, #5
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fcdd 	bl	800902c <VL53L0X_SetLimitCheckEnable>
 8008672:	4603      	mov	r3, r0
 8008674:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008678:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800867c:	2b00      	cmp	r3, #0
 800867e:	d108      	bne.n	8008692 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008680:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8008684:	2100      	movs	r1, #0
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fd80 	bl	800918c <VL53L0X_SetLimitCheckValue>
 800868c:	4603      	mov	r3, r0
 800868e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008692:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8008696:	2b00      	cmp	r3, #0
 8008698:	d108      	bne.n	80086ac <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800869a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800869e:	2101      	movs	r1, #1
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fd73 	bl	800918c <VL53L0X_SetLimitCheckValue>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80086ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d108      	bne.n	80086c6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80086b4:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 80086b8:	2102      	movs	r1, #2
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fd66 	bl	800918c <VL53L0X_SetLimitCheckValue>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80086c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d107      	bne.n	80086de <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80086ce:	2200      	movs	r2, #0
 80086d0:	2103      	movs	r1, #3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fd5a 	bl	800918c <VL53L0X_SetLimitCheckValue>
 80086d8:	4603      	mov	r3, r0
 80086da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80086de:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10f      	bne.n	8008706 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	22ff      	movs	r2, #255	@ 0xff
 80086ea:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80086ee:	22ff      	movs	r2, #255	@ 0xff
 80086f0:	2101      	movs	r1, #1
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f004 faaa 	bl	800cc4c <VL53L0X_WrByte>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008706:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8008716:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800871a:	4618      	mov	r0, r3
 800871c:	3758      	adds	r7, #88	@ 0x58
 800871e:	46bd      	mov	sp, r7
 8008720:	bdb0      	pop	{r4, r5, r7, pc}
 8008722:	bf00      	nop
 8008724:	00016b85 	.word	0x00016b85
 8008728:	000970a4 	.word	0x000970a4

0800872c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800872c:	b5b0      	push	{r4, r5, r7, lr}
 800872e:	b09e      	sub	sp, #120	@ 0x78
 8008730:	af02      	add	r7, sp, #8
 8008732:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008734:	2300      	movs	r3, #0
 8008736:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800873a:	f107 031c 	add.w	r3, r7, #28
 800873e:	2240      	movs	r2, #64	@ 0x40
 8008740:	2100      	movs	r1, #0
 8008742:	4618      	mov	r0, r3
 8008744:	f005 fa0e 	bl	800db64 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 800875a:	2300      	movs	r3, #0
 800875c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8008768:	2101      	movs	r1, #1
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f002 fa3e 	bl	800abec <VL53L0X_get_info_from_device>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800877c:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8008784:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8008788:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800878c:	2b01      	cmp	r3, #1
 800878e:	d80d      	bhi.n	80087ac <VL53L0X_StaticInit+0x80>
 8008790:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008794:	2b01      	cmp	r3, #1
 8008796:	d102      	bne.n	800879e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8008798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800879a:	2b20      	cmp	r3, #32
 800879c:	d806      	bhi.n	80087ac <VL53L0X_StaticInit+0x80>
 800879e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10e      	bne.n	80087c4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80087a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087a8:	2b0c      	cmp	r3, #12
 80087aa:	d90b      	bls.n	80087c4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80087ac:	f107 0218 	add.w	r2, r7, #24
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 fcd0 	bl	800a15c <VL53L0X_perform_ref_spad_management>
 80087bc:	4603      	mov	r3, r0
 80087be:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80087c2:	e009      	b.n	80087d8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80087c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80087c8:	461a      	mov	r2, r3
 80087ca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 fed1 	bl	800a574 <VL53L0X_set_reference_spads>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80087d8:	4b93      	ldr	r3, [pc, #588]	@ (8008a28 <VL53L0X_StaticInit+0x2fc>)
 80087da:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80087dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10f      	bne.n	8008804 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80087ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80087ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d104      	bne.n	8008800 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80087fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087fe:	e001      	b.n	8008804 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8008800:	4b89      	ldr	r3, [pc, #548]	@ (8008a28 <VL53L0X_StaticInit+0x2fc>)
 8008802:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008804:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800880c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f003 fb06 	bl	800be20 <VL53L0X_load_tuning_settings>
 8008814:	4603      	mov	r3, r0
 8008816:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800881a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8008822:	2300      	movs	r3, #0
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	2304      	movs	r3, #4
 8008828:	2200      	movs	r2, #0
 800882a:	2100      	movs	r1, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 f8cd 	bl	80099cc <VL53L0X_SetGpioConfig>
 8008832:	4603      	mov	r3, r0
 8008834:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008838:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800883c:	2b00      	cmp	r3, #0
 800883e:	d121      	bne.n	8008884 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008840:	2201      	movs	r2, #1
 8008842:	21ff      	movs	r1, #255	@ 0xff
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f004 fa01 	bl	800cc4c <VL53L0X_WrByte>
 800884a:	4603      	mov	r3, r0
 800884c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008850:	f107 031a 	add.w	r3, r7, #26
 8008854:	461a      	mov	r2, r3
 8008856:	2184      	movs	r1, #132	@ 0x84
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f004 faa3 	bl	800cda4 <VL53L0X_RdWord>
 800885e:	4603      	mov	r3, r0
 8008860:	461a      	mov	r2, r3
 8008862:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008866:	4313      	orrs	r3, r2
 8008868:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800886c:	2200      	movs	r2, #0
 800886e:	21ff      	movs	r1, #255	@ 0xff
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f004 f9eb 	bl	800cc4c <VL53L0X_WrByte>
 8008876:	4603      	mov	r3, r0
 8008878:	461a      	mov	r2, r3
 800887a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800887e:	4313      	orrs	r3, r2
 8008880:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008884:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008888:	2b00      	cmp	r3, #0
 800888a:	d104      	bne.n	8008896 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800888c:	8b7b      	ldrh	r3, [r7, #26]
 800888e:	011a      	lsls	r2, r3, #4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8008896:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800889a:	2b00      	cmp	r3, #0
 800889c:	d108      	bne.n	80088b0 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800889e:	f107 031c 	add.w	r3, r7, #28
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f8cf 	bl	8008a48 <VL53L0X_GetDeviceParameters>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80088b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d110      	bne.n	80088da <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80088b8:	f107 0319 	add.w	r3, r7, #25
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f991 	bl	8008be6 <VL53L0X_GetFractionEnable>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80088ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d103      	bne.n	80088da <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80088d2:	7e7a      	ldrb	r2, [r7, #25]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80088da:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10e      	bne.n	8008900 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f103 0410 	add.w	r4, r3, #16
 80088e8:	f107 051c 	add.w	r5, r7, #28
 80088ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80088fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8008900:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008904:	2b00      	cmp	r3, #0
 8008906:	d111      	bne.n	800892c <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 8008908:	f107 0319 	add.w	r3, r7, #25
 800890c:	461a      	mov	r2, r3
 800890e:	2101      	movs	r1, #1
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f004 fa1d 	bl	800cd50 <VL53L0X_RdByte>
 8008916:	4603      	mov	r3, r0
 8008918:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800891c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008920:	2b00      	cmp	r3, #0
 8008922:	d103      	bne.n	800892c <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8008924:	7e7a      	ldrb	r2, [r7, #25]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800892c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008930:	2b00      	cmp	r3, #0
 8008932:	d107      	bne.n	8008944 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008934:	2200      	movs	r2, #0
 8008936:	2100      	movs	r1, #0
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f9b1 	bl	8008ca0 <VL53L0X_SetSequenceStepEnable>
 800893e:	4603      	mov	r3, r0
 8008940:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008944:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008948:	2b00      	cmp	r3, #0
 800894a:	d107      	bne.n	800895c <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800894c:	2200      	movs	r2, #0
 800894e:	2102      	movs	r1, #2
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f9a5 	bl	8008ca0 <VL53L0X_SetSequenceStepEnable>
 8008956:	4603      	mov	r3, r0
 8008958:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800895c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008960:	2b00      	cmp	r3, #0
 8008962:	d103      	bne.n	800896c <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2203      	movs	r2, #3
 8008968:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800896c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008970:	2b00      	cmp	r3, #0
 8008972:	d109      	bne.n	8008988 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8008974:	f107 0313 	add.w	r3, r7, #19
 8008978:	461a      	mov	r2, r3
 800897a:	2100      	movs	r1, #0
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f977 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 8008982:	4603      	mov	r3, r0
 8008984:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008988:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800898c:	2b00      	cmp	r3, #0
 800898e:	d103      	bne.n	8008998 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008990:	7cfa      	ldrb	r2, [r7, #19]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008998:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800899c:	2b00      	cmp	r3, #0
 800899e:	d109      	bne.n	80089b4 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 80089a0:	f107 0313 	add.w	r3, r7, #19
 80089a4:	461a      	mov	r2, r3
 80089a6:	2101      	movs	r1, #1
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f961 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d103      	bne.n	80089c4 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80089bc:	7cfa      	ldrb	r2, [r7, #19]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80089c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d109      	bne.n	80089e0 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 80089cc:	f107 030c 	add.w	r3, r7, #12
 80089d0:	461a      	mov	r2, r3
 80089d2:	2103      	movs	r1, #3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f002 fe89 	bl	800b6ec <get_sequence_step_timeout>
 80089da:	4603      	mov	r3, r0
 80089dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d103      	bne.n	80089f0 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80089f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d109      	bne.n	8008a0c <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 80089f8:	f107 030c 	add.w	r3, r7, #12
 80089fc:	461a      	mov	r2, r3
 80089fe:	2104      	movs	r1, #4
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f002 fe73 	bl	800b6ec <get_sequence_step_timeout>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d103      	bne.n	8008a1c <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a1c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3770      	adds	r7, #112	@ 0x70
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bdb0      	pop	{r4, r5, r7, pc}
 8008a28:	20040010 	.word	0x20040010

08008a2c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8008a34:	239d      	movs	r3, #157	@ 0x9d
 8008a36:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8008a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f8b0 	bl	8008bc0 <VL53L0X_GetDeviceMode>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d107      	bne.n	8008a7c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa5e 	bl	8008f34 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d102      	bne.n	8008a8a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2200      	movs	r2, #0
 8008a88:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8008a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d107      	bne.n	8008aa2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	3310      	adds	r3, #16
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fa94 	bl	8008fc6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8008aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d107      	bne.n	8008aba <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	3314      	adds	r3, #20
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff fcc3 	bl	800843c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8008aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d134      	bne.n	8008b2c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60bb      	str	r3, [r7, #8]
 8008ac6:	e02a      	b.n	8008b1e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d12a      	bne.n	8008b26 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	b299      	uxth	r1, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4413      	add	r3, r2
 8008ade:	3304      	adds	r3, #4
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fbb4 	bl	8009250 <VL53L0X_GetLimitCheckValue>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	461a      	mov	r2, r3
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d117      	bne.n	8008b2a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	b299      	uxth	r1, r3
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	3318      	adds	r3, #24
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	4413      	add	r3, r2
 8008b06:	461a      	mov	r2, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fb1b 	bl	8009144 <VL53L0X_GetLimitCheckEnable>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	461a      	mov	r2, r3
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	60bb      	str	r3, [r7, #8]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b05      	cmp	r3, #5
 8008b22:	ddd1      	ble.n	8008ac8 <VL53L0X_GetDeviceParameters+0x80>
 8008b24:	e002      	b.n	8008b2c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8008b2a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d107      	bne.n	8008b44 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	333c      	adds	r3, #60	@ 0x3c
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fc16 	bl	800936c <VL53L0X_GetWrapAroundCheckEnable>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8008b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d107      	bne.n	8008b5c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f879 	bl	8008c4a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	2b15      	cmp	r3, #21
 8008b7c:	bf8c      	ite	hi
 8008b7e:	2201      	movhi	r2, #1
 8008b80:	2200      	movls	r2, #0
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	2a00      	cmp	r2, #0
 8008b86:	d10f      	bne.n	8008ba8 <VL53L0X_SetDeviceMode+0x40>
 8008b88:	4a0c      	ldr	r2, [pc, #48]	@ (8008bbc <VL53L0X_SetDeviceMode+0x54>)
 8008b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	bf14      	ite	ne
 8008b96:	2301      	movne	r3, #1
 8008b98:	2300      	moveq	r3, #0
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	741a      	strb	r2, [r3, #16]
		break;
 8008ba6:	e001      	b.n	8008bac <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008ba8:	23f8      	movs	r3, #248	@ 0xf8
 8008baa:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	0030000b 	.word	0x0030000b

08008bc0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7c1a      	ldrb	r2, [r3, #16]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	2109      	movs	r1, #9
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f004 f8a9 	bl	800cd50 <VL53L0X_RdByte>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f002 ff62 	bl	800bafe <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8008c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f003 f82f 	bl	800bcbe <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8008c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	607a      	str	r2, [r7, #4]
 8008c7c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	4619      	mov	r1, r3
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f002 ff01 	bl	800ba90 <VL53L0X_get_vcsel_pulse_period>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8008c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
 8008cac:	4613      	mov	r3, r2
 8008cae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008cbc:	f107 030f 	add.w	r3, r7, #15
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f004 f843 	bl	800cd50 <VL53L0X_RdByte>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8008cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d159      	bne.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8008cda:	78bb      	ldrb	r3, [r7, #2]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d12b      	bne.n	8008d38 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d825      	bhi.n	8008d32 <VL53L0X_SetSequenceStepEnable+0x92>
 8008ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cec <VL53L0X_SetSequenceStepEnable+0x4c>)
 8008ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cec:	08008d01 	.word	0x08008d01
 8008cf0:	08008d0b 	.word	0x08008d0b
 8008cf4:	08008d15 	.word	0x08008d15
 8008cf8:	08008d1f 	.word	0x08008d1f
 8008cfc:	08008d29 	.word	0x08008d29
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8008d00:	7dbb      	ldrb	r3, [r7, #22]
 8008d02:	f043 0310 	orr.w	r3, r3, #16
 8008d06:	75bb      	strb	r3, [r7, #22]
				break;
 8008d08:	e041      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8008d0a:	7dbb      	ldrb	r3, [r7, #22]
 8008d0c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8008d10:	75bb      	strb	r3, [r7, #22]
				break;
 8008d12:	e03c      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8008d14:	7dbb      	ldrb	r3, [r7, #22]
 8008d16:	f043 0304 	orr.w	r3, r3, #4
 8008d1a:	75bb      	strb	r3, [r7, #22]
				break;
 8008d1c:	e037      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8008d1e:	7dbb      	ldrb	r3, [r7, #22]
 8008d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d24:	75bb      	strb	r3, [r7, #22]
				break;
 8008d26:	e032      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8008d28:	7dbb      	ldrb	r3, [r7, #22]
 8008d2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d2e:	75bb      	strb	r3, [r7, #22]
				break;
 8008d30:	e02d      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d32:	23fc      	movs	r3, #252	@ 0xfc
 8008d34:	75fb      	strb	r3, [r7, #23]
 8008d36:	e02a      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8008d38:	78fb      	ldrb	r3, [r7, #3]
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	d825      	bhi.n	8008d8a <VL53L0X_SetSequenceStepEnable+0xea>
 8008d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d44 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d59 	.word	0x08008d59
 8008d48:	08008d63 	.word	0x08008d63
 8008d4c:	08008d6d 	.word	0x08008d6d
 8008d50:	08008d77 	.word	0x08008d77
 8008d54:	08008d81 	.word	0x08008d81
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8008d58:	7dbb      	ldrb	r3, [r7, #22]
 8008d5a:	f023 0310 	bic.w	r3, r3, #16
 8008d5e:	75bb      	strb	r3, [r7, #22]
				break;
 8008d60:	e015      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8008d62:	7dbb      	ldrb	r3, [r7, #22]
 8008d64:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8008d68:	75bb      	strb	r3, [r7, #22]
				break;
 8008d6a:	e010      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8008d6c:	7dbb      	ldrb	r3, [r7, #22]
 8008d6e:	f023 0304 	bic.w	r3, r3, #4
 8008d72:	75bb      	strb	r3, [r7, #22]
				break;
 8008d74:	e00b      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8008d76:	7dbb      	ldrb	r3, [r7, #22]
 8008d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d7c:	75bb      	strb	r3, [r7, #22]
				break;
 8008d7e:	e006      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8008d80:	7dbb      	ldrb	r3, [r7, #22]
 8008d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d86:	75bb      	strb	r3, [r7, #22]
				break;
 8008d88:	e001      	b.n	8008d8e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d8a:	23fc      	movs	r3, #252	@ 0xfc
 8008d8c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	7dba      	ldrb	r2, [r7, #22]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d01e      	beq.n	8008dd4 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8008d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d107      	bne.n	8008dae <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8008d9e:	7dbb      	ldrb	r3, [r7, #22]
 8008da0:	461a      	mov	r2, r3
 8008da2:	2101      	movs	r1, #1
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f003 ff51 	bl	800cc4c <VL53L0X_WrByte>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8008dae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d103      	bne.n	8008dbe <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	7dba      	ldrb	r2, [r7, #22]
 8008dba:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8008dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008dcc:	6939      	ldr	r1, [r7, #16]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff ff28 	bl	8008c24 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	607b      	str	r3, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	72fb      	strb	r3, [r7, #11]
 8008dee:	4613      	mov	r3, r2
 8008df0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d836      	bhi.n	8008e70 <sequence_step_enabled+0x90>
 8008e02:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <sequence_step_enabled+0x28>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e1d 	.word	0x08008e1d
 8008e0c:	08008e2f 	.word	0x08008e2f
 8008e10:	08008e41 	.word	0x08008e41
 8008e14:	08008e53 	.word	0x08008e53
 8008e18:	08008e65 	.word	0x08008e65
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008e1c:	7abb      	ldrb	r3, [r7, #10]
 8008e1e:	111b      	asrs	r3, r3, #4
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	701a      	strb	r2, [r3, #0]
		break;
 8008e2c:	e022      	b.n	8008e74 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8008e2e:	7abb      	ldrb	r3, [r7, #10]
 8008e30:	10db      	asrs	r3, r3, #3
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	701a      	strb	r2, [r3, #0]
		break;
 8008e3e:	e019      	b.n	8008e74 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8008e40:	7abb      	ldrb	r3, [r7, #10]
 8008e42:	109b      	asrs	r3, r3, #2
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	701a      	strb	r2, [r3, #0]
		break;
 8008e50:	e010      	b.n	8008e74 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8008e52:	7abb      	ldrb	r3, [r7, #10]
 8008e54:	119b      	asrs	r3, r3, #6
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	701a      	strb	r2, [r3, #0]
		break;
 8008e62:	e007      	b.n	8008e74 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8008e64:	7abb      	ldrb	r3, [r7, #10]
 8008e66:	09db      	lsrs	r3, r3, #7
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	701a      	strb	r2, [r3, #0]
		break;
 8008e6e:	e001      	b.n	8008e74 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e70:	23fc      	movs	r3, #252	@ 0xfc
 8008e72:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008e96:	f107 030e 	add.w	r3, r7, #14
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f003 ff56 	bl	800cd50 <VL53L0X_RdByte>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8008ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d107      	bne.n	8008ec0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8008eb0:	7bba      	ldrb	r2, [r7, #14]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7ff ff92 	bl	8008de0 <sequence_step_enabled>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d108      	bne.n	8008eda <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008ec8:	7bba      	ldrb	r2, [r7, #14]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	3302      	adds	r3, #2
 8008ece:	2101      	movs	r1, #1
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff ff85 	bl	8008de0 <sequence_step_enabled>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d108      	bne.n	8008ef4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8008ee2:	7bba      	ldrb	r2, [r7, #14]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	2102      	movs	r1, #2
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff ff78 	bl	8008de0 <sequence_step_enabled>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d108      	bne.n	8008f0e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008efc:	7bba      	ldrb	r2, [r7, #14]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	3303      	adds	r3, #3
 8008f02:	2103      	movs	r1, #3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff ff6b 	bl	8008de0 <sequence_step_enabled>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d108      	bne.n	8008f28 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8008f16:	7bba      	ldrb	r2, [r7, #14]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	2104      	movs	r1, #4
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff ff5e 	bl	8008de0 <sequence_step_enabled>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8008f42:	f107 030c 	add.w	r3, r7, #12
 8008f46:	461a      	mov	r2, r3
 8008f48:	21f8      	movs	r1, #248	@ 0xf8
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f003 ff2a 	bl	800cda4 <VL53L0X_RdWord>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8008f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d108      	bne.n	8008f6e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8008f5c:	f107 0308 	add.w	r3, r7, #8
 8008f60:	461a      	mov	r2, r3
 8008f62:	2104      	movs	r1, #4
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f003 ff53 	bl	800ce10 <VL53L0X_RdDWord>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10c      	bne.n	8008f90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8008f76:	89bb      	ldrh	r3, [r7, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	89ba      	ldrh	r2, [r7, #12]
 8008f80:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	7f1b      	ldrb	r3, [r3, #28]
 8008fae:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	7bba      	ldrb	r2, [r7, #14]
 8008fb4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b086      	sub	sp, #24
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008fd4:	f107 030e 	add.w	r3, r7, #14
 8008fd8:	461a      	mov	r2, r3
 8008fda:	2120      	movs	r1, #32
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f003 fee1 	bl	800cda4 <VL53L0X_RdWord>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8008fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d118      	bne.n	8009020 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8008fee:	89fb      	ldrh	r3, [r7, #14]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d109      	bne.n	8009008 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	771a      	strb	r2, [r3, #28]
 8009006:	e00b      	b.n	8009020 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009008:	89fb      	ldrh	r3, [r7, #14]
 800900a:	00db      	lsls	r3, r3, #3
 800900c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	807b      	strh	r3, [r7, #2]
 8009038:	4613      	mov	r3, r2
 800903a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800903c:	2300      	movs	r3, #0
 800903e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800904c:	887b      	ldrh	r3, [r7, #2]
 800904e:	2b05      	cmp	r3, #5
 8009050:	d902      	bls.n	8009058 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009052:	23fc      	movs	r3, #252	@ 0xfc
 8009054:	75fb      	strb	r3, [r7, #23]
 8009056:	e05b      	b.n	8009110 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009058:	787b      	ldrb	r3, [r7, #1]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009066:	2301      	movs	r3, #1
 8009068:	73bb      	strb	r3, [r7, #14]
 800906a:	e00a      	b.n	8009082 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800906c:	887b      	ldrh	r3, [r7, #2]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	330c      	adds	r3, #12
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800907e:	2301      	movs	r3, #1
 8009080:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009082:	887b      	ldrh	r3, [r7, #2]
 8009084:	2b05      	cmp	r3, #5
 8009086:	d841      	bhi.n	800910c <VL53L0X_SetLimitCheckEnable+0xe0>
 8009088:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <VL53L0X_SetLimitCheckEnable+0x64>)
 800908a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908e:	bf00      	nop
 8009090:	080090a9 	.word	0x080090a9
 8009094:	080090b3 	.word	0x080090b3
 8009098:	080090c9 	.word	0x080090c9
 800909c:	080090d3 	.word	0x080090d3
 80090a0:	080090dd 	.word	0x080090dd
 80090a4:	080090f5 	.word	0x080090f5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7bfa      	ldrb	r2, [r7, #15]
 80090ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80090b0:	e02e      	b.n	8009110 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	461a      	mov	r2, r3
 80090ba:	2144      	movs	r1, #68	@ 0x44
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f003 fde9 	bl	800cc94 <VL53L0X_WrWord>
 80090c2:	4603      	mov	r3, r0
 80090c4:	75fb      	strb	r3, [r7, #23]

			break;
 80090c6:	e023      	b.n	8009110 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	7bfa      	ldrb	r2, [r7, #15]
 80090cc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80090d0:	e01e      	b.n	8009110 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	7bfa      	ldrb	r2, [r7, #15]
 80090d6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80090da:	e019      	b.n	8009110 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80090e2:	7b7b      	ldrb	r3, [r7, #13]
 80090e4:	22fe      	movs	r2, #254	@ 0xfe
 80090e6:	2160      	movs	r1, #96	@ 0x60
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f003 fdfd 	bl	800cce8 <VL53L0X_UpdateByte>
 80090ee:	4603      	mov	r3, r0
 80090f0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80090f2:	e00d      	b.n	8009110 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80090fa:	7b7b      	ldrb	r3, [r7, #13]
 80090fc:	22ef      	movs	r2, #239	@ 0xef
 80090fe:	2160      	movs	r1, #96	@ 0x60
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f003 fdf1 	bl	800cce8 <VL53L0X_UpdateByte>
 8009106:	4603      	mov	r3, r0
 8009108:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800910a:	e001      	b.n	8009110 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800910c:	23fc      	movs	r3, #252	@ 0xfc
 800910e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10f      	bne.n	8009138 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009118:	787b      	ldrb	r3, [r7, #1]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800911e:	887b      	ldrh	r3, [r7, #2]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	4413      	add	r3, r2
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800912a:	e005      	b.n	8009138 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800912c:	887b      	ldrh	r3, [r7, #2]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	4413      	add	r3, r2
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	460b      	mov	r3, r1
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009152:	2300      	movs	r3, #0
 8009154:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009156:	897b      	ldrh	r3, [r7, #10]
 8009158:	2b05      	cmp	r3, #5
 800915a:	d905      	bls.n	8009168 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800915c:	23fc      	movs	r3, #252	@ 0xfc
 800915e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	701a      	strb	r2, [r3, #0]
 8009166:	e008      	b.n	800917a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009168:	897b      	ldrh	r3, [r7, #10]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4413      	add	r3, r2
 800916e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009172:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	7dba      	ldrb	r2, [r7, #22]
 8009178:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800917a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800917e:	4618      	mov	r0, r3
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
	...

0800918c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	460b      	mov	r3, r1
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800919a:	2300      	movs	r3, #0
 800919c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800919e:	897b      	ldrh	r3, [r7, #10]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091a8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80091aa:	7dbb      	ldrb	r3, [r7, #22]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d107      	bne.n	80091c0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80091b0:	897b      	ldrh	r3, [r7, #10]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	330c      	adds	r3, #12
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	605a      	str	r2, [r3, #4]
 80091be:	e040      	b.n	8009242 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80091c0:	897b      	ldrh	r3, [r7, #10]
 80091c2:	2b05      	cmp	r3, #5
 80091c4:	d830      	bhi.n	8009228 <VL53L0X_SetLimitCheckValue+0x9c>
 80091c6:	a201      	add	r2, pc, #4	@ (adr r2, 80091cc <VL53L0X_SetLimitCheckValue+0x40>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	080091e5 	.word	0x080091e5
 80091d0:	080091ed 	.word	0x080091ed
 80091d4:	08009203 	.word	0x08009203
 80091d8:	0800920b 	.word	0x0800920b
 80091dc:	08009213 	.word	0x08009213
 80091e0:	08009213 	.word	0x08009213

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80091ea:	e01f      	b.n	800922c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	2144      	movs	r1, #68	@ 0x44
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f003 fd4c 	bl	800cc94 <VL53L0X_WrWord>
 80091fc:	4603      	mov	r3, r0
 80091fe:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009200:	e014      	b.n	800922c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009208:	e010      	b.n	800922c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009210:	e00c      	b.n	800922c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009216:	b29b      	uxth	r3, r3
 8009218:	461a      	mov	r2, r3
 800921a:	2164      	movs	r1, #100	@ 0x64
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f003 fd39 	bl	800cc94 <VL53L0X_WrWord>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009226:	e001      	b.n	800922c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009228:	23fc      	movs	r3, #252	@ 0xfc
 800922a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800922c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d106      	bne.n	8009242 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009234:	897b      	ldrh	r3, [r7, #10]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	330c      	adds	r3, #12
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009242:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop

08009250 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	460b      	mov	r3, r1
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800925e:	2300      	movs	r3, #0
 8009260:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009266:	897b      	ldrh	r3, [r7, #10]
 8009268:	2b05      	cmp	r3, #5
 800926a:	d847      	bhi.n	80092fc <VL53L0X_GetLimitCheckValue+0xac>
 800926c:	a201      	add	r2, pc, #4	@ (adr r2, 8009274 <VL53L0X_GetLimitCheckValue+0x24>)
 800926e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009272:	bf00      	nop
 8009274:	0800928d 	.word	0x0800928d
 8009278:	08009299 	.word	0x08009299
 800927c:	080092bf 	.word	0x080092bf
 8009280:	080092cb 	.word	0x080092cb
 8009284:	080092d7 	.word	0x080092d7
 8009288:	080092d7 	.word	0x080092d7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009290:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	77bb      	strb	r3, [r7, #30]
		break;
 8009296:	e033      	b.n	8009300 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009298:	f107 0316 	add.w	r3, r7, #22
 800929c:	461a      	mov	r2, r3
 800929e:	2144      	movs	r1, #68	@ 0x44
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f003 fd7f 	bl	800cda4 <VL53L0X_RdWord>
 80092a6:	4603      	mov	r3, r0
 80092a8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80092aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d102      	bne.n	80092b8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80092b2:	8afb      	ldrh	r3, [r7, #22]
 80092b4:	025b      	lsls	r3, r3, #9
 80092b6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80092b8:	2301      	movs	r3, #1
 80092ba:	77bb      	strb	r3, [r7, #30]
		break;
 80092bc:	e020      	b.n	8009300 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	77bb      	strb	r3, [r7, #30]
		break;
 80092c8:	e01a      	b.n	8009300 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ce:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	77bb      	strb	r3, [r7, #30]
		break;
 80092d4:	e014      	b.n	8009300 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80092d6:	f107 0316 	add.w	r3, r7, #22
 80092da:	461a      	mov	r2, r3
 80092dc:	2164      	movs	r1, #100	@ 0x64
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f003 fd60 	bl	800cda4 <VL53L0X_RdWord>
 80092e4:	4603      	mov	r3, r0
 80092e6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80092e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d102      	bne.n	80092f6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80092f0:	8afb      	ldrh	r3, [r7, #22]
 80092f2:	025b      	lsls	r3, r3, #9
 80092f4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	77bb      	strb	r3, [r7, #30]
		break;
 80092fa:	e001      	b.n	8009300 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80092fc:	23fc      	movs	r3, #252	@ 0xfc
 80092fe:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009300:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d12a      	bne.n	800935e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009308:	7fbb      	ldrb	r3, [r7, #30]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d124      	bne.n	8009358 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d110      	bne.n	8009336 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009314:	897b      	ldrh	r3, [r7, #10]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	330c      	adds	r3, #12
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009328:	897b      	ldrh	r3, [r7, #10]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	4413      	add	r3, r2
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009334:	e013      	b.n	800935e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800933c:	897b      	ldrh	r3, [r7, #10]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	330c      	adds	r3, #12
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800934a:	897b      	ldrh	r3, [r7, #10]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009356:	e002      	b.n	800935e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800935e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009362:	4618      	mov	r0, r3
 8009364:	3720      	adds	r7, #32
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop

0800936c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800937a:	f107 030e 	add.w	r3, r7, #14
 800937e:	461a      	mov	r2, r3
 8009380:	2101      	movs	r1, #1
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f003 fce4 	bl	800cd50 <VL53L0X_RdByte>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800938c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10e      	bne.n	80093b2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009394:	7bba      	ldrb	r2, [r7, #14]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	b25b      	sxtb	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	da03      	bge.n	80093ac <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2201      	movs	r2, #1
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	e002      	b.n	80093b2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2200      	movs	r2, #0
 80093b0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80093b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d104      	bne.n	80093c4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80093c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80093dc:	f107 030e 	add.w	r3, r7, #14
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff fbec 	bl	8008bc0 <VL53L0X_GetDeviceMode>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80093ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d107      	bne.n	8009404 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80093f4:	7bbb      	ldrb	r3, [r7, #14]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d104      	bne.n	8009404 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f898 	bl	8009530 <VL53L0X_StartMeasurement>
 8009400:	4603      	mov	r3, r0
 8009402:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 fb33 	bl	800aa78 <VL53L0X_measurement_poll_for_completion>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d103      	bne.n	800942c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2203      	movs	r2, #3
 8009428:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800942c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009444:	2300      	movs	r3, #0
 8009446:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009448:	2301      	movs	r3, #1
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f001 fad5 	bl	800a9fe <VL53L0X_perform_ref_calibration>
 8009454:	4603      	mov	r3, r0
 8009456:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009458:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009470:	2300      	movs	r3, #0
 8009472:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800947a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800947c:	7dbb      	ldrb	r3, [r7, #22]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d005      	beq.n	800948e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009482:	7dbb      	ldrb	r3, [r7, #22]
 8009484:	2b02      	cmp	r3, #2
 8009486:	d002      	beq.n	800948e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8009488:	7dbb      	ldrb	r3, [r7, #22]
 800948a:	2b03      	cmp	r3, #3
 800948c:	d147      	bne.n	800951e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800948e:	f107 030c 	add.w	r3, r7, #12
 8009492:	f107 0210 	add.w	r2, r7, #16
 8009496:	2101      	movs	r1, #1
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fbb9 	bl	8009c10 <VL53L0X_GetInterruptThresholds>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80094a8:	d803      	bhi.n	80094b2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80094aa:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80094ac:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80094b0:	d935      	bls.n	800951e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80094b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d131      	bne.n	800951e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80094ba:	78fb      	ldrb	r3, [r7, #3]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d006      	beq.n	80094ce <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80094c0:	491a      	ldr	r1, [pc, #104]	@ (800952c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f002 fcac 	bl	800be20 <VL53L0X_load_tuning_settings>
 80094c8:	4603      	mov	r3, r0
 80094ca:	75fb      	strb	r3, [r7, #23]
 80094cc:	e027      	b.n	800951e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80094ce:	2204      	movs	r2, #4
 80094d0:	21ff      	movs	r1, #255	@ 0xff
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f003 fbba 	bl	800cc4c <VL53L0X_WrByte>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	4313      	orrs	r3, r2
 80094e0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80094e2:	2200      	movs	r2, #0
 80094e4:	2170      	movs	r1, #112	@ 0x70
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f003 fbb0 	bl	800cc4c <VL53L0X_WrByte>
 80094ec:	4603      	mov	r3, r0
 80094ee:	461a      	mov	r2, r3
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094f6:	2200      	movs	r2, #0
 80094f8:	21ff      	movs	r1, #255	@ 0xff
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f003 fba6 	bl	800cc4c <VL53L0X_WrByte>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	4313      	orrs	r3, r2
 8009508:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800950a:	2200      	movs	r2, #0
 800950c:	2180      	movs	r1, #128	@ 0x80
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f003 fb9c 	bl	800cc4c <VL53L0X_WrByte>
 8009514:	4603      	mov	r3, r0
 8009516:	461a      	mov	r2, r3
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	4313      	orrs	r3, r2
 800951c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800951e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20040104 	.word	0x20040104

08009530 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009538:	2300      	movs	r3, #0
 800953a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800953c:	2301      	movs	r3, #1
 800953e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009540:	f107 030e 	add.w	r3, r7, #14
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7ff fb3a 	bl	8008bc0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800954c:	2201      	movs	r2, #1
 800954e:	2180      	movs	r1, #128	@ 0x80
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f003 fb7b 	bl	800cc4c <VL53L0X_WrByte>
 8009556:	4603      	mov	r3, r0
 8009558:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800955a:	2201      	movs	r2, #1
 800955c:	21ff      	movs	r1, #255	@ 0xff
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f003 fb74 	bl	800cc4c <VL53L0X_WrByte>
 8009564:	4603      	mov	r3, r0
 8009566:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009568:	2200      	movs	r2, #0
 800956a:	2100      	movs	r1, #0
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f003 fb6d 	bl	800cc4c <VL53L0X_WrByte>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800957c:	461a      	mov	r2, r3
 800957e:	2191      	movs	r1, #145	@ 0x91
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f003 fb63 	bl	800cc4c <VL53L0X_WrByte>
 8009586:	4603      	mov	r3, r0
 8009588:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800958a:	2201      	movs	r2, #1
 800958c:	2100      	movs	r1, #0
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f003 fb5c 	bl	800cc4c <VL53L0X_WrByte>
 8009594:	4603      	mov	r3, r0
 8009596:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009598:	2200      	movs	r2, #0
 800959a:	21ff      	movs	r1, #255	@ 0xff
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f003 fb55 	bl	800cc4c <VL53L0X_WrByte>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80095a6:	2200      	movs	r2, #0
 80095a8:	2180      	movs	r1, #128	@ 0x80
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f003 fb4e 	bl	800cc4c <VL53L0X_WrByte>
 80095b0:	4603      	mov	r3, r0
 80095b2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d054      	beq.n	8009664 <VL53L0X_StartMeasurement+0x134>
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	dc6c      	bgt.n	8009698 <VL53L0X_StartMeasurement+0x168>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <VL53L0X_StartMeasurement+0x98>
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d034      	beq.n	8009630 <VL53L0X_StartMeasurement+0x100>
 80095c6:	e067      	b.n	8009698 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80095c8:	2201      	movs	r2, #1
 80095ca:	2100      	movs	r1, #0
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f003 fb3d 	bl	800cc4c <VL53L0X_WrByte>
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80095da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d15d      	bne.n	800969e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d008      	beq.n	80095fe <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80095ec:	f107 030d 	add.w	r3, r7, #13
 80095f0:	461a      	mov	r2, r3
 80095f2:	2100      	movs	r1, #0
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f003 fbab 	bl	800cd50 <VL53L0X_RdByte>
 80095fa:	4603      	mov	r3, r0
 80095fc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	3301      	adds	r3, #1
 8009602:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009604:	7b7a      	ldrb	r2, [r7, #13]
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	4013      	ands	r3, r2
 800960a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800960c:	7bfa      	ldrb	r2, [r7, #15]
 800960e:	429a      	cmp	r2, r3
 8009610:	d107      	bne.n	8009622 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8009612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d103      	bne.n	8009622 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009620:	d3e1      	bcc.n	80095e6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009628:	d339      	bcc.n	800969e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800962a:	23f9      	movs	r3, #249	@ 0xf9
 800962c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800962e:	e036      	b.n	800969e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d105      	bne.n	8009644 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009638:	2101      	movs	r1, #1
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff ff12 	bl	8009464 <VL53L0X_CheckAndLoadInterruptSettings>
 8009640:	4603      	mov	r3, r0
 8009642:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009644:	2202      	movs	r2, #2
 8009646:	2100      	movs	r1, #0
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f003 faff 	bl	800cc4c <VL53L0X_WrByte>
 800964e:	4603      	mov	r3, r0
 8009650:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8009652:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d123      	bne.n	80096a2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2204      	movs	r2, #4
 800965e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8009662:	e01e      	b.n	80096a2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009664:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d105      	bne.n	8009678 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800966c:	2101      	movs	r1, #1
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff fef8 	bl	8009464 <VL53L0X_CheckAndLoadInterruptSettings>
 8009674:	4603      	mov	r3, r0
 8009676:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009678:	2204      	movs	r2, #4
 800967a:	2100      	movs	r1, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f003 fae5 	bl	800cc4c <VL53L0X_WrByte>
 8009682:	4603      	mov	r3, r0
 8009684:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8009686:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10b      	bne.n	80096a6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2204      	movs	r2, #4
 8009692:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8009696:	e006      	b.n	80096a6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009698:	23f8      	movs	r3, #248	@ 0xf8
 800969a:	75fb      	strb	r3, [r7, #23]
 800969c:	e004      	b.n	80096a8 <VL53L0X_StartMeasurement+0x178>
		break;
 800969e:	bf00      	nop
 80096a0:	e002      	b.n	80096a8 <VL53L0X_StartMeasurement+0x178>
		break;
 80096a2:	bf00      	nop
 80096a4:	e000      	b.n	80096a8 <VL53L0X_StartMeasurement+0x178>
		break;
 80096a6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80096a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80096c8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d112      	bne.n	80096f6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80096d0:	f107 0308 	add.w	r3, r7, #8
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fb0e 	bl	8009cf8 <VL53L0X_GetInterruptMaskStatus>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d103      	bne.n	80096ee <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2201      	movs	r2, #1
 80096ea:	701a      	strb	r2, [r3, #0]
 80096ec:	e01c      	b.n	8009728 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]
 80096f4:	e018      	b.n	8009728 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80096f6:	f107 030d 	add.w	r3, r7, #13
 80096fa:	461a      	mov	r2, r3
 80096fc:	2114      	movs	r1, #20
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f003 fb26 	bl	800cd50 <VL53L0X_RdByte>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8009708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10b      	bne.n	8009728 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8009710:	7b7b      	ldrb	r3, [r7, #13]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2201      	movs	r2, #1
 800971e:	701a      	strb	r2, [r3, #0]
 8009720:	e002      	b.n	8009728 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2200      	movs	r2, #0
 8009726:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009734:	b5b0      	push	{r4, r5, r7, lr}
 8009736:	b096      	sub	sp, #88	@ 0x58
 8009738:	af02      	add	r7, sp, #8
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800973e:	2300      	movs	r3, #0
 8009740:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009744:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009748:	230c      	movs	r3, #12
 800974a:	2114      	movs	r1, #20
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f003 fa51 	bl	800cbf4 <VL53L0X_ReadMulti>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8009758:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800975c:	2b00      	cmp	r3, #0
 800975e:	f040 80c8 	bne.w	80098f2 <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2200      	movs	r2, #0
 8009766:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800976e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8009772:	021b      	lsls	r3, r3, #8
 8009774:	b29b      	uxth	r3, r3
 8009776:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800977a:	4413      	add	r3, r2
 800977c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2200      	movs	r2, #0
 8009784:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8009786:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800978a:	021b      	lsls	r3, r3, #8
 800978c:	b29b      	uxth	r3, r3
 800978e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009792:	4413      	add	r3, r2
 8009794:	b29b      	uxth	r3, r3
 8009796:	025b      	lsls	r3, r3, #9
 8009798:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800979e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80097a0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80097ac:	4413      	add	r3, r2
 80097ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80097b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80097b6:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80097bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80097c0:	021b      	lsls	r3, r3, #8
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80097c8:	4413      	add	r3, r2
 80097ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80097d4:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80097d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80097da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 80097e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80097ec:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80097f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80097f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097f6:	d046      	beq.n	8009886 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80097f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80097fa:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80097fe:	fb02 f303 	mul.w	r3, r2, r3
 8009802:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009806:	4a58      	ldr	r2, [pc, #352]	@ (8009968 <VL53L0X_GetRangingMeasurementData+0x234>)
 8009808:	fb82 1203 	smull	r1, r2, r2, r3
 800980c:	1192      	asrs	r2, r2, #6
 800980e:	17db      	asrs	r3, r3, #31
 8009810:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009812:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	7f1b      	ldrb	r3, [r3, #28]
 8009820:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8009824:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009828:	2b00      	cmp	r3, #0
 800982a:	d02c      	beq.n	8009886 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800982c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800982e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8009832:	fb02 f303 	mul.w	r3, r2, r3
 8009836:	121a      	asrs	r2, r3, #8
					<= 0) {
 8009838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800983a:	429a      	cmp	r2, r3
 800983c:	d10d      	bne.n	800985a <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800983e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009842:	2b00      	cmp	r3, #0
 8009844:	d004      	beq.n	8009850 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 8009846:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800984a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800984e:	e016      	b.n	800987e <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8009850:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8009854:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009858:	e011      	b.n	800987e <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800985a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800985e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009860:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8009864:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009866:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800986a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800986e:	121b      	asrs	r3, r3, #8
 8009870:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8009872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009874:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8009876:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800987a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800987e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009882:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8009886:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00d      	beq.n	80098aa <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800988e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009892:	089b      	lsrs	r3, r3, #2
 8009894:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800989a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	019b      	lsls	r3, r3, #6
 80098a2:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	75da      	strb	r2, [r3, #23]
 80098a8:	e006      	b.n	80098b8 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80098b0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2200      	movs	r2, #0
 80098b6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80098b8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80098bc:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80098c0:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	4613      	mov	r3, r2
 80098cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f002 ff44 	bl	800c75c <VL53L0X_get_pal_range_status>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098dc:	4313      	orrs	r3, r2
 80098de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80098e2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d103      	bne.n	80098f2 <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80098ea:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80098f2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d12f      	bne.n	800995a <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f107 040c 	add.w	r4, r7, #12
 8009900:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8009904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800990c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8009914:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800991a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009922:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8009928:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800992e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009934:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800993a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8009940:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 800994a:	f107 050c 	add.w	r5, r7, #12
 800994e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009952:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009956:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800995a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800995e:	4618      	mov	r0, r3
 8009960:	3750      	adds	r7, #80	@ 0x50
 8009962:	46bd      	mov	sp, r7
 8009964:	bdb0      	pop	{r4, r5, r7, pc}
 8009966:	bf00      	nop
 8009968:	10624dd3 	.word	0x10624dd3

0800996c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800997a:	2100      	movs	r1, #0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff f8f3 	bl	8008b68 <VL53L0X_SetDeviceMode>
 8009982:	4603      	mov	r3, r0
 8009984:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d104      	bne.n	8009998 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff fd1e 	bl	80093d0 <VL53L0X_PerformSingleMeasurement>
 8009994:	4603      	mov	r3, r0
 8009996:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff fec6 	bl	8009734 <VL53L0X_GetRangingMeasurementData>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80099ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d105      	bne.n	80099c0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80099b4:	2100      	movs	r1, #0
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f95e 	bl	8009c78 <VL53L0X_ClearInterruptMask>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80099c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	4608      	mov	r0, r1
 80099d6:	4611      	mov	r1, r2
 80099d8:	461a      	mov	r2, r3
 80099da:	4603      	mov	r3, r0
 80099dc:	70fb      	strb	r3, [r7, #3]
 80099de:	460b      	mov	r3, r1
 80099e0:	70bb      	strb	r3, [r7, #2]
 80099e2:	4613      	mov	r3, r2
 80099e4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80099f0:	23f6      	movs	r3, #246	@ 0xf6
 80099f2:	73fb      	strb	r3, [r7, #15]
 80099f4:	e105      	b.n	8009c02 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80099f6:	78bb      	ldrb	r3, [r7, #2]
 80099f8:	2b14      	cmp	r3, #20
 80099fa:	d110      	bne.n	8009a1e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80099fc:	7e3b      	ldrb	r3, [r7, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d102      	bne.n	8009a08 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8009a02:	2310      	movs	r3, #16
 8009a04:	73bb      	strb	r3, [r7, #14]
 8009a06:	e001      	b.n	8009a0c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	2184      	movs	r1, #132	@ 0x84
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f003 f91a 	bl	800cc4c <VL53L0X_WrByte>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]
 8009a1c:	e0f1      	b.n	8009c02 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8009a1e:	78bb      	ldrb	r3, [r7, #2]
 8009a20:	2b15      	cmp	r3, #21
 8009a22:	f040 8097 	bne.w	8009b54 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009a26:	2201      	movs	r2, #1
 8009a28:	21ff      	movs	r1, #255	@ 0xff
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f003 f90e 	bl	800cc4c <VL53L0X_WrByte>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f003 f904 	bl	800cc4c <VL53L0X_WrByte>
 8009a44:	4603      	mov	r3, r0
 8009a46:	461a      	mov	r2, r3
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009a4e:	2200      	movs	r2, #0
 8009a50:	21ff      	movs	r1, #255	@ 0xff
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f003 f8fa 	bl	800cc4c <VL53L0X_WrByte>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009a62:	2201      	movs	r2, #1
 8009a64:	2180      	movs	r1, #128	@ 0x80
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f003 f8f0 	bl	800cc4c <VL53L0X_WrByte>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	461a      	mov	r2, r3
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8009a76:	2202      	movs	r2, #2
 8009a78:	2185      	movs	r1, #133	@ 0x85
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f003 f8e6 	bl	800cc4c <VL53L0X_WrByte>
 8009a80:	4603      	mov	r3, r0
 8009a82:	461a      	mov	r2, r3
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8009a8a:	2204      	movs	r2, #4
 8009a8c:	21ff      	movs	r1, #255	@ 0xff
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f003 f8dc 	bl	800cc4c <VL53L0X_WrByte>
 8009a94:	4603      	mov	r3, r0
 8009a96:	461a      	mov	r2, r3
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	21cd      	movs	r1, #205	@ 0xcd
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f003 f8d2 	bl	800cc4c <VL53L0X_WrByte>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	461a      	mov	r2, r3
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8009ab2:	2211      	movs	r2, #17
 8009ab4:	21cc      	movs	r1, #204	@ 0xcc
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f003 f8c8 	bl	800cc4c <VL53L0X_WrByte>
 8009abc:	4603      	mov	r3, r0
 8009abe:	461a      	mov	r2, r3
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8009ac6:	2207      	movs	r2, #7
 8009ac8:	21ff      	movs	r1, #255	@ 0xff
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f003 f8be 	bl	800cc4c <VL53L0X_WrByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8009ada:	2200      	movs	r2, #0
 8009adc:	21be      	movs	r1, #190	@ 0xbe
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f003 f8b4 	bl	800cc4c <VL53L0X_WrByte>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8009aee:	2206      	movs	r2, #6
 8009af0:	21ff      	movs	r1, #255	@ 0xff
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f003 f8aa 	bl	800cc4c <VL53L0X_WrByte>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8009b02:	2209      	movs	r2, #9
 8009b04:	21cc      	movs	r1, #204	@ 0xcc
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f003 f8a0 	bl	800cc4c <VL53L0X_WrByte>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009b16:	2200      	movs	r2, #0
 8009b18:	21ff      	movs	r1, #255	@ 0xff
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f003 f896 	bl	800cc4c <VL53L0X_WrByte>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	21ff      	movs	r1, #255	@ 0xff
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f003 f88c 	bl	800cc4c <VL53L0X_WrByte>
 8009b34:	4603      	mov	r3, r0
 8009b36:	461a      	mov	r2, r3
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2100      	movs	r1, #0
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f003 f882 	bl	800cc4c <VL53L0X_WrByte>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	73fb      	strb	r3, [r7, #15]
 8009b52:	e056      	b.n	8009c02 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8009b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d120      	bne.n	8009b9e <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8009b5c:	787b      	ldrb	r3, [r7, #1]
 8009b5e:	2b04      	cmp	r3, #4
 8009b60:	d81b      	bhi.n	8009b9a <VL53L0X_SetGpioConfig+0x1ce>
 8009b62:	a201      	add	r2, pc, #4	@ (adr r2, 8009b68 <VL53L0X_SetGpioConfig+0x19c>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009b7d 	.word	0x08009b7d
 8009b6c:	08009b83 	.word	0x08009b83
 8009b70:	08009b89 	.word	0x08009b89
 8009b74:	08009b8f 	.word	0x08009b8f
 8009b78:	08009b95 	.word	0x08009b95
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73bb      	strb	r3, [r7, #14]
				break;
 8009b80:	e00d      	b.n	8009b9e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8009b82:	2301      	movs	r3, #1
 8009b84:	73bb      	strb	r3, [r7, #14]
				break;
 8009b86:	e00a      	b.n	8009b9e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	73bb      	strb	r3, [r7, #14]
				break;
 8009b8c:	e007      	b.n	8009b9e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	73bb      	strb	r3, [r7, #14]
				break;
 8009b92:	e004      	b.n	8009b9e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8009b94:	2304      	movs	r3, #4
 8009b96:	73bb      	strb	r3, [r7, #14]
				break;
 8009b98:	e001      	b.n	8009b9e <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8009b9a:	23f5      	movs	r3, #245	@ 0xf5
 8009b9c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8009b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d107      	bne.n	8009bb6 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	210a      	movs	r1, #10
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f003 f84d 	bl	800cc4c <VL53L0X_WrByte>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8009bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10f      	bne.n	8009bde <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009bbe:	7e3b      	ldrb	r3, [r7, #24]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d102      	bne.n	8009bca <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73bb      	strb	r3, [r7, #14]
 8009bc8:	e001      	b.n	8009bce <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8009bca:	2310      	movs	r3, #16
 8009bcc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	22ef      	movs	r2, #239	@ 0xef
 8009bd2:	2184      	movs	r1, #132	@ 0x84
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f003 f887 	bl	800cce8 <VL53L0X_UpdateByte>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8009bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d103      	bne.n	8009bee <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	787a      	ldrb	r2, [r7, #1]
 8009bea:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8009bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d105      	bne.n	8009c02 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f83d 	bl	8009c78 <VL53L0X_ClearInterruptMask>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop

08009c10 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	607a      	str	r2, [r7, #4]
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c20:	2300      	movs	r3, #0
 8009c22:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	461a      	mov	r2, r3
 8009c2a:	210e      	movs	r1, #14
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f003 f8b9 	bl	800cda4 <VL53L0X_RdWord>
 8009c32:	4603      	mov	r3, r0
 8009c34:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009c36:	8abb      	ldrh	r3, [r7, #20]
 8009c38:	045a      	lsls	r2, r3, #17
 8009c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009c74 <VL53L0X_GetInterruptThresholds+0x64>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8009c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10e      	bne.n	8009c68 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8009c4a:	f107 0314 	add.w	r3, r7, #20
 8009c4e:	461a      	mov	r2, r3
 8009c50:	210c      	movs	r1, #12
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f003 f8a6 	bl	800cda4 <VL53L0X_RdWord>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009c5c:	8abb      	ldrh	r3, [r7, #20]
 8009c5e:	045a      	lsls	r2, r3, #17
 8009c60:	4b04      	ldr	r3, [pc, #16]	@ (8009c74 <VL53L0X_GetInterruptThresholds+0x64>)
 8009c62:	4013      	ands	r3, r2
		*pThresholdHigh =
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	1ffe0000 	.word	0x1ffe0000

08009c78 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	210b      	movs	r1, #11
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f002 ffdc 	bl	800cc4c <VL53L0X_WrByte>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8009c98:	2200      	movs	r2, #0
 8009c9a:	210b      	movs	r1, #11
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f002 ffd5 	bl	800cc4c <VL53L0X_WrByte>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8009cac:	f107 030d 	add.w	r3, r7, #13
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	2113      	movs	r1, #19
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f003 f84b 	bl	800cd50 <VL53L0X_RdByte>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8009cca:	7b7b      	ldrb	r3, [r7, #13]
 8009ccc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d006      	beq.n	8009ce2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d803      	bhi.n	8009ce2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8009cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0d3      	beq.n	8009c8a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d901      	bls.n	8009cec <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009ce8:	23f4      	movs	r3, #244	@ 0xf4
 8009cea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8009d06:	f107 030e 	add.w	r3, r7, #14
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	2113      	movs	r1, #19
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f003 f81e 	bl	800cd50 <VL53L0X_RdByte>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
 8009d1a:	f003 0207 	and.w	r2, r3, #7
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	f003 0318 	and.w	r3, r3, #24
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8009d2c:	23fa      	movs	r3, #250	@ 0xfa
 8009d2e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	68b9      	ldr	r1, [r7, #8]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f000 fa03 	bl	800a15c <VL53L0X_perform_ref_spad_management>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8009d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8009d74:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8009d78:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8009d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d7e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8009d80:	f107 0308 	add.w	r3, r7, #8
 8009d84:	461a      	mov	r2, r3
 8009d86:	2128      	movs	r1, #40	@ 0x28
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f003 f80b 	bl	800cda4 <VL53L0X_RdWord>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8009d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d11e      	bne.n	8009dd8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8009d9a:	893b      	ldrh	r3, [r7, #8]
 8009d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8009da4:	893b      	ldrh	r3, [r7, #8]
 8009da6:	461a      	mov	r2, r3
 8009da8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	dd0b      	ble.n	8009dc8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009db0:	893a      	ldrh	r2, [r7, #8]
 8009db2:	897b      	ldrh	r3, [r7, #10]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	b21b      	sxth	r3, r3
 8009dba:	461a      	mov	r2, r3
					* 250;
 8009dbc:	23fa      	movs	r3, #250	@ 0xfa
 8009dbe:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	e007      	b.n	8009dd8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009dc8:	893b      	ldrh	r3, [r7, #8]
 8009dca:	b21b      	sxth	r3, r3
 8009dcc:	461a      	mov	r2, r3
 8009dce:	23fa      	movs	r3, #250	@ 0xfa
 8009dd0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b08b      	sub	sp, #44	@ 0x2c
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8009df2:	2308      	movs	r3, #8
 8009df4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009e00:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e0a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	69ba      	ldr	r2, [r7, #24]
 8009e10:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e14:	69b9      	ldr	r1, [r7, #24]
 8009e16:	fb01 f202 	mul.w	r2, r1, r2
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e22:	e030      	b.n	8009e86 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2c:	4413      	add	r3, r2
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8009e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d11e      	bne.n	8009e78 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8009e3a:	7ffa      	ldrb	r2, [r7, #31]
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	fa42 f303 	asr.w	r3, r2, r3
 8009e42:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8009e48:	e016      	b.n	8009e78 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8009e4a:	7ffb      	ldrb	r3, [r7, #31]
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <get_next_good_spad+0x88>
				success = 1;
 8009e54:	2301      	movs	r3, #1
 8009e56:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	fb03 f202 	mul.w	r2, r3, r2
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	4413      	add	r3, r2
 8009e64:	461a      	mov	r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	601a      	str	r2, [r3, #0]
				break;
 8009e6a:	e009      	b.n	8009e80 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8009e6c:	7ffb      	ldrb	r3, [r7, #31]
 8009e6e:	085b      	lsrs	r3, r3, #1
 8009e70:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	3301      	adds	r3, #1
 8009e76:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8009e78:	6a3a      	ldr	r2, [r7, #32]
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d3e4      	bcc.n	8009e4a <get_next_good_spad+0x66>
				coarseIndex++) {
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	3301      	adds	r3, #1
 8009e84:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d202      	bcs.n	8009e94 <get_next_good_spad+0xb0>
 8009e8e:	7fbb      	ldrb	r3, [r7, #30]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d0c7      	beq.n	8009e24 <get_next_good_spad+0x40>
		}
	}
}
 8009e94:	bf00      	nop
 8009e96:	372c      	adds	r7, #44	@ 0x2c
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	099b      	lsrs	r3, r3, #6
 8009eb0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8009eb2:	4a07      	ldr	r2, [pc, #28]	@ (8009ed0 <is_aperture+0x30>)
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <is_aperture+0x22>
		isAperture = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	200402bc 	.word	0x200402bc

08009ed4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b089      	sub	sp, #36	@ 0x24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009ee4:	2308      	movs	r3, #8
 8009ee6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009efa:	69b9      	ldr	r1, [r7, #24]
 8009efc:	fb01 f202 	mul.w	r2, r1, r2
 8009f00:	1a9b      	subs	r3, r3, r2
 8009f02:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d302      	bcc.n	8009f12 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009f0c:	23ce      	movs	r3, #206	@ 0xce
 8009f0e:	77fb      	strb	r3, [r7, #31]
 8009f10:	e010      	b.n	8009f34 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	4413      	add	r3, r2
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	b25a      	sxtb	r2, r3
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	fa01 f303 	lsl.w	r3, r1, r3
 8009f24:	b25b      	sxtb	r3, r3
 8009f26:	4313      	orrs	r3, r2
 8009f28:	b259      	sxtb	r1, r3
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	4413      	add	r3, r2
 8009f30:	b2ca      	uxtb	r2, r1
 8009f32:	701a      	strb	r2, [r3, #0]

	return status;
 8009f34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3724      	adds	r7, #36	@ 0x24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8009f4e:	2306      	movs	r3, #6
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	21b0      	movs	r1, #176	@ 0xb0
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f002 fe1d 	bl	800cb94 <VL53L0X_WriteMulti>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8009f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8009f74:	2306      	movs	r3, #6
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	21b0      	movs	r1, #176	@ 0xb0
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f002 fe3a 	bl	800cbf4 <VL53L0X_ReadMulti>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8009f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08c      	sub	sp, #48	@ 0x30
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	607a      	str	r2, [r7, #4]
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fa8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fac:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009fae:	2300      	movs	r3, #0
 8009fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fb2:	e02b      	b.n	800a00c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009fb4:	f107 031c 	add.w	r3, r7, #28
 8009fb8:	6a3a      	ldr	r2, [r7, #32]
 8009fba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff ff11 	bl	8009de4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc8:	d103      	bne.n	8009fd2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009fca:	23ce      	movs	r3, #206	@ 0xce
 8009fcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8009fd0:	e020      	b.n	800a014 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd8:	4413      	add	r3, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff ff60 	bl	8009ea0 <is_aperture>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	7afb      	ldrb	r3, [r7, #11]
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d003      	beq.n	8009ff2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009fea:	23ce      	movs	r3, #206	@ 0xce
 8009fec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8009ff0:	e010      	b.n	800a014 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009ff6:	6a3a      	ldr	r2, [r7, #32]
 8009ff8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ffa:	6838      	ldr	r0, [r7, #0]
 8009ffc:	f7ff ff6a 	bl	8009ed4 <enable_spad_bit>
		currentSpad++;
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	3301      	adds	r3, #1
 800a004:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	3301      	adds	r3, #1
 800a00a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a00c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a00e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a010:	429a      	cmp	r2, r3
 800a012:	d3cf      	bcc.n	8009fb4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800a014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a016:	6a3a      	ldr	r2, [r7, #32]
 800a018:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800a01a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d106      	bne.n	800a030 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff ff8d 	bl	8009f44 <set_ref_spad_map>
 800a02a:	4603      	mov	r3, r0
 800a02c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800a030:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a034:	2b00      	cmp	r3, #0
 800a036:	d121      	bne.n	800a07c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800a038:	f107 0314 	add.w	r3, r7, #20
 800a03c:	4619      	mov	r1, r3
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7ff ff93 	bl	8009f6a <get_ref_spad_map>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800a04e:	e011      	b.n	800a074 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a054:	4413      	add	r3, r2
 800a056:	781a      	ldrb	r2, [r3, #0]
 800a058:	f107 0114 	add.w	r1, r7, #20
 800a05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05e:	440b      	add	r3, r1
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	429a      	cmp	r2, r3
 800a064:	d003      	beq.n	800a06e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a066:	23ce      	movs	r3, #206	@ 0xce
 800a068:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 800a06c:	e006      	b.n	800a07c <enable_ref_spads+0xec>
			}
			i++;
 800a06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a070:	3301      	adds	r3, #1
 800a072:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 800a074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a078:	429a      	cmp	r2, r3
 800a07a:	d3e9      	bcc.n	800a050 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800a07c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a080:	4618      	mov	r0, r3
 800a082:	3730      	adds	r7, #48	@ 0x30
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08a      	sub	sp, #40	@ 0x28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a092:	2300      	movs	r3, #0
 800a094:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a0a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800a0a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d107      	bne.n	800a0c0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800a0b0:	22c0      	movs	r2, #192	@ 0xc0
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f002 fdc9 	bl	800cc4c <VL53L0X_WrByte>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800a0c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d108      	bne.n	800a0da <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800a0c8:	f107 0308 	add.w	r3, r7, #8
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff fc4c 	bl	800996c <VL53L0X_PerformSingleRangingMeasurement>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800a0da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d107      	bne.n	800a0f2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	21ff      	movs	r1, #255	@ 0xff
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f002 fdb0 	bl	800cc4c <VL53L0X_WrByte>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 800a0f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d107      	bne.n	800a10a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	21b6      	movs	r1, #182	@ 0xb6
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f002 fe50 	bl	800cda4 <VL53L0X_RdWord>
 800a104:	4603      	mov	r3, r0
 800a106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800a10a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d107      	bne.n	800a122 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a112:	2200      	movs	r2, #0
 800a114:	21ff      	movs	r1, #255	@ 0xff
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f002 fd98 	bl	800cc4c <VL53L0X_WrByte>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800a122:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a126:	2b00      	cmp	r3, #0
 800a128:	d112      	bne.n	800a150 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a12a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a12e:	461a      	mov	r2, r3
 800a130:	2101      	movs	r1, #1
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f002 fd8a 	bl	800cc4c <VL53L0X_WrByte>
 800a138:	4603      	mov	r3, r0
 800a13a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800a13e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a142:	2b00      	cmp	r3, #0
 800a144:	d104      	bne.n	800a150 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a14c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 800a150:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a154:	4618      	mov	r0, r3
 800a156:	3728      	adds	r7, #40	@ 0x28
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800a15c:	b590      	push	{r4, r7, lr}
 800a15e:	b09d      	sub	sp, #116	@ 0x74
 800a160:	af06      	add	r7, sp, #24
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a168:	2300      	movs	r3, #0
 800a16a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800a16e:	23b4      	movs	r3, #180	@ 0xb4
 800a170:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 800a174:	2303      	movs	r3, #3
 800a176:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 800a178:	232c      	movs	r3, #44	@ 0x2c
 800a17a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800a188:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800a18c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 800a196:	2306      	movs	r3, #6
 800a198:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 800a1c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1c6:	e009      	b.n	800a1dc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a1d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1d8:	3301      	adds	r3, #1
 800a1da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d3f1      	bcc.n	800a1c8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	21ff      	movs	r1, #255	@ 0xff
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f002 fd2f 	bl	800cc4c <VL53L0X_WrByte>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800a1f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d107      	bne.n	800a20c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	214f      	movs	r1, #79	@ 0x4f
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f002 fd23 	bl	800cc4c <VL53L0X_WrByte>
 800a206:	4603      	mov	r3, r0
 800a208:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a20c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a210:	2b00      	cmp	r3, #0
 800a212:	d107      	bne.n	800a224 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800a214:	222c      	movs	r2, #44	@ 0x2c
 800a216:	214e      	movs	r1, #78	@ 0x4e
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f002 fd17 	bl	800cc4c <VL53L0X_WrByte>
 800a21e:	4603      	mov	r3, r0
 800a220:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a224:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d107      	bne.n	800a23c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a22c:	2200      	movs	r2, #0
 800a22e:	21ff      	movs	r1, #255	@ 0xff
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f002 fd0b 	bl	800cc4c <VL53L0X_WrByte>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800a23c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a240:	2b00      	cmp	r3, #0
 800a242:	d109      	bne.n	800a258 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800a244:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800a248:	461a      	mov	r2, r3
 800a24a:	21b6      	movs	r1, #182	@ 0xb6
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f002 fcfd 	bl	800cc4c <VL53L0X_WrByte>
 800a252:	4603      	mov	r3, r0
 800a254:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800a258:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d107      	bne.n	800a270 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800a260:	2200      	movs	r2, #0
 800a262:	2180      	movs	r1, #128	@ 0x80
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f002 fcf1 	bl	800cc4c <VL53L0X_WrByte>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800a270:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10a      	bne.n	800a28e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800a278:	f107 0210 	add.w	r2, r7, #16
 800a27c:	f107 0111 	add.w	r1, r7, #17
 800a280:	2300      	movs	r3, #0
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 fbbb 	bl	800a9fe <VL53L0X_perform_ref_calibration>
 800a288:	4603      	mov	r3, r0
 800a28a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800a28e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a292:	2b00      	cmp	r3, #0
 800a294:	d121      	bne.n	800a2da <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 800a29a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a29c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 800a2a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2a4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 800a2b2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800a2b6:	f107 0218 	add.w	r2, r7, #24
 800a2ba:	9204      	str	r2, [sp, #16]
 800a2bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2be:	9203      	str	r2, [sp, #12]
 800a2c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a2c2:	9202      	str	r2, [sp, #8]
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	4623      	mov	r3, r4
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f7ff fe5e 	bl	8009f90 <enable_ref_spads>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2da:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d174      	bne.n	800a3cc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 800a2e6:	f107 0312 	add.w	r3, r7, #18
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff fecb 	bl	800a088 <perform_ref_signal_measurement>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800a2f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d161      	bne.n	800a3c4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800a300:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800a302:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a304:	429a      	cmp	r2, r3
 800a306:	d25d      	bcs.n	800a3c4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800a308:	2300      	movs	r3, #0
 800a30a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a30c:	e009      	b.n	800a322 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a312:	4413      	add	r3, r2
 800a314:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800a318:	2200      	movs	r2, #0
 800a31a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800a31c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a31e:	3301      	adds	r3, #1
 800a320:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a326:	429a      	cmp	r2, r3
 800a328:	d3f1      	bcc.n	800a30e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800a32a:	e002      	b.n	800a332 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800a32c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a32e:	3301      	adds	r3, #1
 800a330:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800a332:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800a336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a338:	4413      	add	r3, r2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff fdb0 	bl	8009ea0 <is_aperture>
 800a340:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800a342:	2b00      	cmp	r3, #0
 800a344:	d103      	bne.n	800a34e <VL53L0X_perform_ref_spad_management+0x1f2>
 800a346:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d3ee      	bcc.n	800a32c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800a34e:	2301      	movs	r3, #1
 800a350:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 800a352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a354:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 800a362:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800a366:	f107 0218 	add.w	r2, r7, #24
 800a36a:	9204      	str	r2, [sp, #16]
 800a36c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a36e:	9203      	str	r2, [sp, #12]
 800a370:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a372:	9202      	str	r2, [sp, #8]
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	4623      	mov	r3, r4
 800a37c:	4602      	mov	r2, r0
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f7ff fe06 	bl	8009f90 <enable_ref_spads>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800a38a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d11b      	bne.n	800a3ca <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 800a396:	f107 0312 	add.w	r3, r7, #18
 800a39a:	4619      	mov	r1, r3
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f7ff fe73 	bl	800a088 <perform_ref_signal_measurement>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800a3a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10c      	bne.n	800a3ca <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800a3b0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800a3b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d208      	bcs.n	800a3ca <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 800a3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800a3c2:	e002      	b.n	800a3ca <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3c8:	e000      	b.n	800a3cc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800a3ca:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a3cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f040 80af 	bne.w	800a534 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800a3d6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800a3d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	f240 80aa 	bls.w	800a534 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800a3e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3e2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 800a3f0:	f107 031c 	add.w	r3, r7, #28
 800a3f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f003 fc4b 	bl	800dc92 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800a3fc:	8a7b      	ldrh	r3, [r7, #18]
 800a3fe:	461a      	mov	r2, r3
 800a400:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	bfb8      	it	lt
 800a408:	425b      	neglt	r3, r3
 800a40a:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 800a412:	e086      	b.n	800a522 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 800a41a:	f107 0314 	add.w	r3, r7, #20
 800a41e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a422:	f7ff fcdf 	bl	8009de4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42c:	d103      	bne.n	800a436 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a42e:	23ce      	movs	r3, #206	@ 0xce
 800a430:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 800a434:	e07e      	b.n	800a534 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800a436:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	4413      	add	r3, r2
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff fd2e 	bl	8009ea0 <is_aperture>
 800a444:	4603      	mov	r3, r0
 800a446:	461a      	mov	r2, r3
 800a448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d003      	beq.n	800a456 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800a44e:	2301      	movs	r3, #1
 800a450:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 800a454:	e06e      	b.n	800a534 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800a456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a458:	3301      	adds	r3, #1
 800a45a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 800a466:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff fd32 	bl	8009ed4 <enable_spad_bit>
 800a470:	4603      	mov	r3, r0
 800a472:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800a476:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10c      	bne.n	800a498 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800a47e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a480:	3301      	adds	r3, #1
 800a482:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 800a48a:	4619      	mov	r1, r3
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7ff fd59 	bl	8009f44 <set_ref_spad_map>
 800a492:	4603      	mov	r3, r0
 800a494:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800a498:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d146      	bne.n	800a52e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800a4a0:	f107 0312 	add.w	r3, r7, #18
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7ff fdee 	bl	800a088 <perform_ref_signal_measurement>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800a4b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d13b      	bne.n	800a532 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800a4ba:	8a7b      	ldrh	r3, [r7, #18]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	bfb8      	it	lt
 800a4c6:	425b      	neglt	r3, r3
 800a4c8:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 800a4ca:	8a7b      	ldrh	r3, [r7, #18]
 800a4cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d21c      	bcs.n	800a50c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800a4d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d914      	bls.n	800a504 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800a4da:	f107 031c 	add.w	r3, r7, #28
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7ff fd2f 	bl	8009f44 <set_ref_spad_map>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 800a4f2:	f107 011c 	add.w	r1, r7, #28
 800a4f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f003 fbca 	bl	800dc92 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800a4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a500:	3b01      	subs	r3, #1
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 800a504:	2301      	movs	r3, #1
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e00a      	b.n	800a522 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800a50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50e:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800a516:	f107 031c 	add.w	r3, r7, #28
 800a51a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a51c:	4618      	mov	r0, r3
 800a51e:	f003 fbb8 	bl	800dc92 <memcpy>
		while (!complete) {
 800a522:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a526:	2b00      	cmp	r3, #0
 800a528:	f43f af74 	beq.w	800a414 <VL53L0X_perform_ref_spad_management+0x2b8>
 800a52c:	e002      	b.n	800a534 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a52e:	bf00      	nop
 800a530:	e000      	b.n	800a534 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a532:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a534:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d115      	bne.n	800a568 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a540:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800a548:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	b2da      	uxtb	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	781a      	ldrb	r2, [r3, #0]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800a568:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	375c      	adds	r7, #92	@ 0x5c
 800a570:	46bd      	mov	sp, r7
 800a572:	bd90      	pop	{r4, r7, pc}

0800a574 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800a574:	b590      	push	{r4, r7, lr}
 800a576:	b093      	sub	sp, #76	@ 0x4c
 800a578:	af06      	add	r7, sp, #24
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a582:	2300      	movs	r3, #0
 800a584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 800a58c:	23b4      	movs	r3, #180	@ 0xb4
 800a58e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 800a592:	2306      	movs	r3, #6
 800a594:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800a596:	232c      	movs	r3, #44	@ 0x2c
 800a598:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a59a:	2201      	movs	r2, #1
 800a59c:	21ff      	movs	r1, #255	@ 0xff
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f002 fb54 	bl	800cc4c <VL53L0X_WrByte>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a5aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d107      	bne.n	800a5c2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	214f      	movs	r1, #79	@ 0x4f
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f002 fb48 	bl	800cc4c <VL53L0X_WrByte>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a5c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d107      	bne.n	800a5da <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800a5ca:	222c      	movs	r2, #44	@ 0x2c
 800a5cc:	214e      	movs	r1, #78	@ 0x4e
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f002 fb3c 	bl	800cc4c <VL53L0X_WrByte>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a5da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d107      	bne.n	800a5f2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	21ff      	movs	r1, #255	@ 0xff
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f002 fb30 	bl	800cc4c <VL53L0X_WrByte>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a5f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d109      	bne.n	800a60e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800a5fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a5fe:	461a      	mov	r2, r3
 800a600:	21b6      	movs	r1, #182	@ 0xb6
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f002 fb22 	bl	800cc4c <VL53L0X_WrByte>
 800a608:	4603      	mov	r3, r0
 800a60a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800a60e:	2300      	movs	r3, #0
 800a610:	627b      	str	r3, [r7, #36]	@ 0x24
 800a612:	e009      	b.n	800a628 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	4413      	add	r3, r2
 800a61a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800a61e:	2200      	movs	r2, #0
 800a620:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a624:	3301      	adds	r3, #1
 800a626:	627b      	str	r3, [r7, #36]	@ 0x24
 800a628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d3f1      	bcc.n	800a614 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d011      	beq.n	800a65a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a636:	e002      	b.n	800a63e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800a638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63a:	3301      	adds	r3, #1
 800a63c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a63e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800a642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a644:	4413      	add	r3, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff fc2a 	bl	8009ea0 <is_aperture>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d103      	bne.n	800a65a <VL53L0X_set_reference_spads+0xe6>
 800a652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	429a      	cmp	r2, r3
 800a658:	d3ee      	bcc.n	800a638 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 800a666:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a66a:	79f9      	ldrb	r1, [r7, #7]
 800a66c:	f107 0214 	add.w	r2, r7, #20
 800a670:	9204      	str	r2, [sp, #16]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	9203      	str	r2, [sp, #12]
 800a676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a678:	9202      	str	r2, [sp, #8]
 800a67a:	9301      	str	r3, [sp, #4]
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	4623      	mov	r3, r4
 800a682:	4602      	mov	r2, r0
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7ff fc83 	bl	8009f90 <enable_ref_spads>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800a690:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10c      	bne.n	800a6b2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	79fa      	ldrb	r2, [r7, #7]
 800a6ae:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800a6b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3734      	adds	r7, #52	@ 0x34
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd90      	pop	{r4, r7, pc}

0800a6be <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a6d6:	78fb      	ldrb	r3, [r7, #3]
 800a6d8:	f043 0301 	orr.w	r3, r3, #1
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	461a      	mov	r2, r3
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f002 fab2 	bl	800cc4c <VL53L0X_WrByte>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800a6ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d104      	bne.n	800a6fe <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f9bf 	bl	800aa78 <VL53L0X_measurement_poll_for_completion>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a6fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d105      	bne.n	800a712 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a706:	2100      	movs	r1, #0
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7ff fab5 	bl	8009c78 <VL53L0X_ClearInterruptMask>
 800a70e:	4603      	mov	r3, r0
 800a710:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800a71a:	2200      	movs	r2, #0
 800a71c:	2100      	movs	r1, #0
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f002 fa94 	bl	800cc4c <VL53L0X_WrByte>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]

	return Status;
 800a728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	4608      	mov	r0, r1
 800a73e:	4611      	mov	r1, r2
 800a740:	461a      	mov	r2, r3
 800a742:	4603      	mov	r3, r0
 800a744:	70fb      	strb	r3, [r7, #3]
 800a746:	460b      	mov	r3, r1
 800a748:	70bb      	strb	r3, [r7, #2]
 800a74a:	4613      	mov	r3, r2
 800a74c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a74e:	2300      	movs	r3, #0
 800a750:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a756:	2201      	movs	r2, #1
 800a758:	21ff      	movs	r1, #255	@ 0xff
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f002 fa76 	bl	800cc4c <VL53L0X_WrByte>
 800a760:	4603      	mov	r3, r0
 800a762:	461a      	mov	r2, r3
 800a764:	7bfb      	ldrb	r3, [r7, #15]
 800a766:	4313      	orrs	r3, r2
 800a768:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a76a:	2200      	movs	r2, #0
 800a76c:	2100      	movs	r1, #0
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f002 fa6c 	bl	800cc4c <VL53L0X_WrByte>
 800a774:	4603      	mov	r3, r0
 800a776:	461a      	mov	r2, r3
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a77e:	2200      	movs	r2, #0
 800a780:	21ff      	movs	r1, #255	@ 0xff
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f002 fa62 	bl	800cc4c <VL53L0X_WrByte>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
 800a78e:	4313      	orrs	r3, r2
 800a790:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800a792:	78fb      	ldrb	r3, [r7, #3]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d01e      	beq.n	800a7d6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800a798:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d009      	beq.n	800a7b4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	21cb      	movs	r1, #203	@ 0xcb
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f002 fad3 	bl	800cd50 <VL53L0X_RdByte>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a7b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d02a      	beq.n	800a812 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800a7bc:	f107 030e 	add.w	r3, r7, #14
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	21ee      	movs	r1, #238	@ 0xee
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f002 fac3 	bl	800cd50 <VL53L0X_RdByte>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	73fb      	strb	r3, [r7, #15]
 800a7d4:	e01d      	b.n	800a812 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800a7d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a7de:	78bb      	ldrb	r3, [r7, #2]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	21cb      	movs	r1, #203	@ 0xcb
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f002 fa31 	bl	800cc4c <VL53L0X_WrByte>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a7f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00a      	beq.n	800a812 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a7fc:	787b      	ldrb	r3, [r7, #1]
 800a7fe:	2280      	movs	r2, #128	@ 0x80
 800a800:	21ee      	movs	r1, #238	@ 0xee
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f002 fa70 	bl	800cce8 <VL53L0X_UpdateByte>
 800a808:	4603      	mov	r3, r0
 800a80a:	461a      	mov	r2, r3
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
 800a80e:	4313      	orrs	r3, r2
 800a810:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a812:	2201      	movs	r2, #1
 800a814:	21ff      	movs	r1, #255	@ 0xff
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f002 fa18 	bl	800cc4c <VL53L0X_WrByte>
 800a81c:	4603      	mov	r3, r0
 800a81e:	461a      	mov	r2, r3
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	4313      	orrs	r3, r2
 800a824:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a826:	2201      	movs	r2, #1
 800a828:	2100      	movs	r1, #0
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f002 fa0e 	bl	800cc4c <VL53L0X_WrByte>
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	4313      	orrs	r3, r2
 800a838:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a83a:	2200      	movs	r2, #0
 800a83c:	21ff      	movs	r1, #255	@ 0xff
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f002 fa04 	bl	800cc4c <VL53L0X_WrByte>
 800a844:	4603      	mov	r3, r0
 800a846:	461a      	mov	r2, r3
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	f023 0310 	bic.w	r3, r3, #16
 800a854:	b2da      	uxtb	r2, r3
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	701a      	strb	r2, [r3, #0]

	return Status;
 800a85a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b08a      	sub	sp, #40	@ 0x28
 800a86a:	af04      	add	r7, sp, #16
 800a86c:	60f8      	str	r0, [r7, #12]
 800a86e:	60b9      	str	r1, [r7, #8]
 800a870:	4611      	mov	r1, r2
 800a872:	461a      	mov	r2, r3
 800a874:	460b      	mov	r3, r1
 800a876:	71fb      	strb	r3, [r7, #7]
 800a878:	4613      	mov	r3, r2
 800a87a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a890:	79bb      	ldrb	r3, [r7, #6]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a89c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a89e:	2201      	movs	r2, #1
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f002 f9d2 	bl	800cc4c <VL53L0X_WrByte>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a8ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a8b4:	2140      	movs	r1, #64	@ 0x40
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff ff01 	bl	800a6be <VL53L0X_perform_single_ref_calibration>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a8c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d115      	bne.n	800a8f4 <VL53L0X_perform_vhv_calibration+0x8e>
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d112      	bne.n	800a8f4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a8ce:	7d39      	ldrb	r1, [r7, #20]
 800a8d0:	7d7a      	ldrb	r2, [r7, #21]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	9303      	str	r3, [sp, #12]
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	9302      	str	r3, [sp, #8]
 800a8da:	f107 0313 	add.w	r3, r7, #19
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f7ff ff23 	bl	800a734 <VL53L0X_ref_calibration_io>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	75fb      	strb	r3, [r7, #23]
 800a8f2:	e002      	b.n	800a8fa <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d112      	bne.n	800a928 <VL53L0X_perform_vhv_calibration+0xc2>
 800a902:	79bb      	ldrb	r3, [r7, #6]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00f      	beq.n	800a928 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a908:	7dbb      	ldrb	r3, [r7, #22]
 800a90a:	461a      	mov	r2, r3
 800a90c:	2101      	movs	r1, #1
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f002 f99c 	bl	800cc4c <VL53L0X_WrByte>
 800a914:	4603      	mov	r3, r0
 800a916:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d103      	bne.n	800a928 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	7dba      	ldrb	r2, [r7, #22]
 800a924:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800a928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08a      	sub	sp, #40	@ 0x28
 800a938:	af04      	add	r7, sp, #16
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	4611      	mov	r1, r2
 800a940:	461a      	mov	r2, r3
 800a942:	460b      	mov	r3, r1
 800a944:	71fb      	strb	r3, [r7, #7]
 800a946:	4613      	mov	r3, r2
 800a948:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a94a:	2300      	movs	r3, #0
 800a94c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a95a:	79bb      	ldrb	r3, [r7, #6]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d003      	beq.n	800a968 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a966:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a968:	2202      	movs	r2, #2
 800a96a:	2101      	movs	r1, #1
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f002 f96d 	bl	800cc4c <VL53L0X_WrByte>
 800a972:	4603      	mov	r3, r0
 800a974:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a976:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d105      	bne.n	800a98a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a97e:	2100      	movs	r1, #0
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f7ff fe9c 	bl	800a6be <VL53L0X_perform_single_ref_calibration>
 800a986:	4603      	mov	r3, r0
 800a988:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a98a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d115      	bne.n	800a9be <VL53L0X_perform_phase_calibration+0x8a>
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d112      	bne.n	800a9be <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a998:	7d39      	ldrb	r1, [r7, #20]
 800a99a:	7d7a      	ldrb	r2, [r7, #21]
 800a99c:	2301      	movs	r3, #1
 800a99e:	9303      	str	r3, [sp, #12]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9302      	str	r3, [sp, #8]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	f107 0313 	add.w	r3, r7, #19
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff febe 	bl	800a734 <VL53L0X_ref_calibration_io>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	75fb      	strb	r3, [r7, #23]
 800a9bc:	e002      	b.n	800a9c4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a9c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d112      	bne.n	800a9f2 <VL53L0X_perform_phase_calibration+0xbe>
 800a9cc:	79bb      	ldrb	r3, [r7, #6]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00f      	beq.n	800a9f2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a9d2:	7dbb      	ldrb	r3, [r7, #22]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f002 f937 	bl	800cc4c <VL53L0X_WrByte>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a9e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d103      	bne.n	800a9f2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	7dba      	ldrb	r2, [r7, #22]
 800a9ee:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800a9f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b086      	sub	sp, #24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
 800aa0a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800aa1a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800aa1c:	78fa      	ldrb	r2, [r7, #3]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff ff1f 	bl	800a866 <VL53L0X_perform_vhv_calibration>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800aa2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d107      	bne.n	800aa44 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800aa34:	78fa      	ldrb	r2, [r7, #3]
 800aa36:	2300      	movs	r3, #0
 800aa38:	6879      	ldr	r1, [r7, #4]
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7ff ff7a 	bl	800a934 <VL53L0X_perform_phase_calibration>
 800aa40:	4603      	mov	r3, r0
 800aa42:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800aa44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10f      	bne.n	800aa6c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800aa4c:	7dbb      	ldrb	r3, [r7, #22]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	2101      	movs	r1, #1
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f002 f8fa 	bl	800cc4c <VL53L0X_WrByte>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800aa5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d103      	bne.n	800aa6c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	7dba      	ldrb	r2, [r7, #22]
 800aa68:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800aa6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800aa8c:	f107 030f 	add.w	r3, r7, #15
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7fe fe0e 	bl	80096b4 <VL53L0X_GetMeasurementDataReady>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800aa9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d110      	bne.n	800aac6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d00f      	beq.n	800aaca <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	3301      	adds	r3, #1
 800aaae:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800aab6:	d302      	bcc.n	800aabe <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800aab8:	23f9      	movs	r3, #249	@ 0xf9
 800aaba:	75fb      	strb	r3, [r7, #23]
			break;
 800aabc:	e006      	b.n	800aacc <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f002 f9e2 	bl	800ce88 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800aac4:	e7e2      	b.n	800aa8c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800aac6:	bf00      	nop
 800aac8:	e000      	b.n	800aacc <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800aaca:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800aacc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	3301      	adds	r3, #1
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800ab0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ab0e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800ab10:	e002      	b.n	800ab18 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	089b      	lsrs	r3, r3, #2
 800ab16:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d8f8      	bhi.n	800ab12 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800ab20:	e017      	b.n	800ab52 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	4413      	add	r3, r2
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d30b      	bcc.n	800ab46 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	4413      	add	r3, r2
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	085b      	lsrs	r3, r3, #1
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	4413      	add	r3, r2
 800ab42:	60fb      	str	r3, [r7, #12]
 800ab44:	e002      	b.n	800ab4c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	085b      	lsrs	r3, r3, #1
 800ab4a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	089b      	lsrs	r3, r3, #2
 800ab50:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e4      	bne.n	800ab22 <VL53L0X_isqrt+0x24>
	}

	return res;
 800ab58:	68fb      	ldr	r3, [r7, #12]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b086      	sub	sp, #24
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800ab72:	2200      	movs	r2, #0
 800ab74:	2183      	movs	r1, #131	@ 0x83
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f002 f868 	bl	800cc4c <VL53L0X_WrByte>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	461a      	mov	r2, r3
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800ab86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d11e      	bne.n	800abcc <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800ab92:	f107 030f 	add.w	r3, r7, #15
 800ab96:	461a      	mov	r2, r3
 800ab98:	2183      	movs	r1, #131	@ 0x83
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f002 f8d8 	bl	800cd50 <VL53L0X_RdByte>
 800aba0:	4603      	mov	r3, r0
 800aba2:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10a      	bne.n	800abc0 <VL53L0X_device_read_strobe+0x5a>
 800abaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	3301      	adds	r3, #1
 800abb6:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800abbe:	d3e8      	bcc.n	800ab92 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800abc6:	d301      	bcc.n	800abcc <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800abc8:	23f9      	movs	r3, #249	@ 0xf9
 800abca:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800abcc:	2201      	movs	r2, #1
 800abce:	2183      	movs	r1, #131	@ 0x83
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f002 f83b 	bl	800cc4c <VL53L0X_WrByte>
 800abd6:	4603      	mov	r3, r0
 800abd8:	461a      	mov	r2, r3
 800abda:	7dfb      	ldrb	r3, [r7, #23]
 800abdc:	4313      	orrs	r3, r2
 800abde:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800abe0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b098      	sub	sp, #96	@ 0x60
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800ac1c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800ac20:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800ac38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ac3c:	2b07      	cmp	r3, #7
 800ac3e:	f000 8408 	beq.w	800b452 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ac42:	2201      	movs	r2, #1
 800ac44:	2180      	movs	r1, #128	@ 0x80
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f002 f800 	bl	800cc4c <VL53L0X_WrByte>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	461a      	mov	r2, r3
 800ac50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac54:	4313      	orrs	r3, r2
 800ac56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	21ff      	movs	r1, #255	@ 0xff
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f001 fff4 	bl	800cc4c <VL53L0X_WrByte>
 800ac64:	4603      	mov	r3, r0
 800ac66:	461a      	mov	r2, r3
 800ac68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ac72:	2200      	movs	r2, #0
 800ac74:	2100      	movs	r1, #0
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f001 ffe8 	bl	800cc4c <VL53L0X_WrByte>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac84:	4313      	orrs	r3, r2
 800ac86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800ac8a:	2206      	movs	r2, #6
 800ac8c:	21ff      	movs	r1, #255	@ 0xff
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f001 ffdc 	bl	800cc4c <VL53L0X_WrByte>
 800ac94:	4603      	mov	r3, r0
 800ac96:	461a      	mov	r2, r3
 800ac98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800aca2:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800aca6:	461a      	mov	r2, r3
 800aca8:	2183      	movs	r1, #131	@ 0x83
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f002 f850 	bl	800cd50 <VL53L0X_RdByte>
 800acb0:	4603      	mov	r3, r0
 800acb2:	461a      	mov	r2, r3
 800acb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800acb8:	4313      	orrs	r3, r2
 800acba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800acbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800acc2:	f043 0304 	orr.w	r3, r3, #4
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	461a      	mov	r2, r3
 800acca:	2183      	movs	r1, #131	@ 0x83
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 ffbd 	bl	800cc4c <VL53L0X_WrByte>
 800acd2:	4603      	mov	r3, r0
 800acd4:	461a      	mov	r2, r3
 800acd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800acda:	4313      	orrs	r3, r2
 800acdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800ace0:	2207      	movs	r2, #7
 800ace2:	21ff      	movs	r1, #255	@ 0xff
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f001 ffb1 	bl	800cc4c <VL53L0X_WrByte>
 800acea:	4603      	mov	r3, r0
 800acec:	461a      	mov	r2, r3
 800acee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800acf2:	4313      	orrs	r3, r2
 800acf4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800acf8:	2201      	movs	r2, #1
 800acfa:	2181      	movs	r1, #129	@ 0x81
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f001 ffa5 	bl	800cc4c <VL53L0X_WrByte>
 800ad02:	4603      	mov	r3, r0
 800ad04:	461a      	mov	r2, r3
 800ad06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f002 f8b9 	bl	800ce88 <VL53L0X_PollingDelay>
 800ad16:	4603      	mov	r3, r0
 800ad18:	461a      	mov	r2, r3
 800ad1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ad24:	2201      	movs	r2, #1
 800ad26:	2180      	movs	r1, #128	@ 0x80
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f001 ff8f 	bl	800cc4c <VL53L0X_WrByte>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	461a      	mov	r2, r3
 800ad32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad36:	4313      	orrs	r3, r2
 800ad38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 8098 	beq.w	800ae78 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800ad48:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ad4c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f040 8091 	bne.w	800ae78 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800ad56:	226b      	movs	r2, #107	@ 0x6b
 800ad58:	2194      	movs	r1, #148	@ 0x94
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f001 ff76 	bl	800cc4c <VL53L0X_WrByte>
 800ad60:	4603      	mov	r3, r0
 800ad62:	461a      	mov	r2, r3
 800ad64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff fef9 	bl	800ab66 <VL53L0X_device_read_strobe>
 800ad74:	4603      	mov	r3, r0
 800ad76:	461a      	mov	r2, r3
 800ad78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ad82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ad86:	461a      	mov	r2, r3
 800ad88:	2190      	movs	r1, #144	@ 0x90
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f002 f840 	bl	800ce10 <VL53L0X_RdDWord>
 800ad90:	4603      	mov	r3, r0
 800ad92:	461a      	mov	r2, r3
 800ad94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada0:	0a1b      	lsrs	r3, r3, #8
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ada8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800adac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adae:	0bdb      	lsrs	r3, r3, #15
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800adba:	2224      	movs	r2, #36	@ 0x24
 800adbc:	2194      	movs	r1, #148	@ 0x94
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f001 ff44 	bl	800cc4c <VL53L0X_WrByte>
 800adc4:	4603      	mov	r3, r0
 800adc6:	461a      	mov	r2, r3
 800adc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800adcc:	4313      	orrs	r3, r2
 800adce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7ff fec7 	bl	800ab66 <VL53L0X_device_read_strobe>
 800add8:	4603      	mov	r3, r0
 800adda:	461a      	mov	r2, r3
 800addc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ade0:	4313      	orrs	r3, r2
 800ade2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ade6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800adea:	461a      	mov	r2, r3
 800adec:	2190      	movs	r1, #144	@ 0x90
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f002 f80e 	bl	800ce10 <VL53L0X_RdDWord>
 800adf4:	4603      	mov	r3, r0
 800adf6:	461a      	mov	r2, r3
 800adf8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800adfc:	4313      	orrs	r3, r2
 800adfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800ae02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae04:	0e1b      	lsrs	r3, r3, #24
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0c:	0c1b      	lsrs	r3, r3, #16
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800ae12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae14:	0a1b      	lsrs	r3, r3, #8
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800ae20:	2225      	movs	r2, #37	@ 0x25
 800ae22:	2194      	movs	r1, #148	@ 0x94
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f001 ff11 	bl	800cc4c <VL53L0X_WrByte>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae32:	4313      	orrs	r3, r2
 800ae34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff fe94 	bl	800ab66 <VL53L0X_device_read_strobe>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	461a      	mov	r2, r3
 800ae42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae46:	4313      	orrs	r3, r2
 800ae48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ae4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ae50:	461a      	mov	r2, r3
 800ae52:	2190      	movs	r1, #144	@ 0x90
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 ffdb 	bl	800ce10 <VL53L0X_RdDWord>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae62:	4313      	orrs	r3, r2
 800ae64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800ae68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6a:	0e1b      	lsrs	r3, r3, #24
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800ae70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae72:	0c1b      	lsrs	r3, r3, #16
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 8189 	beq.w	800b196 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ae84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae88:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f040 8182 	bne.w	800b196 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800ae92:	2202      	movs	r2, #2
 800ae94:	2194      	movs	r1, #148	@ 0x94
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f001 fed8 	bl	800cc4c <VL53L0X_WrByte>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aea4:	4313      	orrs	r3, r2
 800aea6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff fe5b 	bl	800ab66 <VL53L0X_device_read_strobe>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800aebe:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800aec2:	461a      	mov	r2, r3
 800aec4:	2190      	movs	r1, #144	@ 0x90
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f001 ff42 	bl	800cd50 <VL53L0X_RdByte>
 800aecc:	4603      	mov	r3, r0
 800aece:	461a      	mov	r2, r3
 800aed0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aed4:	4313      	orrs	r3, r2
 800aed6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800aeda:	227b      	movs	r2, #123	@ 0x7b
 800aedc:	2194      	movs	r1, #148	@ 0x94
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f001 feb4 	bl	800cc4c <VL53L0X_WrByte>
 800aee4:	4603      	mov	r3, r0
 800aee6:	461a      	mov	r2, r3
 800aee8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aeec:	4313      	orrs	r3, r2
 800aeee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff fe37 	bl	800ab66 <VL53L0X_device_read_strobe>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af00:	4313      	orrs	r3, r2
 800af02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800af06:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800af0a:	461a      	mov	r2, r3
 800af0c:	2190      	movs	r1, #144	@ 0x90
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f001 ff1e 	bl	800cd50 <VL53L0X_RdByte>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af1c:	4313      	orrs	r3, r2
 800af1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800af22:	2277      	movs	r2, #119	@ 0x77
 800af24:	2194      	movs	r1, #148	@ 0x94
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 fe90 	bl	800cc4c <VL53L0X_WrByte>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461a      	mov	r2, r3
 800af30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af34:	4313      	orrs	r3, r2
 800af36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7ff fe13 	bl	800ab66 <VL53L0X_device_read_strobe>
 800af40:	4603      	mov	r3, r0
 800af42:	461a      	mov	r2, r3
 800af44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af48:	4313      	orrs	r3, r2
 800af4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800af4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800af52:	461a      	mov	r2, r3
 800af54:	2190      	movs	r1, #144	@ 0x90
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f001 ff5a 	bl	800ce10 <VL53L0X_RdDWord>
 800af5c:	4603      	mov	r3, r0
 800af5e:	461a      	mov	r2, r3
 800af60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af64:	4313      	orrs	r3, r2
 800af66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800af6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6c:	0e5b      	lsrs	r3, r3, #25
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af74:	b2db      	uxtb	r3, r3
 800af76:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800af78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7a:	0c9b      	lsrs	r3, r3, #18
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af82:	b2db      	uxtb	r3, r3
 800af84:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af88:	0adb      	lsrs	r3, r3, #11
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af90:	b2db      	uxtb	r3, r3
 800af92:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	091b      	lsrs	r3, r3, #4
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800afb4:	2278      	movs	r2, #120	@ 0x78
 800afb6:	2194      	movs	r1, #148	@ 0x94
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 fe47 	bl	800cc4c <VL53L0X_WrByte>
 800afbe:	4603      	mov	r3, r0
 800afc0:	461a      	mov	r2, r3
 800afc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800afc6:	4313      	orrs	r3, r2
 800afc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff fdca 	bl	800ab66 <VL53L0X_device_read_strobe>
 800afd2:	4603      	mov	r3, r0
 800afd4:	461a      	mov	r2, r3
 800afd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800afda:	4313      	orrs	r3, r2
 800afdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800afe0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800afe4:	461a      	mov	r2, r3
 800afe6:	2190      	movs	r1, #144	@ 0x90
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f001 ff11 	bl	800ce10 <VL53L0X_RdDWord>
 800afee:	4603      	mov	r3, r0
 800aff0:	461a      	mov	r2, r3
 800aff2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aff6:	4313      	orrs	r3, r2
 800aff8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800affc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affe:	0f5b      	lsrs	r3, r3, #29
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b006:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800b008:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b00c:	4413      	add	r3, r2
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	0d9b      	lsrs	r3, r3, #22
 800b016:	b2db      	uxtb	r3, r3
 800b018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800b020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b022:	0bdb      	lsrs	r3, r3, #15
 800b024:	b2db      	uxtb	r3, r3
 800b026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	0a1b      	lsrs	r3, r3, #8
 800b032:	b2db      	uxtb	r3, r3
 800b034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800b03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03e:	085b      	lsrs	r3, r3, #1
 800b040:	b2db      	uxtb	r3, r3
 800b042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b046:	b2db      	uxtb	r3, r3
 800b048:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800b04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	019b      	lsls	r3, r3, #6
 800b050:	b2db      	uxtb	r3, r3
 800b052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b056:	b2db      	uxtb	r3, r3
 800b058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800b05c:	2279      	movs	r2, #121	@ 0x79
 800b05e:	2194      	movs	r1, #148	@ 0x94
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f001 fdf3 	bl	800cc4c <VL53L0X_WrByte>
 800b066:	4603      	mov	r3, r0
 800b068:	461a      	mov	r2, r3
 800b06a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b06e:	4313      	orrs	r3, r2
 800b070:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff fd76 	bl	800ab66 <VL53L0X_device_read_strobe>
 800b07a:	4603      	mov	r3, r0
 800b07c:	461a      	mov	r2, r3
 800b07e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b082:	4313      	orrs	r3, r2
 800b084:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b088:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b08c:	461a      	mov	r2, r3
 800b08e:	2190      	movs	r1, #144	@ 0x90
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f001 febd 	bl	800ce10 <VL53L0X_RdDWord>
 800b096:	4603      	mov	r3, r0
 800b098:	461a      	mov	r2, r3
 800b09a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a6:	0e9b      	lsrs	r3, r3, #26
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ae:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800b0b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b0b4:	4413      	add	r3, r2
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0bc:	0cdb      	lsrs	r3, r3, #19
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ca:	0b1b      	lsrs	r3, r3, #12
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d8:	095b      	lsrs	r3, r3, #5
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800b0f6:	227a      	movs	r2, #122	@ 0x7a
 800b0f8:	2194      	movs	r1, #148	@ 0x94
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f001 fda6 	bl	800cc4c <VL53L0X_WrByte>
 800b100:	4603      	mov	r3, r0
 800b102:	461a      	mov	r2, r3
 800b104:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b108:	4313      	orrs	r3, r2
 800b10a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff fd29 	bl	800ab66 <VL53L0X_device_read_strobe>
 800b114:	4603      	mov	r3, r0
 800b116:	461a      	mov	r2, r3
 800b118:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b11c:	4313      	orrs	r3, r2
 800b11e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b122:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b126:	461a      	mov	r2, r3
 800b128:	2190      	movs	r1, #144	@ 0x90
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 fe70 	bl	800ce10 <VL53L0X_RdDWord>
 800b130:	4603      	mov	r3, r0
 800b132:	461a      	mov	r2, r3
 800b134:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b138:	4313      	orrs	r3, r2
 800b13a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b140:	0f9b      	lsrs	r3, r3, #30
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b148:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800b14a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b14e:	4413      	add	r3, r2
 800b150:	b2db      	uxtb	r3, r3
 800b152:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800b154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b156:	0ddb      	lsrs	r3, r3, #23
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800b162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b164:	0c1b      	lsrs	r3, r3, #16
 800b166:	b2db      	uxtb	r3, r3
 800b168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800b170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b172:	0a5b      	lsrs	r3, r3, #9
 800b174:	b2db      	uxtb	r3, r3
 800b176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	089b      	lsrs	r3, r3, #2
 800b184:	b2db      	uxtb	r3, r3
 800b186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 800b190:	2300      	movs	r3, #0
 800b192:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 800b196:	78fb      	ldrb	r3, [r7, #3]
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f000 80f1 	beq.w	800b384 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b1a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b1a6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f040 80ea 	bne.w	800b384 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b1b0:	227b      	movs	r2, #123	@ 0x7b
 800b1b2:	2194      	movs	r1, #148	@ 0x94
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f001 fd49 	bl	800cc4c <VL53L0X_WrByte>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	461a      	mov	r2, r3
 800b1be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f7ff fccc 	bl	800ab66 <VL53L0X_device_read_strobe>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800b1dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	2190      	movs	r1, #144	@ 0x90
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f001 fe13 	bl	800ce10 <VL53L0X_RdDWord>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800b1f8:	227c      	movs	r2, #124	@ 0x7c
 800b1fa:	2194      	movs	r1, #148	@ 0x94
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 fd25 	bl	800cc4c <VL53L0X_WrByte>
 800b202:	4603      	mov	r3, r0
 800b204:	461a      	mov	r2, r3
 800b206:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b20a:	4313      	orrs	r3, r2
 800b20c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff fca8 	bl	800ab66 <VL53L0X_device_read_strobe>
 800b216:	4603      	mov	r3, r0
 800b218:	461a      	mov	r2, r3
 800b21a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b21e:	4313      	orrs	r3, r2
 800b220:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800b224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b228:	461a      	mov	r2, r3
 800b22a:	2190      	movs	r1, #144	@ 0x90
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 fdef 	bl	800ce10 <VL53L0X_RdDWord>
 800b232:	4603      	mov	r3, r0
 800b234:	461a      	mov	r2, r3
 800b236:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b23a:	4313      	orrs	r3, r2
 800b23c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800b240:	2273      	movs	r2, #115	@ 0x73
 800b242:	2194      	movs	r1, #148	@ 0x94
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f001 fd01 	bl	800cc4c <VL53L0X_WrByte>
 800b24a:	4603      	mov	r3, r0
 800b24c:	461a      	mov	r2, r3
 800b24e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b252:	4313      	orrs	r3, r2
 800b254:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff fc84 	bl	800ab66 <VL53L0X_device_read_strobe>
 800b25e:	4603      	mov	r3, r0
 800b260:	461a      	mov	r2, r3
 800b262:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b266:	4313      	orrs	r3, r2
 800b268:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b26c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b270:	461a      	mov	r2, r3
 800b272:	2190      	movs	r1, #144	@ 0x90
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 fdcb 	bl	800ce10 <VL53L0X_RdDWord>
 800b27a:	4603      	mov	r3, r0
 800b27c:	461a      	mov	r2, r3
 800b27e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b282:	4313      	orrs	r3, r2
 800b284:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800b290:	2274      	movs	r2, #116	@ 0x74
 800b292:	2194      	movs	r1, #148	@ 0x94
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f001 fcd9 	bl	800cc4c <VL53L0X_WrByte>
 800b29a:	4603      	mov	r3, r0
 800b29c:	461a      	mov	r2, r3
 800b29e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7ff fc5c 	bl	800ab66 <VL53L0X_device_read_strobe>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b2bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	2190      	movs	r1, #144	@ 0x90
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 fda3 	bl	800ce10 <VL53L0X_RdDWord>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2da:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800b2dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800b2e2:	2275      	movs	r2, #117	@ 0x75
 800b2e4:	2194      	movs	r1, #148	@ 0x94
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 fcb0 	bl	800cc4c <VL53L0X_WrByte>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff fc33 	bl	800ab66 <VL53L0X_device_read_strobe>
 800b300:	4603      	mov	r3, r0
 800b302:	461a      	mov	r2, r3
 800b304:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b308:	4313      	orrs	r3, r2
 800b30a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b30e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b312:	461a      	mov	r2, r3
 800b314:	2190      	movs	r1, #144	@ 0x90
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f001 fd7a 	bl	800ce10 <VL53L0X_RdDWord>
 800b31c:	4603      	mov	r3, r0
 800b31e:	461a      	mov	r2, r3
 800b320:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b324:	4313      	orrs	r3, r2
 800b326:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800b32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800b32e:	b29b      	uxth	r3, r3
 800b330:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800b332:	2276      	movs	r2, #118	@ 0x76
 800b334:	2194      	movs	r1, #148	@ 0x94
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f001 fc88 	bl	800cc4c <VL53L0X_WrByte>
 800b33c:	4603      	mov	r3, r0
 800b33e:	461a      	mov	r2, r3
 800b340:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b344:	4313      	orrs	r3, r2
 800b346:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff fc0b 	bl	800ab66 <VL53L0X_device_read_strobe>
 800b350:	4603      	mov	r3, r0
 800b352:	461a      	mov	r2, r3
 800b354:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b358:	4313      	orrs	r3, r2
 800b35a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b35e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b362:	461a      	mov	r2, r3
 800b364:	2190      	movs	r1, #144	@ 0x90
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f001 fd52 	bl	800ce10 <VL53L0X_RdDWord>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461a      	mov	r2, r3
 800b370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b374:	4313      	orrs	r3, r2
 800b376:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800b37e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b380:	4313      	orrs	r3, r2
 800b382:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800b384:	2200      	movs	r2, #0
 800b386:	2181      	movs	r1, #129	@ 0x81
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f001 fc5f 	bl	800cc4c <VL53L0X_WrByte>
 800b38e:	4603      	mov	r3, r0
 800b390:	461a      	mov	r2, r3
 800b392:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b396:	4313      	orrs	r3, r2
 800b398:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b39c:	2206      	movs	r2, #6
 800b39e:	21ff      	movs	r1, #255	@ 0xff
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 fc53 	bl	800cc4c <VL53L0X_WrByte>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b3b4:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	2183      	movs	r1, #131	@ 0x83
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f001 fcc7 	bl	800cd50 <VL53L0X_RdByte>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800b3d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b3d4:	f023 0304 	bic.w	r3, r3, #4
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	461a      	mov	r2, r3
 800b3dc:	2183      	movs	r1, #131	@ 0x83
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f001 fc34 	bl	800cc4c <VL53L0X_WrByte>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	21ff      	movs	r1, #255	@ 0xff
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f001 fc28 	bl	800cc4c <VL53L0X_WrByte>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	461a      	mov	r2, r3
 800b400:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b404:	4313      	orrs	r3, r2
 800b406:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b40a:	2201      	movs	r2, #1
 800b40c:	2100      	movs	r1, #0
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f001 fc1c 	bl	800cc4c <VL53L0X_WrByte>
 800b414:	4603      	mov	r3, r0
 800b416:	461a      	mov	r2, r3
 800b418:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b41c:	4313      	orrs	r3, r2
 800b41e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b422:	2200      	movs	r2, #0
 800b424:	21ff      	movs	r1, #255	@ 0xff
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f001 fc10 	bl	800cc4c <VL53L0X_WrByte>
 800b42c:	4603      	mov	r3, r0
 800b42e:	461a      	mov	r2, r3
 800b430:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b434:	4313      	orrs	r3, r2
 800b436:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b43a:	2200      	movs	r2, #0
 800b43c:	2180      	movs	r1, #128	@ 0x80
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f001 fc04 	bl	800cc4c <VL53L0X_WrByte>
 800b444:	4603      	mov	r3, r0
 800b446:	461a      	mov	r2, r3
 800b448:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b44c:	4313      	orrs	r3, r2
 800b44e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b452:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800b456:	2b00      	cmp	r3, #0
 800b458:	f040 808f 	bne.w	800b57a <VL53L0X_get_info_from_device+0x98e>
 800b45c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b460:	2b07      	cmp	r3, #7
 800b462:	f000 808a 	beq.w	800b57a <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800b466:	78fb      	ldrb	r3, [r7, #3]
 800b468:	f003 0301 	and.w	r3, r3, #1
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d024      	beq.n	800b4ba <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b470:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b474:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d11e      	bne.n	800b4ba <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800b482:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800b48c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b490:	2300      	movs	r3, #0
 800b492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b494:	e00e      	b.n	800b4b4 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800b496:	f107 0208 	add.w	r2, r7, #8
 800b49a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b49c:	4413      	add	r3, r2
 800b49e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800b4aa:	460a      	mov	r2, r1
 800b4ac:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b4ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	dded      	ble.n	800b496 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800b4ba:	78fb      	ldrb	r3, [r7, #3]
 800b4bc:	f003 0302 	and.w	r3, r3, #2
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d018      	beq.n	800b4f6 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b4c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b4c8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d112      	bne.n	800b4f6 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b4d0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b4da:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	33f3      	adds	r3, #243	@ 0xf3
 800b4e8:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800b4ea:	f107 0310 	add.w	r3, r7, #16
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4f2:	f002 fbc6 	bl	800dc82 <strcpy>

		}

		if (((option & 4) == 4) &&
 800b4f6:	78fb      	ldrb	r3, [r7, #3]
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d030      	beq.n	800b562 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b500:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b504:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d12a      	bne.n	800b562 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b50c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800b51c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b51e:	025b      	lsls	r3, r3, #9
 800b520:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b526:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800b530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b532:	2b00      	cmp	r3, #0
 800b534:	d011      	beq.n	800b55a <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800b536:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800b53e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b540:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b544:	fb02 f303 	mul.w	r3, r2, r3
 800b548:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800b54a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 800b54e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800b552:	425b      	negs	r3, r3
 800b554:	b29b      	uxth	r3, r3
 800b556:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 800b55a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800b562:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800b566:	78fb      	ldrb	r3, [r7, #3]
 800b568:	4313      	orrs	r3, r2
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800b570:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b57a:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3760      	adds	r7, #96	@ 0x60
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800b586:	b480      	push	{r7}
 800b588:	b087      	sub	sp, #28
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	460b      	mov	r3, r1
 800b590:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800b592:	f240 6277 	movw	r2, #1655	@ 0x677
 800b596:	f04f 0300 	mov.w	r3, #0
 800b59a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800b59e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800b5a2:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800b5a4:	78fb      	ldrb	r3, [r7, #3]
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	fb02 f303 	mul.w	r3, r2, r3
 800b5b2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800b5b4:	68bb      	ldr	r3, [r7, #8]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	371c      	adds	r7, #28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b087      	sub	sp, #28
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d015      	beq.n	800b608 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b5e2:	e005      	b.n	800b5f0 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	085b      	lsrs	r3, r3, #1
 800b5e8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b5ea:	89fb      	ldrh	r3, [r7, #14]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	2bff      	cmp	r3, #255	@ 0xff
 800b5f4:	d8f6      	bhi.n	800b5e4 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b5f6:	89fb      	ldrh	r3, [r7, #14]
 800b5f8:	021b      	lsls	r3, r3, #8
 800b5fa:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	b2db      	uxtb	r3, r3
 800b602:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b604:	4413      	add	r3, r2
 800b606:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b608:	8afb      	ldrh	r3, [r7, #22]

}
 800b60a:	4618      	mov	r0, r3
 800b60c:	371c      	adds	r7, #28
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr

0800b616 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800b616:	b480      	push	{r7}
 800b618:	b085      	sub	sp, #20
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	4603      	mov	r3, r0
 800b61e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b624:	88fb      	ldrh	r3, [r7, #6]
 800b626:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b628:	88fa      	ldrh	r2, [r7, #6]
 800b62a:	0a12      	lsrs	r2, r2, #8
 800b62c:	b292      	uxth	r2, r2
 800b62e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b630:	3301      	adds	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b634:	68fb      	ldr	r3, [r7, #12]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
	...

0800b644 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b088      	sub	sp, #32
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	4613      	mov	r3, r2
 800b650:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b656:	79fb      	ldrb	r3, [r7, #7]
 800b658:	4619      	mov	r1, r3
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff ff93 	bl	800b586 <VL53L0X_calc_macro_period_ps>
 800b660:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b668:	4a0a      	ldr	r2, [pc, #40]	@ (800b694 <VL53L0X_calc_timeout_mclks+0x50>)
 800b66a:	fba2 2303 	umull	r2, r3, r2, r3
 800b66e:	099b      	lsrs	r3, r3, #6
 800b670:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b678:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	085b      	lsrs	r3, r3, #1
 800b680:	441a      	add	r2, r3
	timeout_period_mclks =
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	fbb2 f3f3 	udiv	r3, r2, r3
 800b688:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800b68a:	69fb      	ldr	r3, [r7, #28]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3720      	adds	r7, #32
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	10624dd3 	.word	0x10624dd3

0800b698 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	807b      	strh	r3, [r7, #2]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b6ac:	787b      	ldrb	r3, [r7, #1]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff ff68 	bl	800b586 <VL53L0X_calc_macro_period_ps>
 800b6b6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b6be:	4a0a      	ldr	r2, [pc, #40]	@ (800b6e8 <VL53L0X_calc_timeout_us+0x50>)
 800b6c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c4:	099b      	lsrs	r3, r3, #6
 800b6c6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800b6c8:	887b      	ldrh	r3, [r7, #2]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	fb02 f303 	mul.w	r3, r2, r3
 800b6d0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 800b6d4:	4a04      	ldr	r2, [pc, #16]	@ (800b6e8 <VL53L0X_calc_timeout_us+0x50>)
 800b6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6da:	099b      	lsrs	r3, r3, #6
 800b6dc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800b6de:	697b      	ldr	r3, [r7, #20]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	10624dd3 	.word	0x10624dd3

0800b6ec <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08c      	sub	sp, #48	@ 0x30
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800b706:	2300      	movs	r3, #0
 800b708:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800b70e:	2300      	movs	r3, #0
 800b710:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b712:	7afb      	ldrb	r3, [r7, #11]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <get_sequence_step_timeout+0x38>
 800b718:	7afb      	ldrb	r3, [r7, #11]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d002      	beq.n	800b724 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b71e:	7afb      	ldrb	r3, [r7, #11]
 800b720:	2b02      	cmp	r3, #2
 800b722:	d127      	bne.n	800b774 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b724:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800b728:	461a      	mov	r2, r3
 800b72a:	2100      	movs	r1, #0
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7fd fa9f 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 800b732:	4603      	mov	r3, r0
 800b734:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800b738:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d109      	bne.n	800b754 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800b740:	f107 0320 	add.w	r3, r7, #32
 800b744:	461a      	mov	r2, r3
 800b746:	2146      	movs	r1, #70	@ 0x46
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f001 fb01 	bl	800cd50 <VL53L0X_RdByte>
 800b74e:	4603      	mov	r3, r0
 800b750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800b754:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff ff5c 	bl	800b616 <VL53L0X_decode_timeout>
 800b75e:	4603      	mov	r3, r0
 800b760:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b762:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800b766:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b768:	4619      	mov	r1, r3
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f7ff ff94 	bl	800b698 <VL53L0X_calc_timeout_us>
 800b770:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b772:	e092      	b.n	800b89a <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b774:	7afb      	ldrb	r3, [r7, #11]
 800b776:	2b03      	cmp	r3, #3
 800b778:	d135      	bne.n	800b7e6 <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b77a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800b77e:	461a      	mov	r2, r3
 800b780:	2100      	movs	r1, #0
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f7fd fa74 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 800b788:	4603      	mov	r3, r0
 800b78a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b78e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b792:	2b00      	cmp	r3, #0
 800b794:	f040 8081 	bne.w	800b89a <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b798:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800b79c:	461a      	mov	r2, r3
 800b79e:	2100      	movs	r1, #0
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f7fd fa65 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800b7ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d109      	bne.n	800b7c8 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 800b7b4:	f107 031e 	add.w	r3, r7, #30
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	2151      	movs	r1, #81	@ 0x51
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f001 faf1 	bl	800cda4 <VL53L0X_RdWord>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b7c8:	8bfb      	ldrh	r3, [r7, #30]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7ff ff23 	bl	800b616 <VL53L0X_decode_timeout>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b7d4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800b7d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f7ff ff5b 	bl	800b698 <VL53L0X_calc_timeout_us>
 800b7e2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b7e4:	e059      	b.n	800b89a <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b7e6:	7afb      	ldrb	r3, [r7, #11]
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	d156      	bne.n	800b89a <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b7ec:	f107 0314 	add.w	r3, r7, #20
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f7fd fb46 	bl	8008e84 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d01d      	beq.n	800b83e <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b802:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800b806:	461a      	mov	r2, r3
 800b808:	2100      	movs	r1, #0
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7fd fa30 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 800b810:	4603      	mov	r3, r0
 800b812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800b816:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10f      	bne.n	800b83e <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 800b81e:	f107 031e 	add.w	r3, r7, #30
 800b822:	461a      	mov	r2, r3
 800b824:	2151      	movs	r1, #81	@ 0x51
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f001 fabc 	bl	800cda4 <VL53L0X_RdWord>
 800b82c:	4603      	mov	r3, r0
 800b82e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b832:	8bfb      	ldrh	r3, [r7, #30]
 800b834:	4618      	mov	r0, r3
 800b836:	f7ff feee 	bl	800b616 <VL53L0X_decode_timeout>
 800b83a:	4603      	mov	r3, r0
 800b83c:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b83e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b842:	2b00      	cmp	r3, #0
 800b844:	d109      	bne.n	800b85a <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b846:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800b84a:	461a      	mov	r2, r3
 800b84c:	2101      	movs	r1, #1
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f7fd fa0e 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 800b854:	4603      	mov	r3, r0
 800b856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b85a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10f      	bne.n	800b882 <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 800b862:	f107 031c 	add.w	r3, r7, #28
 800b866:	461a      	mov	r2, r3
 800b868:	2171      	movs	r1, #113	@ 0x71
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f001 fa9a 	bl	800cda4 <VL53L0X_RdWord>
 800b870:	4603      	mov	r3, r0
 800b872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b876:	8bbb      	ldrh	r3, [r7, #28]
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff fecc 	bl	800b616 <VL53L0X_decode_timeout>
 800b87e:	4603      	mov	r3, r0
 800b880:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800b882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b88a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800b88e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b890:	4619      	mov	r1, r3
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff ff00 	bl	800b698 <VL53L0X_calc_timeout_us>
 800b898:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b89e:	601a      	str	r2, [r3, #0]

	return Status;
 800b8a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3730      	adds	r7, #48	@ 0x30
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08a      	sub	sp, #40	@ 0x28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b8c0:	7afb      	ldrb	r3, [r7, #11]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d005      	beq.n	800b8d2 <set_sequence_step_timeout+0x26>
 800b8c6:	7afb      	ldrb	r3, [r7, #11]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d002      	beq.n	800b8d2 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b8cc:	7afb      	ldrb	r3, [r7, #11]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d138      	bne.n	800b944 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b8d2:	f107 031b 	add.w	r3, r7, #27
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	2100      	movs	r1, #0
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7fd f9c8 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800b8e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d11a      	bne.n	800b924 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b8ee:	7efb      	ldrb	r3, [r7, #27]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff fea5 	bl	800b644 <VL53L0X_calc_timeout_mclks>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800b8fe:	8bbb      	ldrh	r3, [r7, #28]
 800b900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b904:	d903      	bls.n	800b90e <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b906:	23ff      	movs	r3, #255	@ 0xff
 800b908:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b90c:	e004      	b.n	800b918 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b90e:	8bbb      	ldrh	r3, [r7, #28]
 800b910:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b912:	3b01      	subs	r3, #1
 800b914:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b918:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b924:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f040 80ab 	bne.w	800ba84 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800b92e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b932:	461a      	mov	r2, r3
 800b934:	2146      	movs	r1, #70	@ 0x46
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f001 f988 	bl	800cc4c <VL53L0X_WrByte>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b942:	e09f      	b.n	800ba84 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b944:	7afb      	ldrb	r3, [r7, #11]
 800b946:	2b03      	cmp	r3, #3
 800b948:	d135      	bne.n	800b9b6 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b94a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d11b      	bne.n	800b98a <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b952:	f107 031b 	add.w	r3, r7, #27
 800b956:	461a      	mov	r2, r3
 800b958:	2100      	movs	r1, #0
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f7fd f988 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 800b960:	4603      	mov	r3, r0
 800b962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b966:	7efb      	ldrb	r3, [r7, #27]
 800b968:	461a      	mov	r2, r3
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7ff fe69 	bl	800b644 <VL53L0X_calc_timeout_mclks>
 800b972:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b974:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b976:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b978:	4618      	mov	r0, r3
 800b97a:	f7ff fe22 	bl	800b5c2 <VL53L0X_encode_timeout>
 800b97e:	4603      	mov	r3, r0
 800b980:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b982:	8b3a      	ldrh	r2, [r7, #24]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b98a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d108      	bne.n	800b9a4 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b992:	8b3b      	ldrh	r3, [r7, #24]
 800b994:	461a      	mov	r2, r3
 800b996:	2151      	movs	r1, #81	@ 0x51
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f001 f97b 	bl	800cc94 <VL53L0X_WrWord>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b9a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d16b      	bne.n	800ba84 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800b9b4:	e066      	b.n	800ba84 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b9b6:	7afb      	ldrb	r3, [r7, #11]
 800b9b8:	2b04      	cmp	r3, #4
 800b9ba:	d160      	bne.n	800ba7e <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b9bc:	f107 0310 	add.w	r3, r7, #16
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f7fd fa5e 	bl	8008e84 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b9cc:	7cfb      	ldrb	r3, [r7, #19]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d01d      	beq.n	800ba0e <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b9d2:	f107 031b 	add.w	r3, r7, #27
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2100      	movs	r1, #0
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f7fd f948 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b9e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10f      	bne.n	800ba0e <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b9ee:	f107 0318 	add.w	r3, r7, #24
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	2151      	movs	r1, #81	@ 0x51
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f001 f9d4 	bl	800cda4 <VL53L0X_RdWord>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800ba02:	8b3b      	ldrh	r3, [r7, #24]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff fe06 	bl	800b616 <VL53L0X_decode_timeout>
 800ba0a:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800ba0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800ba0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d109      	bne.n	800ba2a <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ba16:	f107 031b 	add.w	r3, r7, #27
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7fd f926 	bl	8008c70 <VL53L0X_GetVcselPulsePeriod>
 800ba24:	4603      	mov	r3, r0
 800ba26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800ba2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d128      	bne.n	800ba84 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ba32:	7efb      	ldrb	r3, [r7, #27]
 800ba34:	461a      	mov	r2, r3
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f7ff fe03 	bl	800b644 <VL53L0X_calc_timeout_mclks>
 800ba3e:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800ba40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba42:	6a3a      	ldr	r2, [r7, #32]
 800ba44:	4413      	add	r3, r2
 800ba46:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800ba48:	6a38      	ldr	r0, [r7, #32]
 800ba4a:	f7ff fdba 	bl	800b5c2 <VL53L0X_encode_timeout>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800ba52:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d108      	bne.n	800ba6c <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800ba5a:	8bfb      	ldrh	r3, [r7, #30]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	2171      	movs	r1, #113	@ 0x71
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f001 f917 	bl	800cc94 <VL53L0X_WrWord>
 800ba66:	4603      	mov	r3, r0
 800ba68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800ba6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d107      	bne.n	800ba84 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800ba7c:	e002      	b.n	800ba84 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba7e:	23fc      	movs	r3, #252	@ 0xfc
 800ba80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 800ba84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3728      	adds	r7, #40	@ 0x28
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800baa2:	7afb      	ldrb	r3, [r7, #11]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <VL53L0X_get_vcsel_pulse_period+0x1e>
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d00a      	beq.n	800bac2 <VL53L0X_get_vcsel_pulse_period+0x32>
 800baac:	e013      	b.n	800bad6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800baae:	f107 0316 	add.w	r3, r7, #22
 800bab2:	461a      	mov	r2, r3
 800bab4:	2150      	movs	r1, #80	@ 0x50
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f001 f94a 	bl	800cd50 <VL53L0X_RdByte>
 800babc:	4603      	mov	r3, r0
 800babe:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800bac0:	e00b      	b.n	800bada <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800bac2:	f107 0316 	add.w	r3, r7, #22
 800bac6:	461a      	mov	r2, r3
 800bac8:	2170      	movs	r1, #112	@ 0x70
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f001 f940 	bl	800cd50 <VL53L0X_RdByte>
 800bad0:	4603      	mov	r3, r0
 800bad2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800bad4:	e001      	b.n	800bada <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bad6:	23fc      	movs	r3, #252	@ 0xfc
 800bad8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800bada:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d107      	bne.n	800baf2 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800bae2:	7dbb      	ldrb	r3, [r7, #22]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fe fff7 	bl	800aad8 <VL53L0X_decode_vcsel_period>
 800baea:	4603      	mov	r3, r0
 800baec:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	701a      	strb	r2, [r3, #0]

	return Status;
 800baf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b092      	sub	sp, #72	@ 0x48
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800bb0e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800bb12:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800bb14:	f240 7376 	movw	r3, #1910	@ 0x776
 800bb18:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800bb1a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800bb1e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800bb20:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800bb24:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800bb26:	f240 234e 	movw	r3, #590	@ 0x24e
 800bb2a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800bb2c:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800bb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800bb32:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800bb36:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bb38:	f240 2326 	movw	r3, #550	@ 0x226
 800bb3c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800bb42:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800bb46:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d205      	bcs.n	800bb60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb54:	23fc      	movs	r3, #252	@ 0xfc
 800bb56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 800bb5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bb5e:	e0aa      	b.n	800bcb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800bb60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bb6c:	f107 0314 	add.w	r3, r7, #20
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fd f986 	bl	8008e84 <VL53L0X_GetSequenceStepEnables>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800bb7e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d15b      	bne.n	800bc3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800bb86:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d105      	bne.n	800bb98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800bb8c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d102      	bne.n	800bb98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800bb92:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d052      	beq.n	800bc3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800bb98:	f107 0310 	add.w	r3, r7, #16
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	2102      	movs	r1, #2
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7ff fda3 	bl	800b6ec <get_sequence_step_timeout>
 800bba6:	4603      	mov	r3, r0
 800bba8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800bbac:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800bbb4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bbb8:	e07d      	b.n	800bcb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800bbba:	7d3b      	ldrb	r3, [r7, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00f      	beq.n	800bbe0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800bbc0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800bbc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbc4:	4413      	add	r3, r2
 800bbc6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800bbc8:	69fa      	ldr	r2, [r7, #28]
 800bbca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d204      	bcs.n	800bbda <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800bbd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbd8:	e002      	b.n	800bbe0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bbda:	23fc      	movs	r3, #252	@ 0xfc
 800bbdc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800bbe0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d002      	beq.n	800bbee <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800bbe8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bbec:	e063      	b.n	800bcb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800bbee:	7dbb      	ldrb	r3, [r7, #22]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d011      	beq.n	800bc18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf8:	4413      	add	r3, r2
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bbfe:	69fa      	ldr	r2, [r7, #28]
 800bc00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d204      	bcs.n	800bc10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800bc06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc0e:	e016      	b.n	800bc3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc10:	23fc      	movs	r3, #252	@ 0xfc
 800bc12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bc16:	e012      	b.n	800bc3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800bc18:	7d7b      	ldrb	r3, [r7, #21]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00f      	beq.n	800bc3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc22:	4413      	add	r3, r2
 800bc24:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bc26:	69fa      	ldr	r2, [r7, #28]
 800bc28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d204      	bcs.n	800bc38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800bc2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc36:	e002      	b.n	800bc3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc38:	23fc      	movs	r3, #252	@ 0xfc
 800bc3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800bc3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800bc46:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bc4a:	e034      	b.n	800bcb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d019      	beq.n	800bc86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800bc52:	f107 030c 	add.w	r3, r7, #12
 800bc56:	461a      	mov	r2, r3
 800bc58:	2103      	movs	r1, #3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff fd46 	bl	800b6ec <get_sequence_step_timeout>
 800bc60:	4603      	mov	r3, r0
 800bc62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc6a:	4413      	add	r3, r2
 800bc6c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bc6e:	69fa      	ldr	r2, [r7, #28]
 800bc70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d204      	bcs.n	800bc80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800bc76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc7e:	e002      	b.n	800bc86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc80:	23fc      	movs	r3, #252	@ 0xfc
 800bc82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800bc86:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d111      	bne.n	800bcb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800bc8e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00e      	beq.n	800bcb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800bc94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800bc9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc9e:	2104      	movs	r1, #4
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff fe03 	bl	800b8ac <set_sequence_step_timeout>
 800bca6:	4603      	mov	r3, r0
 800bca8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800bcb2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3748      	adds	r7, #72	@ 0x48
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b090      	sub	sp, #64	@ 0x40
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800bcce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800bcd2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800bcd4:	f240 7376 	movw	r3, #1910	@ 0x776
 800bcd8:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800bcda:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800bcde:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800bce0:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800bce4:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800bce6:	f240 234e 	movw	r3, #590	@ 0x24e
 800bcea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800bcec:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800bcf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800bcf2:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800bcf6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bcf8:	f240 2326 	movw	r3, #550	@ 0x226
 800bcfc:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800bd02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd06:	441a      	add	r2, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bd0c:	f107 0318 	add.w	r3, r7, #24
 800bd10:	4619      	mov	r1, r3
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7fd f8b6 	bl	8008e84 <VL53L0X_GetSequenceStepEnables>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800bd1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d002      	beq.n	800bd2c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800bd26:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bd2a:	e075      	b.n	800be18 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800bd2c:	7e3b      	ldrb	r3, [r7, #24]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d105      	bne.n	800bd3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800bd32:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d102      	bne.n	800bd3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800bd38:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d030      	beq.n	800bda0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800bd3e:	f107 0310 	add.w	r3, r7, #16
 800bd42:	461a      	mov	r2, r3
 800bd44:	2102      	movs	r1, #2
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f7ff fcd0 	bl	800b6ec <get_sequence_step_timeout>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800bd52:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d122      	bne.n	800bda0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800bd5a:	7e3b      	ldrb	r3, [r7, #24]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d007      	beq.n	800bd70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800bd64:	6939      	ldr	r1, [r7, #16]
 800bd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd68:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bd6a:	441a      	add	r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800bd70:	7ebb      	ldrb	r3, [r7, #26]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d009      	beq.n	800bd8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800bd7a:	6939      	ldr	r1, [r7, #16]
 800bd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7e:	440b      	add	r3, r1
 800bd80:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bd82:	441a      	add	r2, r3
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	e00a      	b.n	800bda0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800bd8a:	7e7b      	ldrb	r3, [r7, #25]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d007      	beq.n	800bda0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800bd94:	6939      	ldr	r1, [r7, #16]
 800bd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd98:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bd9a:	441a      	add	r2, r3
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bda0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d114      	bne.n	800bdd2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800bda8:	7efb      	ldrb	r3, [r7, #27]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d011      	beq.n	800bdd2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800bdae:	f107 030c 	add.w	r3, r7, #12
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	2103      	movs	r1, #3
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7ff fc98 	bl	800b6ec <get_sequence_step_timeout>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800bdc6:	68f9      	ldr	r1, [r7, #12]
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdca:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800bdcc:	441a      	add	r2, r3
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bdd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d114      	bne.n	800be04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800bdda:	7f3b      	ldrb	r3, [r7, #28]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d011      	beq.n	800be04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800bde0:	f107 0314 	add.w	r3, r7, #20
 800bde4:	461a      	mov	r2, r3
 800bde6:	2104      	movs	r1, #4
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7ff fc7f 	bl	800b6ec <get_sequence_step_timeout>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800bdf8:	6979      	ldr	r1, [r7, #20]
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800bdfe:	441a      	add	r2, r3
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800be04:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d103      	bne.n	800be14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be14:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3740      	adds	r7, #64	@ 0x40
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be2a:	2300      	movs	r3, #0
 800be2c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800be2e:	2300      	movs	r3, #0
 800be30:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800be32:	e0c6      	b.n	800bfc2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	4413      	add	r3, r2
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	3301      	adds	r3, #1
 800be42:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800be44:	7cfb      	ldrb	r3, [r7, #19]
 800be46:	2bff      	cmp	r3, #255	@ 0xff
 800be48:	f040 808d 	bne.w	800bf66 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	4413      	add	r3, r2
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	747b      	strb	r3, [r7, #17]
			Index++;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	3301      	adds	r3, #1
 800be5a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800be5c:	7c7b      	ldrb	r3, [r7, #17]
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d87e      	bhi.n	800bf60 <VL53L0X_load_tuning_settings+0x140>
 800be62:	a201      	add	r2, pc, #4	@ (adr r2, 800be68 <VL53L0X_load_tuning_settings+0x48>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800be79 	.word	0x0800be79
 800be6c:	0800beb3 	.word	0x0800beb3
 800be70:	0800beed 	.word	0x0800beed
 800be74:	0800bf27 	.word	0x0800bf27
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	4413      	add	r3, r2
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	743b      	strb	r3, [r7, #16]
				Index++;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	3301      	adds	r3, #1
 800be86:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	4413      	add	r3, r2
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	73fb      	strb	r3, [r7, #15]
				Index++;
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	3301      	adds	r3, #1
 800be96:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800be98:	7c3b      	ldrb	r3, [r7, #16]
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	021b      	lsls	r3, r3, #8
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	4413      	add	r3, r2
 800bea6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	89ba      	ldrh	r2, [r7, #12]
 800beac:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800beb0:	e087      	b.n	800bfc2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	4413      	add	r3, r2
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	743b      	strb	r3, [r7, #16]
				Index++;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	3301      	adds	r3, #1
 800bec0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	683a      	ldr	r2, [r7, #0]
 800bec6:	4413      	add	r3, r2
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	73fb      	strb	r3, [r7, #15]
				Index++;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	3301      	adds	r3, #1
 800bed0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bed2:	7c3b      	ldrb	r3, [r7, #16]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	021b      	lsls	r3, r3, #8
 800bed8:	b29a      	uxth	r2, r3
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	4413      	add	r3, r2
 800bee0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	89ba      	ldrh	r2, [r7, #12]
 800bee6:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800beea:	e06a      	b.n	800bfc2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	4413      	add	r3, r2
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	743b      	strb	r3, [r7, #16]
				Index++;
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	3301      	adds	r3, #1
 800befa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	4413      	add	r3, r2
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bf0c:	7c3b      	ldrb	r3, [r7, #16]
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	021b      	lsls	r3, r3, #8
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	4413      	add	r3, r2
 800bf1a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	89ba      	ldrh	r2, [r7, #12]
 800bf20:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 800bf24:	e04d      	b.n	800bfc2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	683a      	ldr	r2, [r7, #0]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	743b      	strb	r3, [r7, #16]
				Index++;
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	3301      	adds	r3, #1
 800bf34:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	3301      	adds	r3, #1
 800bf44:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bf46:	7c3b      	ldrb	r3, [r7, #16]
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	021b      	lsls	r3, r3, #8
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	4413      	add	r3, r2
 800bf54:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	89ba      	ldrh	r2, [r7, #12]
 800bf5a:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 800bf5e:	e030      	b.n	800bfc2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bf60:	23fc      	movs	r3, #252	@ 0xfc
 800bf62:	77fb      	strb	r3, [r7, #31]
 800bf64:	e02d      	b.n	800bfc2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800bf66:	7cfb      	ldrb	r3, [r7, #19]
 800bf68:	2b04      	cmp	r3, #4
 800bf6a:	d828      	bhi.n	800bfbe <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	4413      	add	r3, r2
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	74bb      	strb	r3, [r7, #18]
			Index++;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	61bb      	str	r3, [r7, #24]
 800bf80:	e00f      	b.n	800bfa2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	4413      	add	r3, r2
 800bf88:	7819      	ldrb	r1, [r3, #0]
 800bf8a:	f107 0208 	add.w	r2, r7, #8
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	4413      	add	r3, r2
 800bf92:	460a      	mov	r2, r1
 800bf94:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	61bb      	str	r3, [r7, #24]
 800bfa2:	7cfb      	ldrb	r3, [r7, #19]
 800bfa4:	69ba      	ldr	r2, [r7, #24]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	dbeb      	blt.n	800bf82 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800bfaa:	7cfb      	ldrb	r3, [r7, #19]
 800bfac:	f107 0208 	add.w	r2, r7, #8
 800bfb0:	7cb9      	ldrb	r1, [r7, #18]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fdee 	bl	800cb94 <VL53L0X_WriteMulti>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	77fb      	strb	r3, [r7, #31]
 800bfbc:	e001      	b.n	800bfc2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bfbe:	23fc      	movs	r3, #252	@ 0xfc
 800bfc0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d004      	beq.n	800bfd8 <VL53L0X_load_tuning_settings+0x1b8>
 800bfce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f43f af2e 	beq.w	800be34 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bfd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3720      	adds	r7, #32
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b088      	sub	sp, #32
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bff0:	2300      	movs	r3, #0
 800bff2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800bffa:	f107 0313 	add.w	r3, r7, #19
 800bffe:	4619      	mov	r1, r3
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7fc ffcb 	bl	8008f9c <VL53L0X_GetXTalkCompensationEnable>
 800c006:	4603      	mov	r3, r0
 800c008:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800c00a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d111      	bne.n	800c036 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800c012:	7cfb      	ldrb	r3, [r7, #19]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00e      	beq.n	800c036 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6a1b      	ldr	r3, [r3, #32]
 800c01c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	8a9b      	ldrh	r3, [r3, #20]
 800c022:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	fb02 f303 	mul.w	r3, r2, r3
 800c02a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	3380      	adds	r3, #128	@ 0x80
 800c030:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800c036:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3720      	adds	r7, #32
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b086      	sub	sp, #24
 800c046:	af00      	add	r7, sp, #0
 800c048:	60f8      	str	r0, [r7, #12]
 800c04a:	60b9      	str	r1, [r7, #8]
 800c04c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c04e:	2300      	movs	r3, #0
 800c050:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800c05a:	f107 0310 	add.w	r3, r7, #16
 800c05e:	461a      	mov	r2, r3
 800c060:	68b9      	ldr	r1, [r7, #8]
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f7ff ffbe 	bl	800bfe4 <VL53L0X_get_total_xtalk_rate>
 800c068:	4603      	mov	r3, r0
 800c06a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800c06c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d105      	bne.n	800c080 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	441a      	add	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	601a      	str	r2, [r3, #0]

	return Status;
 800c080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3718      	adds	r7, #24
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b09a      	sub	sp, #104	@ 0x68
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
 800c098:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800c09a:	2312      	movs	r3, #18
 800c09c:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800c09e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c0a2:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800c0a4:	2342      	movs	r3, #66	@ 0x42
 800c0a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800c0a8:	2306      	movs	r3, #6
 800c0aa:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800c0ac:	2307      	movs	r3, #7
 800c0ae:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 800c0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800c0c4:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800c0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0ca:	fb02 f303 	mul.w	r3, r2, r3
 800c0ce:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800c0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d2:	3380      	adds	r3, #128	@ 0x80
 800c0d4:	0a1b      	lsrs	r3, r3, #8
 800c0d6:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800c0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c0dc:	fb02 f303 	mul.w	r3, r2, r3
 800c0e0:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d01a      	beq.n	800c122 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	029b      	lsls	r3, r3, #10
 800c0f0:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800c0f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0f8:	4413      	add	r3, r2
 800c0fa:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800c0fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	fbb2 f3f3 	udiv	r3, r2, r3
 800c104:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800c106:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c108:	4613      	mov	r3, r2
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	4413      	add	r3, r2
 800c10e:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800c110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c112:	fb03 f303 	mul.w	r3, r3, r3
 800c116:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800c118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c11a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800c11e:	0c1b      	lsrs	r3, r3, #16
 800c120:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c126:	fb02 f303 	mul.w	r3, r2, r3
 800c12a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800c12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800c132:	0c1b      	lsrs	r3, r3, #16
 800c134:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800c136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c138:	fb03 f303 	mul.w	r3, r3, r3
 800c13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800c13e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c140:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800c144:	0c1b      	lsrs	r3, r3, #16
 800c146:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800c148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c14a:	085a      	lsrs	r2, r3, #1
 800c14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14e:	441a      	add	r2, r3
 800c150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c152:	fbb2 f3f3 	udiv	r3, r2, r3
 800c156:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c15c:	fb02 f303 	mul.w	r3, r2, r3
 800c160:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800c162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c168:	d302      	bcc.n	800c170 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800c16a:	4b54      	ldr	r3, [pc, #336]	@ (800c2bc <VL53L0X_calc_dmax+0x230>)
 800c16c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c16e:	e015      	b.n	800c19c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800c170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c172:	085a      	lsrs	r2, r3, #1
 800c174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c176:	441a      	add	r2, r3
 800c178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c17a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c17e:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800c180:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c184:	fb02 f303 	mul.w	r3, r2, r3
 800c188:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800c18a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c18c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800c190:	0c1b      	lsrs	r3, r3, #16
 800c192:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800c194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c196:	fb03 f303 	mul.w	r3, r3, r3
 800c19a:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800c19c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c19e:	039b      	lsls	r3, r3, #14
 800c1a0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c1a4:	4a46      	ldr	r2, [pc, #280]	@ (800c2c0 <VL53L0X_calc_dmax+0x234>)
 800c1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1aa:	099b      	lsrs	r3, r3, #6
 800c1ac:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b0:	fb03 f303 	mul.w	r3, r3, r3
 800c1b4:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800c1b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1b8:	fb03 f303 	mul.w	r3, r3, r3
 800c1bc:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	3308      	adds	r3, #8
 800c1c2:	091b      	lsrs	r3, r3, #4
 800c1c4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800c1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1c8:	6a3b      	ldr	r3, [r7, #32]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800c1ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	4413      	add	r3, r2
 800c1d6:	011b      	lsls	r3, r3, #4
 800c1d8:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c1e0:	0b9b      	lsrs	r3, r3, #14
 800c1e2:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800c1e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1e8:	4413      	add	r3, r2
 800c1ea:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800c1ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1ee:	085b      	lsrs	r3, r3, #1
 800c1f0:	69ba      	ldr	r2, [r7, #24]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800c1f6:	69ba      	ldr	r2, [r7, #24]
 800c1f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1fe:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	039b      	lsls	r3, r3, #14
 800c204:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	085b      	lsrs	r3, r3, #1
 800c20a:	69ba      	ldr	r2, [r7, #24]
 800c20c:	4413      	add	r3, r2
 800c20e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800c210:	69ba      	ldr	r2, [r7, #24]
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	fbb2 f3f3 	udiv	r3, r2, r3
 800c218:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c21e:	fb02 f303 	mul.w	r3, r2, r3
 800c222:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c22a:	4a25      	ldr	r2, [pc, #148]	@ (800c2c0 <VL53L0X_calc_dmax+0x234>)
 800c22c:	fba2 2303 	umull	r2, r3, r2, r3
 800c230:	099b      	lsrs	r3, r3, #6
 800c232:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	011b      	lsls	r3, r3, #4
 800c238:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c240:	4a1f      	ldr	r2, [pc, #124]	@ (800c2c0 <VL53L0X_calc_dmax+0x234>)
 800c242:	fba2 2303 	umull	r2, r3, r2, r3
 800c246:	099b      	lsrs	r3, r3, #6
 800c248:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800c24a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c24c:	3380      	adds	r3, #128	@ 0x80
 800c24e:	0a1b      	lsrs	r3, r3, #8
 800c250:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d008      	beq.n	800c26a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	085a      	lsrs	r2, r3, #1
 800c25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25e:	441a      	add	r2, r3
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	fbb2 f3f3 	udiv	r3, r2, r3
 800c266:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c268:	e001      	b.n	800c26e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800c26e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c270:	f7fe fc45 	bl	800aafe <VL53L0X_isqrt>
 800c274:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d008      	beq.n	800c28e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	085a      	lsrs	r2, r3, #1
 800c280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c282:	441a      	add	r2, r3
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c28c:	e001      	b.n	800c292 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800c28e:	2300      	movs	r3, #0
 800c290:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800c292:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800c294:	f7fe fc33 	bl	800aafe <VL53L0X_isqrt>
 800c298:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 800c29a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c29c:	693a      	ldr	r2, [r7, #16]
 800c29e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d902      	bls.n	800c2ae <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800c2a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c2aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c2ac:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800c2ae:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3768      	adds	r7, #104	@ 0x68
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	fff00000 	.word	0xfff00000
 800c2c0:	10624dd3 	.word	0x10624dd3

0800c2c4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b0b4      	sub	sp, #208	@ 0xd0
 800c2c8:	af04      	add	r7, sp, #16
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
 800c2d0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800c2d2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c2d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800c2da:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800c2de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800c2e2:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800c2e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800c2ea:	f241 235c 	movw	r3, #4700	@ 0x125c
 800c2ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800c2f2:	4b9e      	ldr	r3, [pc, #632]	@ (800c56c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800c2f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800c2f8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800c2fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800c2fe:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800c302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c306:	fbb2 f3f3 	udiv	r3, r2, r3
 800c30a:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800c30c:	4b98      	ldr	r3, [pc, #608]	@ (800c570 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800c30e:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800c310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c314:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800c316:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800c31a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800c31c:	f240 6377 	movw	r3, #1655	@ 0x677
 800c320:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c322:	2300      	movs	r3, #0
 800c324:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6a1b      	ldr	r3, [r3, #32]
 800c32c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	691b      	ldr	r3, [r3, #16]
 800c332:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c336:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800c33a:	0c1b      	lsrs	r3, r3, #16
 800c33c:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800c344:	f107 0310 	add.w	r3, r7, #16
 800c348:	461a      	mov	r2, r3
 800c34a:	68b9      	ldr	r1, [r7, #8]
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f7ff fe78 	bl	800c042 <VL53L0X_get_total_signal_rate>
 800c352:	4603      	mov	r3, r0
 800c354:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800c358:	f107 0314 	add.w	r3, r7, #20
 800c35c:	461a      	mov	r2, r3
 800c35e:	68b9      	ldr	r1, [r7, #8]
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7ff fe3f 	bl	800bfe4 <VL53L0X_get_total_xtalk_rate>
 800c366:	4603      	mov	r3, r0
 800c368:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c372:	fb02 f303 	mul.w	r3, r2, r3
 800c376:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800c378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c37a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800c37e:	0c1b      	lsrs	r3, r3, #16
 800c380:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c388:	fb02 f303 	mul.w	r3, r2, r3
 800c38c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800c390:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c396:	429a      	cmp	r2, r3
 800c398:	d902      	bls.n	800c3a0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800c39a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c39c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800c3a0:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d168      	bne.n	800c47a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c3ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800c3b8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c3bc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f7ff f93c 	bl	800b644 <VL53L0X_calc_timeout_mclks>
 800c3cc:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c3d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800c3de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c3e2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f7ff f929 	bl	800b644 <VL53L0X_calc_timeout_mclks>
 800c3f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800c3fa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800c3fe:	2b08      	cmp	r3, #8
 800c400:	d102      	bne.n	800c408 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800c402:	2302      	movs	r3, #2
 800c404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800c408:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c40c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800c40e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c412:	fb02 f303 	mul.w	r3, r2, r3
 800c416:	02db      	lsls	r3, r3, #11
 800c418:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c41c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c420:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c424:	4a53      	ldr	r2, [pc, #332]	@ (800c574 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c426:	fba2 2303 	umull	r2, r3, r2, r3
 800c42a:	099b      	lsrs	r3, r3, #6
 800c42c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800c430:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c434:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c436:	fb02 f303 	mul.w	r3, r2, r3
 800c43a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c43e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c442:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c446:	4a4b      	ldr	r2, [pc, #300]	@ (800c574 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c448:	fba2 2303 	umull	r2, r3, r2, r3
 800c44c:	099b      	lsrs	r3, r3, #6
 800c44e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	3380      	adds	r3, #128	@ 0x80
 800c456:	0a1b      	lsrs	r3, r3, #8
 800c458:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c460:	fb02 f303 	mul.w	r3, r2, r3
 800c464:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c468:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c46c:	3380      	adds	r3, #128	@ 0x80
 800c46e:	0a1b      	lsrs	r3, r3, #8
 800c470:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	021b      	lsls	r3, r3, #8
 800c478:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c47a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d002      	beq.n	800c488 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800c482:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800c486:	e15e      	b.n	800c746 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800c488:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10c      	bne.n	800c4a8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c494:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c49c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	e14c      	b.n	800c742 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800c4a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d102      	bne.n	800c4b6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c4b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c4ba:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c4bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4be:	041a      	lsls	r2, r3, #16
 800c4c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c4ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c4ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d902      	bls.n	800c4da <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c4d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c4da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c4de:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c4e2:	fb02 f303 	mul.w	r3, r2, r3
 800c4e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c4ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	005b      	lsls	r3, r3, #1
 800c4f2:	4413      	add	r3, r2
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fe fb01 	bl	800aafe <VL53L0X_isqrt>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	891b      	ldrh	r3, [r3, #8]
 800c506:	461a      	mov	r2, r3
 800c508:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c50a:	fb02 f303 	mul.w	r3, r2, r3
 800c50e:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c510:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c512:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c518:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c51a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c51c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c520:	4a14      	ldr	r2, [pc, #80]	@ (800c574 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c522:	fba2 2303 	umull	r2, r3, r2, r3
 800c526:	099b      	lsrs	r3, r3, #6
 800c528:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800c52a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c52c:	041b      	lsls	r3, r3, #16
 800c52e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c532:	4a10      	ldr	r2, [pc, #64]	@ (800c574 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c534:	fba2 2303 	umull	r2, r3, r2, r3
 800c538:	099b      	lsrs	r3, r3, #6
 800c53a:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800c53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c53e:	021b      	lsls	r3, r3, #8
 800c540:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c542:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c546:	fbb2 f3f3 	udiv	r3, r2, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	bfb8      	it	lt
 800c54e:	425b      	neglt	r3, r3
 800c550:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c554:	021b      	lsls	r3, r3, #8
 800c556:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	7e1b      	ldrb	r3, [r3, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800c560:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c564:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c568:	e033      	b.n	800c5d2 <VL53L0X_calc_sigma_estimate+0x30e>
 800c56a:	bf00      	nop
 800c56c:	028f87ae 	.word	0x028f87ae
 800c570:	0006999a 	.word	0x0006999a
 800c574:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c578:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c57a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800c586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c588:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800c58c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c590:	fb02 f303 	mul.w	r3, r2, r3
 800c594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c598:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c59c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c59e:	4413      	add	r3, r2
 800c5a0:	0c1b      	lsrs	r3, r3, #16
 800c5a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800c5a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5aa:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800c5ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800c5b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5b6:	085b      	lsrs	r3, r3, #1
 800c5b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800c5bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5c0:	fb03 f303 	mul.w	r3, r3, r3
 800c5c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800c5c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5cc:	0b9b      	lsrs	r3, r3, #14
 800c5ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800c5d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5d8:	fb02 f303 	mul.w	r3, r2, r3
 800c5dc:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800c5e4:	0c1b      	lsrs	r3, r3, #16
 800c5e6:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ea:	fb03 f303 	mul.w	r3, r3, r3
 800c5ee:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800c5f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800c5fc:	0c1b      	lsrs	r3, r3, #16
 800c5fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c602:	fb03 f303 	mul.w	r3, r3, r3
 800c606:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60c:	4413      	add	r3, r2
 800c60e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c612:	f7fe fa74 	bl	800aafe <VL53L0X_isqrt>
 800c616:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61a:	041b      	lsls	r3, r3, #16
 800c61c:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	3332      	adds	r3, #50	@ 0x32
 800c622:	4a4b      	ldr	r2, [pc, #300]	@ (800c750 <VL53L0X_calc_sigma_estimate+0x48c>)
 800c624:	fba2 2303 	umull	r2, r3, r2, r3
 800c628:	095a      	lsrs	r2, r3, #5
 800c62a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c638:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 800c63c:	fb02 f303 	mul.w	r3, r2, r3
 800c640:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c648:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800c64c:	3308      	adds	r3, #8
 800c64e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 800c652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c656:	4a3f      	ldr	r2, [pc, #252]	@ (800c754 <VL53L0X_calc_sigma_estimate+0x490>)
 800c658:	fba2 2303 	umull	r2, r3, r2, r3
 800c65c:	0b5b      	lsrs	r3, r3, #13
 800c65e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c666:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c668:	429a      	cmp	r2, r3
 800c66a:	d902      	bls.n	800c672 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c66c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c66e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800c672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c67a:	4413      	add	r3, r2
 800c67c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800c680:	4a35      	ldr	r2, [pc, #212]	@ (800c758 <VL53L0X_calc_sigma_estimate+0x494>)
 800c682:	fba2 2303 	umull	r2, r3, r2, r3
 800c686:	099b      	lsrs	r3, r3, #6
 800c688:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800c68a:	6a3b      	ldr	r3, [r7, #32]
 800c68c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800c68e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c692:	441a      	add	r2, r3
 800c694:	6a3b      	ldr	r3, [r7, #32]
 800c696:	fbb2 f3f3 	udiv	r3, r2, r3
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fe fa2f 	bl	800aafe <VL53L0X_isqrt>
 800c6a0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	021b      	lsls	r3, r3, #8
 800c6a6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c6ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c758 <VL53L0X_calc_sigma_estimate+0x494>)
 800c6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b4:	099b      	lsrs	r3, r3, #6
 800c6b6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c6b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c6bc:	fb03 f303 	mul.w	r3, r3, r3
 800c6c0:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	fb03 f303 	mul.w	r3, r3, r3
 800c6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c6ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ce:	4413      	add	r3, r2
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fe fa14 	bl	800aafe <VL53L0X_isqrt>
 800c6d6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c6de:	fb02 f303 	mul.w	r3, r2, r3
 800c6e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c6e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d009      	beq.n	800c700 <VL53L0X_calc_sigma_estimate+0x43c>
 800c6ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d005      	beq.n	800c700 <VL53L0X_calc_sigma_estimate+0x43c>
 800c6f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c6f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d903      	bls.n	800c708 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c70e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800c71a:	6939      	ldr	r1, [r7, #16]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	9303      	str	r3, [sp, #12]
 800c720:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c724:	9302      	str	r3, [sp, #8]
 800c726:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c72a:	9301      	str	r3, [sp, #4]
 800c72c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c734:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	f7ff fca8 	bl	800c08c <VL53L0X_calc_dmax>
 800c73c:	4603      	mov	r3, r0
 800c73e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c742:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800c746:	4618      	mov	r0, r3
 800c748:	37c0      	adds	r7, #192	@ 0xc0
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	51eb851f 	.word	0x51eb851f
 800c754:	d1b71759 	.word	0xd1b71759
 800c758:	10624dd3 	.word	0x10624dd3

0800c75c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b090      	sub	sp, #64	@ 0x40
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	607a      	str	r2, [r7, #4]
 800c766:	461a      	mov	r2, r3
 800c768:	460b      	mov	r3, r1
 800c76a:	72fb      	strb	r3, [r7, #11]
 800c76c:	4613      	mov	r3, r2
 800c76e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c770:	2300      	movs	r3, #0
 800c772:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 800c77c:	2300      	movs	r3, #0
 800c77e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c788:	2300      	movs	r3, #0
 800c78a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c7ae:	7afb      	ldrb	r3, [r7, #11]
 800c7b0:	10db      	asrs	r3, r3, #3
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	f003 030f 	and.w	r3, r3, #15
 800c7b8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c7bc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d017      	beq.n	800c7f4 <VL53L0X_get_pal_range_status+0x98>
 800c7c4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c7c8:	2b05      	cmp	r3, #5
 800c7ca:	d013      	beq.n	800c7f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c7cc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c7d0:	2b07      	cmp	r3, #7
 800c7d2:	d00f      	beq.n	800c7f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c7d4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c7d8:	2b0c      	cmp	r3, #12
 800c7da:	d00b      	beq.n	800c7f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c7dc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c7e0:	2b0d      	cmp	r3, #13
 800c7e2:	d007      	beq.n	800c7f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c7e4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c7e8:	2b0e      	cmp	r3, #14
 800c7ea:	d003      	beq.n	800c7f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c7ec:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c7f0:	2b0f      	cmp	r3, #15
 800c7f2:	d103      	bne.n	800c7fc <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800c7fa:	e002      	b.n	800c802 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c802:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c806:	2b00      	cmp	r3, #0
 800c808:	d109      	bne.n	800c81e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c80a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800c80e:	461a      	mov	r2, r3
 800c810:	2100      	movs	r1, #0
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f7fc fc96 	bl	8009144 <VL53L0X_GetLimitCheckEnable>
 800c818:	4603      	mov	r3, r0
 800c81a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c81e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c822:	2b00      	cmp	r3, #0
 800c824:	d02e      	beq.n	800c884 <VL53L0X_get_pal_range_status+0x128>
 800c826:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d12a      	bne.n	800c884 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800c82e:	f107 0310 	add.w	r3, r7, #16
 800c832:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c836:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f7ff fd43 	bl	800c2c4 <VL53L0X_calc_sigma_estimate>
 800c83e:	4603      	mov	r3, r0
 800c840:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800c844:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d103      	bne.n	800c854 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	b29a      	uxth	r2, r3
 800c850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c852:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c854:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d113      	bne.n	800c884 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c85c:	f107 0320 	add.w	r3, r7, #32
 800c860:	461a      	mov	r2, r3
 800c862:	2100      	movs	r1, #0
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f7fc fcf3 	bl	8009250 <VL53L0X_GetLimitCheckValue>
 800c86a:	4603      	mov	r3, r0
 800c86c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c870:	6a3b      	ldr	r3, [r7, #32]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d006      	beq.n	800c884 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800c876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c878:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d902      	bls.n	800c884 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c87e:	2301      	movs	r3, #1
 800c880:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c884:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d109      	bne.n	800c8a0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c88c:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 800c890:	461a      	mov	r2, r3
 800c892:	2102      	movs	r1, #2
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f7fc fc55 	bl	8009144 <VL53L0X_GetLimitCheckEnable>
 800c89a:	4603      	mov	r3, r0
 800c89c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c8a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d044      	beq.n	800c932 <VL53L0X_get_pal_range_status+0x1d6>
 800c8a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d140      	bne.n	800c932 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c8b0:	f107 031c 	add.w	r3, r7, #28
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	2102      	movs	r1, #2
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f7fc fcc9 	bl	8009250 <VL53L0X_GetLimitCheckValue>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800c8c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d107      	bne.n	800c8dc <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	21ff      	movs	r1, #255	@ 0xff
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 f9bb 	bl	800cc4c <VL53L0X_WrByte>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800c8dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d109      	bne.n	800c8f8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800c8e4:	f107 0316 	add.w	r3, r7, #22
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	21b6      	movs	r1, #182	@ 0xb6
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f000 fa59 	bl	800cda4 <VL53L0X_RdWord>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800c8f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d107      	bne.n	800c910 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c900:	2200      	movs	r2, #0
 800c902:	21ff      	movs	r1, #255	@ 0xff
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f000 f9a1 	bl	800cc4c <VL53L0X_WrByte>
 800c90a:	4603      	mov	r3, r0
 800c90c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c910:	8afb      	ldrh	r3, [r7, #22]
 800c912:	025b      	lsls	r3, r3, #9
 800c914:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c91a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d006      	beq.n	800c932 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c924:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c928:	429a      	cmp	r2, r3
 800c92a:	d902      	bls.n	800c932 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c92c:	2301      	movs	r3, #1
 800c92e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c932:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c936:	2b00      	cmp	r3, #0
 800c938:	d109      	bne.n	800c94e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c93a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c93e:	461a      	mov	r2, r3
 800c940:	2103      	movs	r1, #3
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f7fc fbfe 	bl	8009144 <VL53L0X_GetLimitCheckEnable>
 800c948:	4603      	mov	r3, r0
 800c94a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c94e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c952:	2b00      	cmp	r3, #0
 800c954:	d023      	beq.n	800c99e <VL53L0X_get_pal_range_status+0x242>
 800c956:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d11f      	bne.n	800c99e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c95e:	893b      	ldrh	r3, [r7, #8]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d102      	bne.n	800c96a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	637b      	str	r3, [r7, #52]	@ 0x34
 800c968:	e005      	b.n	800c976 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	021a      	lsls	r2, r3, #8
 800c96e:	893b      	ldrh	r3, [r7, #8]
 800c970:	fbb2 f3f3 	udiv	r3, r2, r3
 800c974:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c976:	f107 0318 	add.w	r3, r7, #24
 800c97a:	461a      	mov	r2, r3
 800c97c:	2103      	movs	r1, #3
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f7fc fc66 	bl	8009250 <VL53L0X_GetLimitCheckValue>
 800c984:	4603      	mov	r3, r0
 800c986:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d006      	beq.n	800c99e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c990:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800c992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c994:	429a      	cmp	r2, r3
 800c996:	d202      	bcs.n	800c99e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800c998:	2301      	movs	r3, #1
 800c99a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c99e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d14a      	bne.n	800ca3c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800c9a6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d103      	bne.n	800c9b6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800c9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9b0:	22ff      	movs	r2, #255	@ 0xff
 800c9b2:	701a      	strb	r2, [r3, #0]
 800c9b4:	e042      	b.n	800ca3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800c9b6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d007      	beq.n	800c9ce <VL53L0X_get_pal_range_status+0x272>
 800c9be:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d003      	beq.n	800c9ce <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800c9c6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d103      	bne.n	800c9d6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800c9ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9d0:	2205      	movs	r2, #5
 800c9d2:	701a      	strb	r2, [r3, #0]
 800c9d4:	e032      	b.n	800ca3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800c9d6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c9da:	2b06      	cmp	r3, #6
 800c9dc:	d003      	beq.n	800c9e6 <VL53L0X_get_pal_range_status+0x28a>
 800c9de:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c9e2:	2b09      	cmp	r3, #9
 800c9e4:	d103      	bne.n	800c9ee <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800c9e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9e8:	2204      	movs	r2, #4
 800c9ea:	701a      	strb	r2, [r3, #0]
 800c9ec:	e026      	b.n	800ca3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800c9ee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c9f2:	2b08      	cmp	r3, #8
 800c9f4:	d007      	beq.n	800ca06 <VL53L0X_get_pal_range_status+0x2aa>
 800c9f6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c9fa:	2b0a      	cmp	r3, #10
 800c9fc:	d003      	beq.n	800ca06 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800c9fe:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d103      	bne.n	800ca0e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ca06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca08:	2203      	movs	r2, #3
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	e016      	b.n	800ca3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ca0e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ca12:	2b04      	cmp	r3, #4
 800ca14:	d003      	beq.n	800ca1e <VL53L0X_get_pal_range_status+0x2c2>
 800ca16:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d103      	bne.n	800ca26 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ca1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca20:	2202      	movs	r2, #2
 800ca22:	701a      	strb	r2, [r3, #0]
 800ca24:	e00a      	b.n	800ca3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ca26:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d103      	bne.n	800ca36 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ca2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca30:	2201      	movs	r2, #1
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	e002      	b.n	800ca3c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ca36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca38:	2200      	movs	r2, #0
 800ca3a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800ca3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d102      	bne.n	800ca4a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800ca44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca46:	2200      	movs	r2, #0
 800ca48:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ca4a:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 800ca4e:	461a      	mov	r2, r3
 800ca50:	2101      	movs	r1, #1
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f7fc fb76 	bl	8009144 <VL53L0X_GetLimitCheckEnable>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ca5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d14f      	bne.n	800cb06 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ca66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <VL53L0X_get_pal_range_status+0x31a>
 800ca6e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d103      	bne.n	800ca7e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800ca76:	2301      	movs	r3, #1
 800ca78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800ca7c:	e002      	b.n	800ca84 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800ca8a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ca8e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	d003      	beq.n	800ca9e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ca96:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d103      	bne.n	800caa6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800caa4:	e002      	b.n	800caac <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800cab2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800cab6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <VL53L0X_get_pal_range_status+0x36a>
 800cabe:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d103      	bne.n	800cace <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800cac6:	2301      	movs	r3, #1
 800cac8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800cacc:	e002      	b.n	800cad4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800cada:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800cade:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d003      	beq.n	800caee <VL53L0X_get_pal_range_status+0x392>
 800cae6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800caea:	2b01      	cmp	r3, #1
 800caec:	d103      	bne.n	800caf6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800caee:	2301      	movs	r3, #1
 800caf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800caf4:	e002      	b.n	800cafc <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800cb02:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cb06:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3740      	adds	r7, #64	@ 0x40
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b088      	sub	sp, #32
 800cb16:	af02      	add	r7, sp, #8
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	330a      	adds	r3, #10
 800cb22:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800cb30:	4619      	mov	r1, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	f7f7 fb7b 	bl	8004238 <HAL_I2C_Master_Transmit>
 800cb42:	4603      	mov	r3, r0
 800cb44:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800cb46:	693b      	ldr	r3, [r7, #16]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3718      	adds	r7, #24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af02      	add	r7, sp, #8
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	330a      	adds	r3, #10
 800cb60:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800cb6e:	f043 0301 	orr.w	r3, r3, #1
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	4619      	mov	r1, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	f7f7 fc71 	bl	8004468 <HAL_I2C_Master_Receive>
 800cb86:	4603      	mov	r3, r0
 800cb88:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800cb8a:	693b      	ldr	r3, [r7, #16]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3718      	adds	r7, #24
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	607a      	str	r2, [r7, #4]
 800cb9e:	603b      	str	r3, [r7, #0]
 800cba0:	460b      	mov	r3, r1
 800cba2:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cba4:	2300      	movs	r3, #0
 800cba6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	2b3f      	cmp	r3, #63	@ 0x3f
 800cbac:	d902      	bls.n	800cbb4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800cbae:	f06f 0303 	mvn.w	r3, #3
 800cbb2:	e016      	b.n	800cbe2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800cbb4:	4a0d      	ldr	r2, [pc, #52]	@ (800cbec <VL53L0X_WriteMulti+0x58>)
 800cbb6:	7afb      	ldrb	r3, [r7, #11]
 800cbb8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	480c      	ldr	r0, [pc, #48]	@ (800cbf0 <VL53L0X_WriteMulti+0x5c>)
 800cbc0:	f001 f867 	bl	800dc92 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4908      	ldr	r1, [pc, #32]	@ (800cbec <VL53L0X_WriteMulti+0x58>)
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f7ff ffa0 	bl	800cb12 <_I2CWrite>
 800cbd2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cbda:	23ec      	movs	r3, #236	@ 0xec
 800cbdc:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800cbde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200408c4 	.word	0x200408c4
 800cbf0:	200408c5 	.word	0x200408c5

0800cbf4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	607a      	str	r2, [r7, #4]
 800cbfe:	603b      	str	r3, [r7, #0]
 800cc00:	460b      	mov	r3, r1
 800cc02:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc04:	2300      	movs	r3, #0
 800cc06:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cc08:	f107 030b 	add.w	r3, r7, #11
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	4619      	mov	r1, r3
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff ff7e 	bl	800cb12 <_I2CWrite>
 800cc16:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d002      	beq.n	800cc24 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc1e:	23ec      	movs	r3, #236	@ 0xec
 800cc20:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cc22:	e00c      	b.n	800cc3e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	6879      	ldr	r1, [r7, #4]
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f7ff ff91 	bl	800cb50 <_I2CRead>
 800cc2e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc36:	23ec      	movs	r3, #236	@ 0xec
 800cc38:	75fb      	strb	r3, [r7, #23]
 800cc3a:	e000      	b.n	800cc3e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800cc3c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800cc3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3718      	adds	r7, #24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
	...

0800cc4c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	460b      	mov	r3, r1
 800cc56:	70fb      	strb	r3, [r7, #3]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800cc60:	4a0b      	ldr	r2, [pc, #44]	@ (800cc90 <VL53L0X_WrByte+0x44>)
 800cc62:	78fb      	ldrb	r3, [r7, #3]
 800cc64:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800cc66:	4a0a      	ldr	r2, [pc, #40]	@ (800cc90 <VL53L0X_WrByte+0x44>)
 800cc68:	78bb      	ldrb	r3, [r7, #2]
 800cc6a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	4908      	ldr	r1, [pc, #32]	@ (800cc90 <VL53L0X_WrByte+0x44>)
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff ff4e 	bl	800cb12 <_I2CWrite>
 800cc76:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d001      	beq.n	800cc82 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc7e:	23ec      	movs	r3, #236	@ 0xec
 800cc80:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800cc82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	200408c4 	.word	0x200408c4

0800cc94 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	70fb      	strb	r3, [r7, #3]
 800cca0:	4613      	mov	r3, r2
 800cca2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800cca8:	4a0e      	ldr	r2, [pc, #56]	@ (800cce4 <VL53L0X_WrWord+0x50>)
 800ccaa:	78fb      	ldrb	r3, [r7, #3]
 800ccac:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ccae:	883b      	ldrh	r3, [r7, #0]
 800ccb0:	0a1b      	lsrs	r3, r3, #8
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	4b0b      	ldr	r3, [pc, #44]	@ (800cce4 <VL53L0X_WrWord+0x50>)
 800ccb8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ccba:	883b      	ldrh	r3, [r7, #0]
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	4b09      	ldr	r3, [pc, #36]	@ (800cce4 <VL53L0X_WrWord+0x50>)
 800ccc0:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ccc2:	2203      	movs	r2, #3
 800ccc4:	4907      	ldr	r1, [pc, #28]	@ (800cce4 <VL53L0X_WrWord+0x50>)
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff ff23 	bl	800cb12 <_I2CWrite>
 800cccc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ccd4:	23ec      	movs	r3, #236	@ 0xec
 800ccd6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ccd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	200408c4 	.word	0x200408c4

0800cce8 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	70fb      	strb	r3, [r7, #3]
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	70bb      	strb	r3, [r7, #2]
 800ccfe:	4613      	mov	r3, r2
 800cd00:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd02:	2300      	movs	r3, #0
 800cd04:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800cd06:	f107 020e 	add.w	r2, r7, #14
 800cd0a:	78fb      	ldrb	r3, [r7, #3]
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f81e 	bl	800cd50 <VL53L0X_RdByte>
 800cd14:	4603      	mov	r3, r0
 800cd16:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800cd18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d110      	bne.n	800cd42 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800cd20:	7bba      	ldrb	r2, [r7, #14]
 800cd22:	78bb      	ldrb	r3, [r7, #2]
 800cd24:	4013      	ands	r3, r2
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	787b      	ldrb	r3, [r7, #1]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800cd30:	7bba      	ldrb	r2, [r7, #14]
 800cd32:	78fb      	ldrb	r3, [r7, #3]
 800cd34:	4619      	mov	r1, r3
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7ff ff88 	bl	800cc4c <VL53L0X_WrByte>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73fb      	strb	r3, [r7, #15]
 800cd40:	e000      	b.n	800cd44 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800cd42:	bf00      	nop
done:
    return Status;
 800cd44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cd62:	f107 030b 	add.w	r3, r7, #11
 800cd66:	2201      	movs	r2, #1
 800cd68:	4619      	mov	r1, r3
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f7ff fed1 	bl	800cb12 <_I2CWrite>
 800cd70:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd78:	23ec      	movs	r3, #236	@ 0xec
 800cd7a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cd7c:	e00c      	b.n	800cd98 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800cd7e:	2201      	movs	r2, #1
 800cd80:	6879      	ldr	r1, [r7, #4]
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7ff fee4 	bl	800cb50 <_I2CRead>
 800cd88:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd90:	23ec      	movs	r3, #236	@ 0xec
 800cd92:	75fb      	strb	r3, [r7, #23]
 800cd94:	e000      	b.n	800cd98 <VL53L0X_RdByte+0x48>
    }
done:
 800cd96:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800cd98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3718      	adds	r7, #24
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	460b      	mov	r3, r1
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cdb6:	f107 030b 	add.w	r3, r7, #11
 800cdba:	2201      	movs	r2, #1
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f7ff fea7 	bl	800cb12 <_I2CWrite>
 800cdc4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cdcc:	23ec      	movs	r3, #236	@ 0xec
 800cdce:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cdd0:	e015      	b.n	800cdfe <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	490d      	ldr	r1, [pc, #52]	@ (800ce0c <VL53L0X_RdWord+0x68>)
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f7ff feba 	bl	800cb50 <_I2CRead>
 800cddc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cde4:	23ec      	movs	r3, #236	@ 0xec
 800cde6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cde8:	e009      	b.n	800cdfe <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800cdea:	4b08      	ldr	r3, [pc, #32]	@ (800ce0c <VL53L0X_RdWord+0x68>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	021b      	lsls	r3, r3, #8
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	4a06      	ldr	r2, [pc, #24]	@ (800ce0c <VL53L0X_RdWord+0x68>)
 800cdf4:	7852      	ldrb	r2, [r2, #1]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800cdfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3718      	adds	r7, #24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	200408c4 	.word	0x200408c4

0800ce10 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	607a      	str	r2, [r7, #4]
 800ce1c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ce22:	f107 030b 	add.w	r3, r7, #11
 800ce26:	2201      	movs	r2, #1
 800ce28:	4619      	mov	r1, r3
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f7ff fe71 	bl	800cb12 <_I2CWrite>
 800ce30:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce38:	23ec      	movs	r3, #236	@ 0xec
 800ce3a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ce3c:	e01b      	b.n	800ce76 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ce3e:	2204      	movs	r2, #4
 800ce40:	4910      	ldr	r1, [pc, #64]	@ (800ce84 <VL53L0X_RdDWord+0x74>)
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f7ff fe84 	bl	800cb50 <_I2CRead>
 800ce48:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce50:	23ec      	movs	r3, #236	@ 0xec
 800ce52:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ce54:	e00f      	b.n	800ce76 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ce56:	4b0b      	ldr	r3, [pc, #44]	@ (800ce84 <VL53L0X_RdDWord+0x74>)
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	061a      	lsls	r2, r3, #24
 800ce5c:	4b09      	ldr	r3, [pc, #36]	@ (800ce84 <VL53L0X_RdDWord+0x74>)
 800ce5e:	785b      	ldrb	r3, [r3, #1]
 800ce60:	041b      	lsls	r3, r3, #16
 800ce62:	441a      	add	r2, r3
 800ce64:	4b07      	ldr	r3, [pc, #28]	@ (800ce84 <VL53L0X_RdDWord+0x74>)
 800ce66:	789b      	ldrb	r3, [r3, #2]
 800ce68:	021b      	lsls	r3, r3, #8
 800ce6a:	4413      	add	r3, r2
 800ce6c:	4a05      	ldr	r2, [pc, #20]	@ (800ce84 <VL53L0X_RdDWord+0x74>)
 800ce6e:	78d2      	ldrb	r2, [r2, #3]
 800ce70:	441a      	add	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ce76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	200408c4 	.word	0x200408c4

0800ce88 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ce90:	2300      	movs	r3, #0
 800ce92:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ce94:	2002      	movs	r0, #2
 800ce96:	f7f6 fe3b 	bl	8003b10 <HAL_Delay>
    return status;
 800ce9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <__cvt>:
 800cea6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ceaa:	ec57 6b10 	vmov	r6, r7, d0
 800ceae:	2f00      	cmp	r7, #0
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	463b      	mov	r3, r7
 800ceb6:	bfbb      	ittet	lt
 800ceb8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cebc:	461f      	movlt	r7, r3
 800cebe:	2300      	movge	r3, #0
 800cec0:	232d      	movlt	r3, #45	@ 0x2d
 800cec2:	700b      	strb	r3, [r1, #0]
 800cec4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cec6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ceca:	4691      	mov	r9, r2
 800cecc:	f023 0820 	bic.w	r8, r3, #32
 800ced0:	bfbc      	itt	lt
 800ced2:	4632      	movlt	r2, r6
 800ced4:	4616      	movlt	r6, r2
 800ced6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ceda:	d005      	beq.n	800cee8 <__cvt+0x42>
 800cedc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cee0:	d100      	bne.n	800cee4 <__cvt+0x3e>
 800cee2:	3401      	adds	r4, #1
 800cee4:	2102      	movs	r1, #2
 800cee6:	e000      	b.n	800ceea <__cvt+0x44>
 800cee8:	2103      	movs	r1, #3
 800ceea:	ab03      	add	r3, sp, #12
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	ab02      	add	r3, sp, #8
 800cef0:	9300      	str	r3, [sp, #0]
 800cef2:	ec47 6b10 	vmov	d0, r6, r7
 800cef6:	4653      	mov	r3, sl
 800cef8:	4622      	mov	r2, r4
 800cefa:	f000 ff61 	bl	800ddc0 <_dtoa_r>
 800cefe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf02:	4605      	mov	r5, r0
 800cf04:	d119      	bne.n	800cf3a <__cvt+0x94>
 800cf06:	f019 0f01 	tst.w	r9, #1
 800cf0a:	d00e      	beq.n	800cf2a <__cvt+0x84>
 800cf0c:	eb00 0904 	add.w	r9, r0, r4
 800cf10:	2200      	movs	r2, #0
 800cf12:	2300      	movs	r3, #0
 800cf14:	4630      	mov	r0, r6
 800cf16:	4639      	mov	r1, r7
 800cf18:	f7f3 fdee 	bl	8000af8 <__aeabi_dcmpeq>
 800cf1c:	b108      	cbz	r0, 800cf22 <__cvt+0x7c>
 800cf1e:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf22:	2230      	movs	r2, #48	@ 0x30
 800cf24:	9b03      	ldr	r3, [sp, #12]
 800cf26:	454b      	cmp	r3, r9
 800cf28:	d31e      	bcc.n	800cf68 <__cvt+0xc2>
 800cf2a:	9b03      	ldr	r3, [sp, #12]
 800cf2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf2e:	1b5b      	subs	r3, r3, r5
 800cf30:	4628      	mov	r0, r5
 800cf32:	6013      	str	r3, [r2, #0]
 800cf34:	b004      	add	sp, #16
 800cf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf3e:	eb00 0904 	add.w	r9, r0, r4
 800cf42:	d1e5      	bne.n	800cf10 <__cvt+0x6a>
 800cf44:	7803      	ldrb	r3, [r0, #0]
 800cf46:	2b30      	cmp	r3, #48	@ 0x30
 800cf48:	d10a      	bne.n	800cf60 <__cvt+0xba>
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4630      	mov	r0, r6
 800cf50:	4639      	mov	r1, r7
 800cf52:	f7f3 fdd1 	bl	8000af8 <__aeabi_dcmpeq>
 800cf56:	b918      	cbnz	r0, 800cf60 <__cvt+0xba>
 800cf58:	f1c4 0401 	rsb	r4, r4, #1
 800cf5c:	f8ca 4000 	str.w	r4, [sl]
 800cf60:	f8da 3000 	ldr.w	r3, [sl]
 800cf64:	4499      	add	r9, r3
 800cf66:	e7d3      	b.n	800cf10 <__cvt+0x6a>
 800cf68:	1c59      	adds	r1, r3, #1
 800cf6a:	9103      	str	r1, [sp, #12]
 800cf6c:	701a      	strb	r2, [r3, #0]
 800cf6e:	e7d9      	b.n	800cf24 <__cvt+0x7e>

0800cf70 <__exponent>:
 800cf70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf72:	2900      	cmp	r1, #0
 800cf74:	bfba      	itte	lt
 800cf76:	4249      	neglt	r1, r1
 800cf78:	232d      	movlt	r3, #45	@ 0x2d
 800cf7a:	232b      	movge	r3, #43	@ 0x2b
 800cf7c:	2909      	cmp	r1, #9
 800cf7e:	7002      	strb	r2, [r0, #0]
 800cf80:	7043      	strb	r3, [r0, #1]
 800cf82:	dd29      	ble.n	800cfd8 <__exponent+0x68>
 800cf84:	f10d 0307 	add.w	r3, sp, #7
 800cf88:	461d      	mov	r5, r3
 800cf8a:	270a      	movs	r7, #10
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	fbb1 f6f7 	udiv	r6, r1, r7
 800cf92:	fb07 1416 	mls	r4, r7, r6, r1
 800cf96:	3430      	adds	r4, #48	@ 0x30
 800cf98:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cf9c:	460c      	mov	r4, r1
 800cf9e:	2c63      	cmp	r4, #99	@ 0x63
 800cfa0:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	dcf1      	bgt.n	800cf8c <__exponent+0x1c>
 800cfa8:	3130      	adds	r1, #48	@ 0x30
 800cfaa:	1e94      	subs	r4, r2, #2
 800cfac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cfb0:	1c41      	adds	r1, r0, #1
 800cfb2:	4623      	mov	r3, r4
 800cfb4:	42ab      	cmp	r3, r5
 800cfb6:	d30a      	bcc.n	800cfce <__exponent+0x5e>
 800cfb8:	f10d 0309 	add.w	r3, sp, #9
 800cfbc:	1a9b      	subs	r3, r3, r2
 800cfbe:	42ac      	cmp	r4, r5
 800cfc0:	bf88      	it	hi
 800cfc2:	2300      	movhi	r3, #0
 800cfc4:	3302      	adds	r3, #2
 800cfc6:	4403      	add	r3, r0
 800cfc8:	1a18      	subs	r0, r3, r0
 800cfca:	b003      	add	sp, #12
 800cfcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfce:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cfd2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cfd6:	e7ed      	b.n	800cfb4 <__exponent+0x44>
 800cfd8:	2330      	movs	r3, #48	@ 0x30
 800cfda:	3130      	adds	r1, #48	@ 0x30
 800cfdc:	7083      	strb	r3, [r0, #2]
 800cfde:	70c1      	strb	r1, [r0, #3]
 800cfe0:	1d03      	adds	r3, r0, #4
 800cfe2:	e7f1      	b.n	800cfc8 <__exponent+0x58>

0800cfe4 <_printf_float>:
 800cfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe8:	b08d      	sub	sp, #52	@ 0x34
 800cfea:	460c      	mov	r4, r1
 800cfec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cff0:	4616      	mov	r6, r2
 800cff2:	461f      	mov	r7, r3
 800cff4:	4605      	mov	r5, r0
 800cff6:	f000 fdcd 	bl	800db94 <_localeconv_r>
 800cffa:	6803      	ldr	r3, [r0, #0]
 800cffc:	9304      	str	r3, [sp, #16]
 800cffe:	4618      	mov	r0, r3
 800d000:	f7f3 f94e 	bl	80002a0 <strlen>
 800d004:	2300      	movs	r3, #0
 800d006:	930a      	str	r3, [sp, #40]	@ 0x28
 800d008:	f8d8 3000 	ldr.w	r3, [r8]
 800d00c:	9005      	str	r0, [sp, #20]
 800d00e:	3307      	adds	r3, #7
 800d010:	f023 0307 	bic.w	r3, r3, #7
 800d014:	f103 0208 	add.w	r2, r3, #8
 800d018:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d01c:	f8d4 b000 	ldr.w	fp, [r4]
 800d020:	f8c8 2000 	str.w	r2, [r8]
 800d024:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d028:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d02c:	9307      	str	r3, [sp, #28]
 800d02e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d032:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d03a:	4b9c      	ldr	r3, [pc, #624]	@ (800d2ac <_printf_float+0x2c8>)
 800d03c:	f04f 32ff 	mov.w	r2, #4294967295
 800d040:	f7f3 fd8c 	bl	8000b5c <__aeabi_dcmpun>
 800d044:	bb70      	cbnz	r0, 800d0a4 <_printf_float+0xc0>
 800d046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d04a:	4b98      	ldr	r3, [pc, #608]	@ (800d2ac <_printf_float+0x2c8>)
 800d04c:	f04f 32ff 	mov.w	r2, #4294967295
 800d050:	f7f3 fd66 	bl	8000b20 <__aeabi_dcmple>
 800d054:	bb30      	cbnz	r0, 800d0a4 <_printf_float+0xc0>
 800d056:	2200      	movs	r2, #0
 800d058:	2300      	movs	r3, #0
 800d05a:	4640      	mov	r0, r8
 800d05c:	4649      	mov	r1, r9
 800d05e:	f7f3 fd55 	bl	8000b0c <__aeabi_dcmplt>
 800d062:	b110      	cbz	r0, 800d06a <_printf_float+0x86>
 800d064:	232d      	movs	r3, #45	@ 0x2d
 800d066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d06a:	4a91      	ldr	r2, [pc, #580]	@ (800d2b0 <_printf_float+0x2cc>)
 800d06c:	4b91      	ldr	r3, [pc, #580]	@ (800d2b4 <_printf_float+0x2d0>)
 800d06e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d072:	bf8c      	ite	hi
 800d074:	4690      	movhi	r8, r2
 800d076:	4698      	movls	r8, r3
 800d078:	2303      	movs	r3, #3
 800d07a:	6123      	str	r3, [r4, #16]
 800d07c:	f02b 0304 	bic.w	r3, fp, #4
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	f04f 0900 	mov.w	r9, #0
 800d086:	9700      	str	r7, [sp, #0]
 800d088:	4633      	mov	r3, r6
 800d08a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d08c:	4621      	mov	r1, r4
 800d08e:	4628      	mov	r0, r5
 800d090:	f000 f9d2 	bl	800d438 <_printf_common>
 800d094:	3001      	adds	r0, #1
 800d096:	f040 808d 	bne.w	800d1b4 <_printf_float+0x1d0>
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295
 800d09e:	b00d      	add	sp, #52	@ 0x34
 800d0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a4:	4642      	mov	r2, r8
 800d0a6:	464b      	mov	r3, r9
 800d0a8:	4640      	mov	r0, r8
 800d0aa:	4649      	mov	r1, r9
 800d0ac:	f7f3 fd56 	bl	8000b5c <__aeabi_dcmpun>
 800d0b0:	b140      	cbz	r0, 800d0c4 <_printf_float+0xe0>
 800d0b2:	464b      	mov	r3, r9
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	bfbc      	itt	lt
 800d0b8:	232d      	movlt	r3, #45	@ 0x2d
 800d0ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d0be:	4a7e      	ldr	r2, [pc, #504]	@ (800d2b8 <_printf_float+0x2d4>)
 800d0c0:	4b7e      	ldr	r3, [pc, #504]	@ (800d2bc <_printf_float+0x2d8>)
 800d0c2:	e7d4      	b.n	800d06e <_printf_float+0x8a>
 800d0c4:	6863      	ldr	r3, [r4, #4]
 800d0c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d0ca:	9206      	str	r2, [sp, #24]
 800d0cc:	1c5a      	adds	r2, r3, #1
 800d0ce:	d13b      	bne.n	800d148 <_printf_float+0x164>
 800d0d0:	2306      	movs	r3, #6
 800d0d2:	6063      	str	r3, [r4, #4]
 800d0d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d0d8:	2300      	movs	r3, #0
 800d0da:	6022      	str	r2, [r4, #0]
 800d0dc:	9303      	str	r3, [sp, #12]
 800d0de:	ab0a      	add	r3, sp, #40	@ 0x28
 800d0e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d0e4:	ab09      	add	r3, sp, #36	@ 0x24
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	6861      	ldr	r1, [r4, #4]
 800d0ea:	ec49 8b10 	vmov	d0, r8, r9
 800d0ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	f7ff fed7 	bl	800cea6 <__cvt>
 800d0f8:	9b06      	ldr	r3, [sp, #24]
 800d0fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0fc:	2b47      	cmp	r3, #71	@ 0x47
 800d0fe:	4680      	mov	r8, r0
 800d100:	d129      	bne.n	800d156 <_printf_float+0x172>
 800d102:	1cc8      	adds	r0, r1, #3
 800d104:	db02      	blt.n	800d10c <_printf_float+0x128>
 800d106:	6863      	ldr	r3, [r4, #4]
 800d108:	4299      	cmp	r1, r3
 800d10a:	dd41      	ble.n	800d190 <_printf_float+0x1ac>
 800d10c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d110:	fa5f fa8a 	uxtb.w	sl, sl
 800d114:	3901      	subs	r1, #1
 800d116:	4652      	mov	r2, sl
 800d118:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d11c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d11e:	f7ff ff27 	bl	800cf70 <__exponent>
 800d122:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d124:	1813      	adds	r3, r2, r0
 800d126:	2a01      	cmp	r2, #1
 800d128:	4681      	mov	r9, r0
 800d12a:	6123      	str	r3, [r4, #16]
 800d12c:	dc02      	bgt.n	800d134 <_printf_float+0x150>
 800d12e:	6822      	ldr	r2, [r4, #0]
 800d130:	07d2      	lsls	r2, r2, #31
 800d132:	d501      	bpl.n	800d138 <_printf_float+0x154>
 800d134:	3301      	adds	r3, #1
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d0a2      	beq.n	800d086 <_printf_float+0xa2>
 800d140:	232d      	movs	r3, #45	@ 0x2d
 800d142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d146:	e79e      	b.n	800d086 <_printf_float+0xa2>
 800d148:	9a06      	ldr	r2, [sp, #24]
 800d14a:	2a47      	cmp	r2, #71	@ 0x47
 800d14c:	d1c2      	bne.n	800d0d4 <_printf_float+0xf0>
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1c0      	bne.n	800d0d4 <_printf_float+0xf0>
 800d152:	2301      	movs	r3, #1
 800d154:	e7bd      	b.n	800d0d2 <_printf_float+0xee>
 800d156:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d15a:	d9db      	bls.n	800d114 <_printf_float+0x130>
 800d15c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d160:	d118      	bne.n	800d194 <_printf_float+0x1b0>
 800d162:	2900      	cmp	r1, #0
 800d164:	6863      	ldr	r3, [r4, #4]
 800d166:	dd0b      	ble.n	800d180 <_printf_float+0x19c>
 800d168:	6121      	str	r1, [r4, #16]
 800d16a:	b913      	cbnz	r3, 800d172 <_printf_float+0x18e>
 800d16c:	6822      	ldr	r2, [r4, #0]
 800d16e:	07d0      	lsls	r0, r2, #31
 800d170:	d502      	bpl.n	800d178 <_printf_float+0x194>
 800d172:	3301      	adds	r3, #1
 800d174:	440b      	add	r3, r1
 800d176:	6123      	str	r3, [r4, #16]
 800d178:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d17a:	f04f 0900 	mov.w	r9, #0
 800d17e:	e7db      	b.n	800d138 <_printf_float+0x154>
 800d180:	b913      	cbnz	r3, 800d188 <_printf_float+0x1a4>
 800d182:	6822      	ldr	r2, [r4, #0]
 800d184:	07d2      	lsls	r2, r2, #31
 800d186:	d501      	bpl.n	800d18c <_printf_float+0x1a8>
 800d188:	3302      	adds	r3, #2
 800d18a:	e7f4      	b.n	800d176 <_printf_float+0x192>
 800d18c:	2301      	movs	r3, #1
 800d18e:	e7f2      	b.n	800d176 <_printf_float+0x192>
 800d190:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d196:	4299      	cmp	r1, r3
 800d198:	db05      	blt.n	800d1a6 <_printf_float+0x1c2>
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	6121      	str	r1, [r4, #16]
 800d19e:	07d8      	lsls	r0, r3, #31
 800d1a0:	d5ea      	bpl.n	800d178 <_printf_float+0x194>
 800d1a2:	1c4b      	adds	r3, r1, #1
 800d1a4:	e7e7      	b.n	800d176 <_printf_float+0x192>
 800d1a6:	2900      	cmp	r1, #0
 800d1a8:	bfd4      	ite	le
 800d1aa:	f1c1 0202 	rsble	r2, r1, #2
 800d1ae:	2201      	movgt	r2, #1
 800d1b0:	4413      	add	r3, r2
 800d1b2:	e7e0      	b.n	800d176 <_printf_float+0x192>
 800d1b4:	6823      	ldr	r3, [r4, #0]
 800d1b6:	055a      	lsls	r2, r3, #21
 800d1b8:	d407      	bmi.n	800d1ca <_printf_float+0x1e6>
 800d1ba:	6923      	ldr	r3, [r4, #16]
 800d1bc:	4642      	mov	r2, r8
 800d1be:	4631      	mov	r1, r6
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	47b8      	blx	r7
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	d12b      	bne.n	800d220 <_printf_float+0x23c>
 800d1c8:	e767      	b.n	800d09a <_printf_float+0xb6>
 800d1ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d1ce:	f240 80dd 	bls.w	800d38c <_printf_float+0x3a8>
 800d1d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	2300      	movs	r3, #0
 800d1da:	f7f3 fc8d 	bl	8000af8 <__aeabi_dcmpeq>
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	d033      	beq.n	800d24a <_printf_float+0x266>
 800d1e2:	4a37      	ldr	r2, [pc, #220]	@ (800d2c0 <_printf_float+0x2dc>)
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	4631      	mov	r1, r6
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	47b8      	blx	r7
 800d1ec:	3001      	adds	r0, #1
 800d1ee:	f43f af54 	beq.w	800d09a <_printf_float+0xb6>
 800d1f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d1f6:	4543      	cmp	r3, r8
 800d1f8:	db02      	blt.n	800d200 <_printf_float+0x21c>
 800d1fa:	6823      	ldr	r3, [r4, #0]
 800d1fc:	07d8      	lsls	r0, r3, #31
 800d1fe:	d50f      	bpl.n	800d220 <_printf_float+0x23c>
 800d200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d204:	4631      	mov	r1, r6
 800d206:	4628      	mov	r0, r5
 800d208:	47b8      	blx	r7
 800d20a:	3001      	adds	r0, #1
 800d20c:	f43f af45 	beq.w	800d09a <_printf_float+0xb6>
 800d210:	f04f 0900 	mov.w	r9, #0
 800d214:	f108 38ff 	add.w	r8, r8, #4294967295
 800d218:	f104 0a1a 	add.w	sl, r4, #26
 800d21c:	45c8      	cmp	r8, r9
 800d21e:	dc09      	bgt.n	800d234 <_printf_float+0x250>
 800d220:	6823      	ldr	r3, [r4, #0]
 800d222:	079b      	lsls	r3, r3, #30
 800d224:	f100 8103 	bmi.w	800d42e <_printf_float+0x44a>
 800d228:	68e0      	ldr	r0, [r4, #12]
 800d22a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d22c:	4298      	cmp	r0, r3
 800d22e:	bfb8      	it	lt
 800d230:	4618      	movlt	r0, r3
 800d232:	e734      	b.n	800d09e <_printf_float+0xba>
 800d234:	2301      	movs	r3, #1
 800d236:	4652      	mov	r2, sl
 800d238:	4631      	mov	r1, r6
 800d23a:	4628      	mov	r0, r5
 800d23c:	47b8      	blx	r7
 800d23e:	3001      	adds	r0, #1
 800d240:	f43f af2b 	beq.w	800d09a <_printf_float+0xb6>
 800d244:	f109 0901 	add.w	r9, r9, #1
 800d248:	e7e8      	b.n	800d21c <_printf_float+0x238>
 800d24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	dc39      	bgt.n	800d2c4 <_printf_float+0x2e0>
 800d250:	4a1b      	ldr	r2, [pc, #108]	@ (800d2c0 <_printf_float+0x2dc>)
 800d252:	2301      	movs	r3, #1
 800d254:	4631      	mov	r1, r6
 800d256:	4628      	mov	r0, r5
 800d258:	47b8      	blx	r7
 800d25a:	3001      	adds	r0, #1
 800d25c:	f43f af1d 	beq.w	800d09a <_printf_float+0xb6>
 800d260:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d264:	ea59 0303 	orrs.w	r3, r9, r3
 800d268:	d102      	bne.n	800d270 <_printf_float+0x28c>
 800d26a:	6823      	ldr	r3, [r4, #0]
 800d26c:	07d9      	lsls	r1, r3, #31
 800d26e:	d5d7      	bpl.n	800d220 <_printf_float+0x23c>
 800d270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d274:	4631      	mov	r1, r6
 800d276:	4628      	mov	r0, r5
 800d278:	47b8      	blx	r7
 800d27a:	3001      	adds	r0, #1
 800d27c:	f43f af0d 	beq.w	800d09a <_printf_float+0xb6>
 800d280:	f04f 0a00 	mov.w	sl, #0
 800d284:	f104 0b1a 	add.w	fp, r4, #26
 800d288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d28a:	425b      	negs	r3, r3
 800d28c:	4553      	cmp	r3, sl
 800d28e:	dc01      	bgt.n	800d294 <_printf_float+0x2b0>
 800d290:	464b      	mov	r3, r9
 800d292:	e793      	b.n	800d1bc <_printf_float+0x1d8>
 800d294:	2301      	movs	r3, #1
 800d296:	465a      	mov	r2, fp
 800d298:	4631      	mov	r1, r6
 800d29a:	4628      	mov	r0, r5
 800d29c:	47b8      	blx	r7
 800d29e:	3001      	adds	r0, #1
 800d2a0:	f43f aefb 	beq.w	800d09a <_printf_float+0xb6>
 800d2a4:	f10a 0a01 	add.w	sl, sl, #1
 800d2a8:	e7ee      	b.n	800d288 <_printf_float+0x2a4>
 800d2aa:	bf00      	nop
 800d2ac:	7fefffff 	.word	0x7fefffff
 800d2b0:	080100b0 	.word	0x080100b0
 800d2b4:	080100ac 	.word	0x080100ac
 800d2b8:	080100b8 	.word	0x080100b8
 800d2bc:	080100b4 	.word	0x080100b4
 800d2c0:	080100bc 	.word	0x080100bc
 800d2c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2ca:	4553      	cmp	r3, sl
 800d2cc:	bfa8      	it	ge
 800d2ce:	4653      	movge	r3, sl
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	4699      	mov	r9, r3
 800d2d4:	dc36      	bgt.n	800d344 <_printf_float+0x360>
 800d2d6:	f04f 0b00 	mov.w	fp, #0
 800d2da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2de:	f104 021a 	add.w	r2, r4, #26
 800d2e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2e4:	9306      	str	r3, [sp, #24]
 800d2e6:	eba3 0309 	sub.w	r3, r3, r9
 800d2ea:	455b      	cmp	r3, fp
 800d2ec:	dc31      	bgt.n	800d352 <_printf_float+0x36e>
 800d2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f0:	459a      	cmp	sl, r3
 800d2f2:	dc3a      	bgt.n	800d36a <_printf_float+0x386>
 800d2f4:	6823      	ldr	r3, [r4, #0]
 800d2f6:	07da      	lsls	r2, r3, #31
 800d2f8:	d437      	bmi.n	800d36a <_printf_float+0x386>
 800d2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2fc:	ebaa 0903 	sub.w	r9, sl, r3
 800d300:	9b06      	ldr	r3, [sp, #24]
 800d302:	ebaa 0303 	sub.w	r3, sl, r3
 800d306:	4599      	cmp	r9, r3
 800d308:	bfa8      	it	ge
 800d30a:	4699      	movge	r9, r3
 800d30c:	f1b9 0f00 	cmp.w	r9, #0
 800d310:	dc33      	bgt.n	800d37a <_printf_float+0x396>
 800d312:	f04f 0800 	mov.w	r8, #0
 800d316:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d31a:	f104 0b1a 	add.w	fp, r4, #26
 800d31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d320:	ebaa 0303 	sub.w	r3, sl, r3
 800d324:	eba3 0309 	sub.w	r3, r3, r9
 800d328:	4543      	cmp	r3, r8
 800d32a:	f77f af79 	ble.w	800d220 <_printf_float+0x23c>
 800d32e:	2301      	movs	r3, #1
 800d330:	465a      	mov	r2, fp
 800d332:	4631      	mov	r1, r6
 800d334:	4628      	mov	r0, r5
 800d336:	47b8      	blx	r7
 800d338:	3001      	adds	r0, #1
 800d33a:	f43f aeae 	beq.w	800d09a <_printf_float+0xb6>
 800d33e:	f108 0801 	add.w	r8, r8, #1
 800d342:	e7ec      	b.n	800d31e <_printf_float+0x33a>
 800d344:	4642      	mov	r2, r8
 800d346:	4631      	mov	r1, r6
 800d348:	4628      	mov	r0, r5
 800d34a:	47b8      	blx	r7
 800d34c:	3001      	adds	r0, #1
 800d34e:	d1c2      	bne.n	800d2d6 <_printf_float+0x2f2>
 800d350:	e6a3      	b.n	800d09a <_printf_float+0xb6>
 800d352:	2301      	movs	r3, #1
 800d354:	4631      	mov	r1, r6
 800d356:	4628      	mov	r0, r5
 800d358:	9206      	str	r2, [sp, #24]
 800d35a:	47b8      	blx	r7
 800d35c:	3001      	adds	r0, #1
 800d35e:	f43f ae9c 	beq.w	800d09a <_printf_float+0xb6>
 800d362:	9a06      	ldr	r2, [sp, #24]
 800d364:	f10b 0b01 	add.w	fp, fp, #1
 800d368:	e7bb      	b.n	800d2e2 <_printf_float+0x2fe>
 800d36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d36e:	4631      	mov	r1, r6
 800d370:	4628      	mov	r0, r5
 800d372:	47b8      	blx	r7
 800d374:	3001      	adds	r0, #1
 800d376:	d1c0      	bne.n	800d2fa <_printf_float+0x316>
 800d378:	e68f      	b.n	800d09a <_printf_float+0xb6>
 800d37a:	9a06      	ldr	r2, [sp, #24]
 800d37c:	464b      	mov	r3, r9
 800d37e:	4442      	add	r2, r8
 800d380:	4631      	mov	r1, r6
 800d382:	4628      	mov	r0, r5
 800d384:	47b8      	blx	r7
 800d386:	3001      	adds	r0, #1
 800d388:	d1c3      	bne.n	800d312 <_printf_float+0x32e>
 800d38a:	e686      	b.n	800d09a <_printf_float+0xb6>
 800d38c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d390:	f1ba 0f01 	cmp.w	sl, #1
 800d394:	dc01      	bgt.n	800d39a <_printf_float+0x3b6>
 800d396:	07db      	lsls	r3, r3, #31
 800d398:	d536      	bpl.n	800d408 <_printf_float+0x424>
 800d39a:	2301      	movs	r3, #1
 800d39c:	4642      	mov	r2, r8
 800d39e:	4631      	mov	r1, r6
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	47b8      	blx	r7
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	f43f ae78 	beq.w	800d09a <_printf_float+0xb6>
 800d3aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3ae:	4631      	mov	r1, r6
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	47b8      	blx	r7
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	f43f ae70 	beq.w	800d09a <_printf_float+0xb6>
 800d3ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3be:	2200      	movs	r2, #0
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3c6:	f7f3 fb97 	bl	8000af8 <__aeabi_dcmpeq>
 800d3ca:	b9c0      	cbnz	r0, 800d3fe <_printf_float+0x41a>
 800d3cc:	4653      	mov	r3, sl
 800d3ce:	f108 0201 	add.w	r2, r8, #1
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	47b8      	blx	r7
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d10c      	bne.n	800d3f6 <_printf_float+0x412>
 800d3dc:	e65d      	b.n	800d09a <_printf_float+0xb6>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	465a      	mov	r2, fp
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	47b8      	blx	r7
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	f43f ae56 	beq.w	800d09a <_printf_float+0xb6>
 800d3ee:	f108 0801 	add.w	r8, r8, #1
 800d3f2:	45d0      	cmp	r8, sl
 800d3f4:	dbf3      	blt.n	800d3de <_printf_float+0x3fa>
 800d3f6:	464b      	mov	r3, r9
 800d3f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d3fc:	e6df      	b.n	800d1be <_printf_float+0x1da>
 800d3fe:	f04f 0800 	mov.w	r8, #0
 800d402:	f104 0b1a 	add.w	fp, r4, #26
 800d406:	e7f4      	b.n	800d3f2 <_printf_float+0x40e>
 800d408:	2301      	movs	r3, #1
 800d40a:	4642      	mov	r2, r8
 800d40c:	e7e1      	b.n	800d3d2 <_printf_float+0x3ee>
 800d40e:	2301      	movs	r3, #1
 800d410:	464a      	mov	r2, r9
 800d412:	4631      	mov	r1, r6
 800d414:	4628      	mov	r0, r5
 800d416:	47b8      	blx	r7
 800d418:	3001      	adds	r0, #1
 800d41a:	f43f ae3e 	beq.w	800d09a <_printf_float+0xb6>
 800d41e:	f108 0801 	add.w	r8, r8, #1
 800d422:	68e3      	ldr	r3, [r4, #12]
 800d424:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d426:	1a5b      	subs	r3, r3, r1
 800d428:	4543      	cmp	r3, r8
 800d42a:	dcf0      	bgt.n	800d40e <_printf_float+0x42a>
 800d42c:	e6fc      	b.n	800d228 <_printf_float+0x244>
 800d42e:	f04f 0800 	mov.w	r8, #0
 800d432:	f104 0919 	add.w	r9, r4, #25
 800d436:	e7f4      	b.n	800d422 <_printf_float+0x43e>

0800d438 <_printf_common>:
 800d438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d43c:	4616      	mov	r6, r2
 800d43e:	4698      	mov	r8, r3
 800d440:	688a      	ldr	r2, [r1, #8]
 800d442:	690b      	ldr	r3, [r1, #16]
 800d444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d448:	4293      	cmp	r3, r2
 800d44a:	bfb8      	it	lt
 800d44c:	4613      	movlt	r3, r2
 800d44e:	6033      	str	r3, [r6, #0]
 800d450:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d454:	4607      	mov	r7, r0
 800d456:	460c      	mov	r4, r1
 800d458:	b10a      	cbz	r2, 800d45e <_printf_common+0x26>
 800d45a:	3301      	adds	r3, #1
 800d45c:	6033      	str	r3, [r6, #0]
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	0699      	lsls	r1, r3, #26
 800d462:	bf42      	ittt	mi
 800d464:	6833      	ldrmi	r3, [r6, #0]
 800d466:	3302      	addmi	r3, #2
 800d468:	6033      	strmi	r3, [r6, #0]
 800d46a:	6825      	ldr	r5, [r4, #0]
 800d46c:	f015 0506 	ands.w	r5, r5, #6
 800d470:	d106      	bne.n	800d480 <_printf_common+0x48>
 800d472:	f104 0a19 	add.w	sl, r4, #25
 800d476:	68e3      	ldr	r3, [r4, #12]
 800d478:	6832      	ldr	r2, [r6, #0]
 800d47a:	1a9b      	subs	r3, r3, r2
 800d47c:	42ab      	cmp	r3, r5
 800d47e:	dc26      	bgt.n	800d4ce <_printf_common+0x96>
 800d480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d484:	6822      	ldr	r2, [r4, #0]
 800d486:	3b00      	subs	r3, #0
 800d488:	bf18      	it	ne
 800d48a:	2301      	movne	r3, #1
 800d48c:	0692      	lsls	r2, r2, #26
 800d48e:	d42b      	bmi.n	800d4e8 <_printf_common+0xb0>
 800d490:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d494:	4641      	mov	r1, r8
 800d496:	4638      	mov	r0, r7
 800d498:	47c8      	blx	r9
 800d49a:	3001      	adds	r0, #1
 800d49c:	d01e      	beq.n	800d4dc <_printf_common+0xa4>
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	6922      	ldr	r2, [r4, #16]
 800d4a2:	f003 0306 	and.w	r3, r3, #6
 800d4a6:	2b04      	cmp	r3, #4
 800d4a8:	bf02      	ittt	eq
 800d4aa:	68e5      	ldreq	r5, [r4, #12]
 800d4ac:	6833      	ldreq	r3, [r6, #0]
 800d4ae:	1aed      	subeq	r5, r5, r3
 800d4b0:	68a3      	ldr	r3, [r4, #8]
 800d4b2:	bf0c      	ite	eq
 800d4b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4b8:	2500      	movne	r5, #0
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	bfc4      	itt	gt
 800d4be:	1a9b      	subgt	r3, r3, r2
 800d4c0:	18ed      	addgt	r5, r5, r3
 800d4c2:	2600      	movs	r6, #0
 800d4c4:	341a      	adds	r4, #26
 800d4c6:	42b5      	cmp	r5, r6
 800d4c8:	d11a      	bne.n	800d500 <_printf_common+0xc8>
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	e008      	b.n	800d4e0 <_printf_common+0xa8>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	4652      	mov	r2, sl
 800d4d2:	4641      	mov	r1, r8
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	47c8      	blx	r9
 800d4d8:	3001      	adds	r0, #1
 800d4da:	d103      	bne.n	800d4e4 <_printf_common+0xac>
 800d4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e4:	3501      	adds	r5, #1
 800d4e6:	e7c6      	b.n	800d476 <_printf_common+0x3e>
 800d4e8:	18e1      	adds	r1, r4, r3
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	2030      	movs	r0, #48	@ 0x30
 800d4ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4f2:	4422      	add	r2, r4
 800d4f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4fc:	3302      	adds	r3, #2
 800d4fe:	e7c7      	b.n	800d490 <_printf_common+0x58>
 800d500:	2301      	movs	r3, #1
 800d502:	4622      	mov	r2, r4
 800d504:	4641      	mov	r1, r8
 800d506:	4638      	mov	r0, r7
 800d508:	47c8      	blx	r9
 800d50a:	3001      	adds	r0, #1
 800d50c:	d0e6      	beq.n	800d4dc <_printf_common+0xa4>
 800d50e:	3601      	adds	r6, #1
 800d510:	e7d9      	b.n	800d4c6 <_printf_common+0x8e>
	...

0800d514 <_printf_i>:
 800d514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	7e0f      	ldrb	r7, [r1, #24]
 800d51a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d51c:	2f78      	cmp	r7, #120	@ 0x78
 800d51e:	4691      	mov	r9, r2
 800d520:	4680      	mov	r8, r0
 800d522:	460c      	mov	r4, r1
 800d524:	469a      	mov	sl, r3
 800d526:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d52a:	d807      	bhi.n	800d53c <_printf_i+0x28>
 800d52c:	2f62      	cmp	r7, #98	@ 0x62
 800d52e:	d80a      	bhi.n	800d546 <_printf_i+0x32>
 800d530:	2f00      	cmp	r7, #0
 800d532:	f000 80d1 	beq.w	800d6d8 <_printf_i+0x1c4>
 800d536:	2f58      	cmp	r7, #88	@ 0x58
 800d538:	f000 80b8 	beq.w	800d6ac <_printf_i+0x198>
 800d53c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d540:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d544:	e03a      	b.n	800d5bc <_printf_i+0xa8>
 800d546:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d54a:	2b15      	cmp	r3, #21
 800d54c:	d8f6      	bhi.n	800d53c <_printf_i+0x28>
 800d54e:	a101      	add	r1, pc, #4	@ (adr r1, 800d554 <_printf_i+0x40>)
 800d550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d554:	0800d5ad 	.word	0x0800d5ad
 800d558:	0800d5c1 	.word	0x0800d5c1
 800d55c:	0800d53d 	.word	0x0800d53d
 800d560:	0800d53d 	.word	0x0800d53d
 800d564:	0800d53d 	.word	0x0800d53d
 800d568:	0800d53d 	.word	0x0800d53d
 800d56c:	0800d5c1 	.word	0x0800d5c1
 800d570:	0800d53d 	.word	0x0800d53d
 800d574:	0800d53d 	.word	0x0800d53d
 800d578:	0800d53d 	.word	0x0800d53d
 800d57c:	0800d53d 	.word	0x0800d53d
 800d580:	0800d6bf 	.word	0x0800d6bf
 800d584:	0800d5eb 	.word	0x0800d5eb
 800d588:	0800d679 	.word	0x0800d679
 800d58c:	0800d53d 	.word	0x0800d53d
 800d590:	0800d53d 	.word	0x0800d53d
 800d594:	0800d6e1 	.word	0x0800d6e1
 800d598:	0800d53d 	.word	0x0800d53d
 800d59c:	0800d5eb 	.word	0x0800d5eb
 800d5a0:	0800d53d 	.word	0x0800d53d
 800d5a4:	0800d53d 	.word	0x0800d53d
 800d5a8:	0800d681 	.word	0x0800d681
 800d5ac:	6833      	ldr	r3, [r6, #0]
 800d5ae:	1d1a      	adds	r2, r3, #4
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6032      	str	r2, [r6, #0]
 800d5b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e09c      	b.n	800d6fa <_printf_i+0x1e6>
 800d5c0:	6833      	ldr	r3, [r6, #0]
 800d5c2:	6820      	ldr	r0, [r4, #0]
 800d5c4:	1d19      	adds	r1, r3, #4
 800d5c6:	6031      	str	r1, [r6, #0]
 800d5c8:	0606      	lsls	r6, r0, #24
 800d5ca:	d501      	bpl.n	800d5d0 <_printf_i+0xbc>
 800d5cc:	681d      	ldr	r5, [r3, #0]
 800d5ce:	e003      	b.n	800d5d8 <_printf_i+0xc4>
 800d5d0:	0645      	lsls	r5, r0, #25
 800d5d2:	d5fb      	bpl.n	800d5cc <_printf_i+0xb8>
 800d5d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5d8:	2d00      	cmp	r5, #0
 800d5da:	da03      	bge.n	800d5e4 <_printf_i+0xd0>
 800d5dc:	232d      	movs	r3, #45	@ 0x2d
 800d5de:	426d      	negs	r5, r5
 800d5e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5e4:	4858      	ldr	r0, [pc, #352]	@ (800d748 <_printf_i+0x234>)
 800d5e6:	230a      	movs	r3, #10
 800d5e8:	e011      	b.n	800d60e <_printf_i+0xfa>
 800d5ea:	6821      	ldr	r1, [r4, #0]
 800d5ec:	6833      	ldr	r3, [r6, #0]
 800d5ee:	0608      	lsls	r0, r1, #24
 800d5f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5f4:	d402      	bmi.n	800d5fc <_printf_i+0xe8>
 800d5f6:	0649      	lsls	r1, r1, #25
 800d5f8:	bf48      	it	mi
 800d5fa:	b2ad      	uxthmi	r5, r5
 800d5fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5fe:	4852      	ldr	r0, [pc, #328]	@ (800d748 <_printf_i+0x234>)
 800d600:	6033      	str	r3, [r6, #0]
 800d602:	bf14      	ite	ne
 800d604:	230a      	movne	r3, #10
 800d606:	2308      	moveq	r3, #8
 800d608:	2100      	movs	r1, #0
 800d60a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d60e:	6866      	ldr	r6, [r4, #4]
 800d610:	60a6      	str	r6, [r4, #8]
 800d612:	2e00      	cmp	r6, #0
 800d614:	db05      	blt.n	800d622 <_printf_i+0x10e>
 800d616:	6821      	ldr	r1, [r4, #0]
 800d618:	432e      	orrs	r6, r5
 800d61a:	f021 0104 	bic.w	r1, r1, #4
 800d61e:	6021      	str	r1, [r4, #0]
 800d620:	d04b      	beq.n	800d6ba <_printf_i+0x1a6>
 800d622:	4616      	mov	r6, r2
 800d624:	fbb5 f1f3 	udiv	r1, r5, r3
 800d628:	fb03 5711 	mls	r7, r3, r1, r5
 800d62c:	5dc7      	ldrb	r7, [r0, r7]
 800d62e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d632:	462f      	mov	r7, r5
 800d634:	42bb      	cmp	r3, r7
 800d636:	460d      	mov	r5, r1
 800d638:	d9f4      	bls.n	800d624 <_printf_i+0x110>
 800d63a:	2b08      	cmp	r3, #8
 800d63c:	d10b      	bne.n	800d656 <_printf_i+0x142>
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	07df      	lsls	r7, r3, #31
 800d642:	d508      	bpl.n	800d656 <_printf_i+0x142>
 800d644:	6923      	ldr	r3, [r4, #16]
 800d646:	6861      	ldr	r1, [r4, #4]
 800d648:	4299      	cmp	r1, r3
 800d64a:	bfde      	ittt	le
 800d64c:	2330      	movle	r3, #48	@ 0x30
 800d64e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d652:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d656:	1b92      	subs	r2, r2, r6
 800d658:	6122      	str	r2, [r4, #16]
 800d65a:	f8cd a000 	str.w	sl, [sp]
 800d65e:	464b      	mov	r3, r9
 800d660:	aa03      	add	r2, sp, #12
 800d662:	4621      	mov	r1, r4
 800d664:	4640      	mov	r0, r8
 800d666:	f7ff fee7 	bl	800d438 <_printf_common>
 800d66a:	3001      	adds	r0, #1
 800d66c:	d14a      	bne.n	800d704 <_printf_i+0x1f0>
 800d66e:	f04f 30ff 	mov.w	r0, #4294967295
 800d672:	b004      	add	sp, #16
 800d674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	f043 0320 	orr.w	r3, r3, #32
 800d67e:	6023      	str	r3, [r4, #0]
 800d680:	4832      	ldr	r0, [pc, #200]	@ (800d74c <_printf_i+0x238>)
 800d682:	2778      	movs	r7, #120	@ 0x78
 800d684:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	6831      	ldr	r1, [r6, #0]
 800d68c:	061f      	lsls	r7, r3, #24
 800d68e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d692:	d402      	bmi.n	800d69a <_printf_i+0x186>
 800d694:	065f      	lsls	r7, r3, #25
 800d696:	bf48      	it	mi
 800d698:	b2ad      	uxthmi	r5, r5
 800d69a:	6031      	str	r1, [r6, #0]
 800d69c:	07d9      	lsls	r1, r3, #31
 800d69e:	bf44      	itt	mi
 800d6a0:	f043 0320 	orrmi.w	r3, r3, #32
 800d6a4:	6023      	strmi	r3, [r4, #0]
 800d6a6:	b11d      	cbz	r5, 800d6b0 <_printf_i+0x19c>
 800d6a8:	2310      	movs	r3, #16
 800d6aa:	e7ad      	b.n	800d608 <_printf_i+0xf4>
 800d6ac:	4826      	ldr	r0, [pc, #152]	@ (800d748 <_printf_i+0x234>)
 800d6ae:	e7e9      	b.n	800d684 <_printf_i+0x170>
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	f023 0320 	bic.w	r3, r3, #32
 800d6b6:	6023      	str	r3, [r4, #0]
 800d6b8:	e7f6      	b.n	800d6a8 <_printf_i+0x194>
 800d6ba:	4616      	mov	r6, r2
 800d6bc:	e7bd      	b.n	800d63a <_printf_i+0x126>
 800d6be:	6833      	ldr	r3, [r6, #0]
 800d6c0:	6825      	ldr	r5, [r4, #0]
 800d6c2:	6961      	ldr	r1, [r4, #20]
 800d6c4:	1d18      	adds	r0, r3, #4
 800d6c6:	6030      	str	r0, [r6, #0]
 800d6c8:	062e      	lsls	r6, r5, #24
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	d501      	bpl.n	800d6d2 <_printf_i+0x1be>
 800d6ce:	6019      	str	r1, [r3, #0]
 800d6d0:	e002      	b.n	800d6d8 <_printf_i+0x1c4>
 800d6d2:	0668      	lsls	r0, r5, #25
 800d6d4:	d5fb      	bpl.n	800d6ce <_printf_i+0x1ba>
 800d6d6:	8019      	strh	r1, [r3, #0]
 800d6d8:	2300      	movs	r3, #0
 800d6da:	6123      	str	r3, [r4, #16]
 800d6dc:	4616      	mov	r6, r2
 800d6de:	e7bc      	b.n	800d65a <_printf_i+0x146>
 800d6e0:	6833      	ldr	r3, [r6, #0]
 800d6e2:	1d1a      	adds	r2, r3, #4
 800d6e4:	6032      	str	r2, [r6, #0]
 800d6e6:	681e      	ldr	r6, [r3, #0]
 800d6e8:	6862      	ldr	r2, [r4, #4]
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7f2 fd87 	bl	8000200 <memchr>
 800d6f2:	b108      	cbz	r0, 800d6f8 <_printf_i+0x1e4>
 800d6f4:	1b80      	subs	r0, r0, r6
 800d6f6:	6060      	str	r0, [r4, #4]
 800d6f8:	6863      	ldr	r3, [r4, #4]
 800d6fa:	6123      	str	r3, [r4, #16]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d702:	e7aa      	b.n	800d65a <_printf_i+0x146>
 800d704:	6923      	ldr	r3, [r4, #16]
 800d706:	4632      	mov	r2, r6
 800d708:	4649      	mov	r1, r9
 800d70a:	4640      	mov	r0, r8
 800d70c:	47d0      	blx	sl
 800d70e:	3001      	adds	r0, #1
 800d710:	d0ad      	beq.n	800d66e <_printf_i+0x15a>
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	079b      	lsls	r3, r3, #30
 800d716:	d413      	bmi.n	800d740 <_printf_i+0x22c>
 800d718:	68e0      	ldr	r0, [r4, #12]
 800d71a:	9b03      	ldr	r3, [sp, #12]
 800d71c:	4298      	cmp	r0, r3
 800d71e:	bfb8      	it	lt
 800d720:	4618      	movlt	r0, r3
 800d722:	e7a6      	b.n	800d672 <_printf_i+0x15e>
 800d724:	2301      	movs	r3, #1
 800d726:	4632      	mov	r2, r6
 800d728:	4649      	mov	r1, r9
 800d72a:	4640      	mov	r0, r8
 800d72c:	47d0      	blx	sl
 800d72e:	3001      	adds	r0, #1
 800d730:	d09d      	beq.n	800d66e <_printf_i+0x15a>
 800d732:	3501      	adds	r5, #1
 800d734:	68e3      	ldr	r3, [r4, #12]
 800d736:	9903      	ldr	r1, [sp, #12]
 800d738:	1a5b      	subs	r3, r3, r1
 800d73a:	42ab      	cmp	r3, r5
 800d73c:	dcf2      	bgt.n	800d724 <_printf_i+0x210>
 800d73e:	e7eb      	b.n	800d718 <_printf_i+0x204>
 800d740:	2500      	movs	r5, #0
 800d742:	f104 0619 	add.w	r6, r4, #25
 800d746:	e7f5      	b.n	800d734 <_printf_i+0x220>
 800d748:	080100be 	.word	0x080100be
 800d74c:	080100cf 	.word	0x080100cf

0800d750 <std>:
 800d750:	2300      	movs	r3, #0
 800d752:	b510      	push	{r4, lr}
 800d754:	4604      	mov	r4, r0
 800d756:	e9c0 3300 	strd	r3, r3, [r0]
 800d75a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d75e:	6083      	str	r3, [r0, #8]
 800d760:	8181      	strh	r1, [r0, #12]
 800d762:	6643      	str	r3, [r0, #100]	@ 0x64
 800d764:	81c2      	strh	r2, [r0, #14]
 800d766:	6183      	str	r3, [r0, #24]
 800d768:	4619      	mov	r1, r3
 800d76a:	2208      	movs	r2, #8
 800d76c:	305c      	adds	r0, #92	@ 0x5c
 800d76e:	f000 f9f9 	bl	800db64 <memset>
 800d772:	4b0d      	ldr	r3, [pc, #52]	@ (800d7a8 <std+0x58>)
 800d774:	6263      	str	r3, [r4, #36]	@ 0x24
 800d776:	4b0d      	ldr	r3, [pc, #52]	@ (800d7ac <std+0x5c>)
 800d778:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d77a:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b0 <std+0x60>)
 800d77c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d77e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b4 <std+0x64>)
 800d780:	6323      	str	r3, [r4, #48]	@ 0x30
 800d782:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b8 <std+0x68>)
 800d784:	6224      	str	r4, [r4, #32]
 800d786:	429c      	cmp	r4, r3
 800d788:	d006      	beq.n	800d798 <std+0x48>
 800d78a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d78e:	4294      	cmp	r4, r2
 800d790:	d002      	beq.n	800d798 <std+0x48>
 800d792:	33d0      	adds	r3, #208	@ 0xd0
 800d794:	429c      	cmp	r4, r3
 800d796:	d105      	bne.n	800d7a4 <std+0x54>
 800d798:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7a0:	f000 ba6c 	b.w	800dc7c <__retarget_lock_init_recursive>
 800d7a4:	bd10      	pop	{r4, pc}
 800d7a6:	bf00      	nop
 800d7a8:	0800d9b5 	.word	0x0800d9b5
 800d7ac:	0800d9d7 	.word	0x0800d9d7
 800d7b0:	0800da0f 	.word	0x0800da0f
 800d7b4:	0800da33 	.word	0x0800da33
 800d7b8:	20040904 	.word	0x20040904

0800d7bc <stdio_exit_handler>:
 800d7bc:	4a02      	ldr	r2, [pc, #8]	@ (800d7c8 <stdio_exit_handler+0xc>)
 800d7be:	4903      	ldr	r1, [pc, #12]	@ (800d7cc <stdio_exit_handler+0x10>)
 800d7c0:	4803      	ldr	r0, [pc, #12]	@ (800d7d0 <stdio_exit_handler+0x14>)
 800d7c2:	f000 b869 	b.w	800d898 <_fwalk_sglue>
 800d7c6:	bf00      	nop
 800d7c8:	200402cc 	.word	0x200402cc
 800d7cc:	0800f5e1 	.word	0x0800f5e1
 800d7d0:	200402dc 	.word	0x200402dc

0800d7d4 <cleanup_stdio>:
 800d7d4:	6841      	ldr	r1, [r0, #4]
 800d7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d808 <cleanup_stdio+0x34>)
 800d7d8:	4299      	cmp	r1, r3
 800d7da:	b510      	push	{r4, lr}
 800d7dc:	4604      	mov	r4, r0
 800d7de:	d001      	beq.n	800d7e4 <cleanup_stdio+0x10>
 800d7e0:	f001 fefe 	bl	800f5e0 <_fflush_r>
 800d7e4:	68a1      	ldr	r1, [r4, #8]
 800d7e6:	4b09      	ldr	r3, [pc, #36]	@ (800d80c <cleanup_stdio+0x38>)
 800d7e8:	4299      	cmp	r1, r3
 800d7ea:	d002      	beq.n	800d7f2 <cleanup_stdio+0x1e>
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f001 fef7 	bl	800f5e0 <_fflush_r>
 800d7f2:	68e1      	ldr	r1, [r4, #12]
 800d7f4:	4b06      	ldr	r3, [pc, #24]	@ (800d810 <cleanup_stdio+0x3c>)
 800d7f6:	4299      	cmp	r1, r3
 800d7f8:	d004      	beq.n	800d804 <cleanup_stdio+0x30>
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d800:	f001 beee 	b.w	800f5e0 <_fflush_r>
 800d804:	bd10      	pop	{r4, pc}
 800d806:	bf00      	nop
 800d808:	20040904 	.word	0x20040904
 800d80c:	2004096c 	.word	0x2004096c
 800d810:	200409d4 	.word	0x200409d4

0800d814 <global_stdio_init.part.0>:
 800d814:	b510      	push	{r4, lr}
 800d816:	4b0b      	ldr	r3, [pc, #44]	@ (800d844 <global_stdio_init.part.0+0x30>)
 800d818:	4c0b      	ldr	r4, [pc, #44]	@ (800d848 <global_stdio_init.part.0+0x34>)
 800d81a:	4a0c      	ldr	r2, [pc, #48]	@ (800d84c <global_stdio_init.part.0+0x38>)
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	4620      	mov	r0, r4
 800d820:	2200      	movs	r2, #0
 800d822:	2104      	movs	r1, #4
 800d824:	f7ff ff94 	bl	800d750 <std>
 800d828:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d82c:	2201      	movs	r2, #1
 800d82e:	2109      	movs	r1, #9
 800d830:	f7ff ff8e 	bl	800d750 <std>
 800d834:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d838:	2202      	movs	r2, #2
 800d83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d83e:	2112      	movs	r1, #18
 800d840:	f7ff bf86 	b.w	800d750 <std>
 800d844:	20040a3c 	.word	0x20040a3c
 800d848:	20040904 	.word	0x20040904
 800d84c:	0800d7bd 	.word	0x0800d7bd

0800d850 <__sfp_lock_acquire>:
 800d850:	4801      	ldr	r0, [pc, #4]	@ (800d858 <__sfp_lock_acquire+0x8>)
 800d852:	f000 ba14 	b.w	800dc7e <__retarget_lock_acquire_recursive>
 800d856:	bf00      	nop
 800d858:	20040a45 	.word	0x20040a45

0800d85c <__sfp_lock_release>:
 800d85c:	4801      	ldr	r0, [pc, #4]	@ (800d864 <__sfp_lock_release+0x8>)
 800d85e:	f000 ba0f 	b.w	800dc80 <__retarget_lock_release_recursive>
 800d862:	bf00      	nop
 800d864:	20040a45 	.word	0x20040a45

0800d868 <__sinit>:
 800d868:	b510      	push	{r4, lr}
 800d86a:	4604      	mov	r4, r0
 800d86c:	f7ff fff0 	bl	800d850 <__sfp_lock_acquire>
 800d870:	6a23      	ldr	r3, [r4, #32]
 800d872:	b11b      	cbz	r3, 800d87c <__sinit+0x14>
 800d874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d878:	f7ff bff0 	b.w	800d85c <__sfp_lock_release>
 800d87c:	4b04      	ldr	r3, [pc, #16]	@ (800d890 <__sinit+0x28>)
 800d87e:	6223      	str	r3, [r4, #32]
 800d880:	4b04      	ldr	r3, [pc, #16]	@ (800d894 <__sinit+0x2c>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d1f5      	bne.n	800d874 <__sinit+0xc>
 800d888:	f7ff ffc4 	bl	800d814 <global_stdio_init.part.0>
 800d88c:	e7f2      	b.n	800d874 <__sinit+0xc>
 800d88e:	bf00      	nop
 800d890:	0800d7d5 	.word	0x0800d7d5
 800d894:	20040a3c 	.word	0x20040a3c

0800d898 <_fwalk_sglue>:
 800d898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d89c:	4607      	mov	r7, r0
 800d89e:	4688      	mov	r8, r1
 800d8a0:	4614      	mov	r4, r2
 800d8a2:	2600      	movs	r6, #0
 800d8a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8a8:	f1b9 0901 	subs.w	r9, r9, #1
 800d8ac:	d505      	bpl.n	800d8ba <_fwalk_sglue+0x22>
 800d8ae:	6824      	ldr	r4, [r4, #0]
 800d8b0:	2c00      	cmp	r4, #0
 800d8b2:	d1f7      	bne.n	800d8a4 <_fwalk_sglue+0xc>
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ba:	89ab      	ldrh	r3, [r5, #12]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d907      	bls.n	800d8d0 <_fwalk_sglue+0x38>
 800d8c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	d003      	beq.n	800d8d0 <_fwalk_sglue+0x38>
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	4638      	mov	r0, r7
 800d8cc:	47c0      	blx	r8
 800d8ce:	4306      	orrs	r6, r0
 800d8d0:	3568      	adds	r5, #104	@ 0x68
 800d8d2:	e7e9      	b.n	800d8a8 <_fwalk_sglue+0x10>

0800d8d4 <iprintf>:
 800d8d4:	b40f      	push	{r0, r1, r2, r3}
 800d8d6:	b507      	push	{r0, r1, r2, lr}
 800d8d8:	4906      	ldr	r1, [pc, #24]	@ (800d8f4 <iprintf+0x20>)
 800d8da:	ab04      	add	r3, sp, #16
 800d8dc:	6808      	ldr	r0, [r1, #0]
 800d8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8e2:	6881      	ldr	r1, [r0, #8]
 800d8e4:	9301      	str	r3, [sp, #4]
 800d8e6:	f001 fcdf 	bl	800f2a8 <_vfiprintf_r>
 800d8ea:	b003      	add	sp, #12
 800d8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8f0:	b004      	add	sp, #16
 800d8f2:	4770      	bx	lr
 800d8f4:	200402d8 	.word	0x200402d8

0800d8f8 <_puts_r>:
 800d8f8:	6a03      	ldr	r3, [r0, #32]
 800d8fa:	b570      	push	{r4, r5, r6, lr}
 800d8fc:	6884      	ldr	r4, [r0, #8]
 800d8fe:	4605      	mov	r5, r0
 800d900:	460e      	mov	r6, r1
 800d902:	b90b      	cbnz	r3, 800d908 <_puts_r+0x10>
 800d904:	f7ff ffb0 	bl	800d868 <__sinit>
 800d908:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d90a:	07db      	lsls	r3, r3, #31
 800d90c:	d405      	bmi.n	800d91a <_puts_r+0x22>
 800d90e:	89a3      	ldrh	r3, [r4, #12]
 800d910:	0598      	lsls	r0, r3, #22
 800d912:	d402      	bmi.n	800d91a <_puts_r+0x22>
 800d914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d916:	f000 f9b2 	bl	800dc7e <__retarget_lock_acquire_recursive>
 800d91a:	89a3      	ldrh	r3, [r4, #12]
 800d91c:	0719      	lsls	r1, r3, #28
 800d91e:	d502      	bpl.n	800d926 <_puts_r+0x2e>
 800d920:	6923      	ldr	r3, [r4, #16]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d135      	bne.n	800d992 <_puts_r+0x9a>
 800d926:	4621      	mov	r1, r4
 800d928:	4628      	mov	r0, r5
 800d92a:	f000 f8c5 	bl	800dab8 <__swsetup_r>
 800d92e:	b380      	cbz	r0, 800d992 <_puts_r+0x9a>
 800d930:	f04f 35ff 	mov.w	r5, #4294967295
 800d934:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d936:	07da      	lsls	r2, r3, #31
 800d938:	d405      	bmi.n	800d946 <_puts_r+0x4e>
 800d93a:	89a3      	ldrh	r3, [r4, #12]
 800d93c:	059b      	lsls	r3, r3, #22
 800d93e:	d402      	bmi.n	800d946 <_puts_r+0x4e>
 800d940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d942:	f000 f99d 	bl	800dc80 <__retarget_lock_release_recursive>
 800d946:	4628      	mov	r0, r5
 800d948:	bd70      	pop	{r4, r5, r6, pc}
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	da04      	bge.n	800d958 <_puts_r+0x60>
 800d94e:	69a2      	ldr	r2, [r4, #24]
 800d950:	429a      	cmp	r2, r3
 800d952:	dc17      	bgt.n	800d984 <_puts_r+0x8c>
 800d954:	290a      	cmp	r1, #10
 800d956:	d015      	beq.n	800d984 <_puts_r+0x8c>
 800d958:	6823      	ldr	r3, [r4, #0]
 800d95a:	1c5a      	adds	r2, r3, #1
 800d95c:	6022      	str	r2, [r4, #0]
 800d95e:	7019      	strb	r1, [r3, #0]
 800d960:	68a3      	ldr	r3, [r4, #8]
 800d962:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d966:	3b01      	subs	r3, #1
 800d968:	60a3      	str	r3, [r4, #8]
 800d96a:	2900      	cmp	r1, #0
 800d96c:	d1ed      	bne.n	800d94a <_puts_r+0x52>
 800d96e:	2b00      	cmp	r3, #0
 800d970:	da11      	bge.n	800d996 <_puts_r+0x9e>
 800d972:	4622      	mov	r2, r4
 800d974:	210a      	movs	r1, #10
 800d976:	4628      	mov	r0, r5
 800d978:	f000 f85f 	bl	800da3a <__swbuf_r>
 800d97c:	3001      	adds	r0, #1
 800d97e:	d0d7      	beq.n	800d930 <_puts_r+0x38>
 800d980:	250a      	movs	r5, #10
 800d982:	e7d7      	b.n	800d934 <_puts_r+0x3c>
 800d984:	4622      	mov	r2, r4
 800d986:	4628      	mov	r0, r5
 800d988:	f000 f857 	bl	800da3a <__swbuf_r>
 800d98c:	3001      	adds	r0, #1
 800d98e:	d1e7      	bne.n	800d960 <_puts_r+0x68>
 800d990:	e7ce      	b.n	800d930 <_puts_r+0x38>
 800d992:	3e01      	subs	r6, #1
 800d994:	e7e4      	b.n	800d960 <_puts_r+0x68>
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	1c5a      	adds	r2, r3, #1
 800d99a:	6022      	str	r2, [r4, #0]
 800d99c:	220a      	movs	r2, #10
 800d99e:	701a      	strb	r2, [r3, #0]
 800d9a0:	e7ee      	b.n	800d980 <_puts_r+0x88>
	...

0800d9a4 <puts>:
 800d9a4:	4b02      	ldr	r3, [pc, #8]	@ (800d9b0 <puts+0xc>)
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	6818      	ldr	r0, [r3, #0]
 800d9aa:	f7ff bfa5 	b.w	800d8f8 <_puts_r>
 800d9ae:	bf00      	nop
 800d9b0:	200402d8 	.word	0x200402d8

0800d9b4 <__sread>:
 800d9b4:	b510      	push	{r4, lr}
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9bc:	f000 f910 	bl	800dbe0 <_read_r>
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	bfab      	itete	ge
 800d9c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d9c6:	89a3      	ldrhlt	r3, [r4, #12]
 800d9c8:	181b      	addge	r3, r3, r0
 800d9ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d9ce:	bfac      	ite	ge
 800d9d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d9d2:	81a3      	strhlt	r3, [r4, #12]
 800d9d4:	bd10      	pop	{r4, pc}

0800d9d6 <__swrite>:
 800d9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9da:	461f      	mov	r7, r3
 800d9dc:	898b      	ldrh	r3, [r1, #12]
 800d9de:	05db      	lsls	r3, r3, #23
 800d9e0:	4605      	mov	r5, r0
 800d9e2:	460c      	mov	r4, r1
 800d9e4:	4616      	mov	r6, r2
 800d9e6:	d505      	bpl.n	800d9f4 <__swrite+0x1e>
 800d9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ec:	2302      	movs	r3, #2
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f000 f8e4 	bl	800dbbc <_lseek_r>
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d9fe:	81a3      	strh	r3, [r4, #12]
 800da00:	4632      	mov	r2, r6
 800da02:	463b      	mov	r3, r7
 800da04:	4628      	mov	r0, r5
 800da06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da0a:	f000 b8fb 	b.w	800dc04 <_write_r>

0800da0e <__sseek>:
 800da0e:	b510      	push	{r4, lr}
 800da10:	460c      	mov	r4, r1
 800da12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da16:	f000 f8d1 	bl	800dbbc <_lseek_r>
 800da1a:	1c43      	adds	r3, r0, #1
 800da1c:	89a3      	ldrh	r3, [r4, #12]
 800da1e:	bf15      	itete	ne
 800da20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800da22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800da2a:	81a3      	strheq	r3, [r4, #12]
 800da2c:	bf18      	it	ne
 800da2e:	81a3      	strhne	r3, [r4, #12]
 800da30:	bd10      	pop	{r4, pc}

0800da32 <__sclose>:
 800da32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da36:	f000 b8b1 	b.w	800db9c <_close_r>

0800da3a <__swbuf_r>:
 800da3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3c:	460e      	mov	r6, r1
 800da3e:	4614      	mov	r4, r2
 800da40:	4605      	mov	r5, r0
 800da42:	b118      	cbz	r0, 800da4c <__swbuf_r+0x12>
 800da44:	6a03      	ldr	r3, [r0, #32]
 800da46:	b90b      	cbnz	r3, 800da4c <__swbuf_r+0x12>
 800da48:	f7ff ff0e 	bl	800d868 <__sinit>
 800da4c:	69a3      	ldr	r3, [r4, #24]
 800da4e:	60a3      	str	r3, [r4, #8]
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	071a      	lsls	r2, r3, #28
 800da54:	d501      	bpl.n	800da5a <__swbuf_r+0x20>
 800da56:	6923      	ldr	r3, [r4, #16]
 800da58:	b943      	cbnz	r3, 800da6c <__swbuf_r+0x32>
 800da5a:	4621      	mov	r1, r4
 800da5c:	4628      	mov	r0, r5
 800da5e:	f000 f82b 	bl	800dab8 <__swsetup_r>
 800da62:	b118      	cbz	r0, 800da6c <__swbuf_r+0x32>
 800da64:	f04f 37ff 	mov.w	r7, #4294967295
 800da68:	4638      	mov	r0, r7
 800da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da6c:	6823      	ldr	r3, [r4, #0]
 800da6e:	6922      	ldr	r2, [r4, #16]
 800da70:	1a98      	subs	r0, r3, r2
 800da72:	6963      	ldr	r3, [r4, #20]
 800da74:	b2f6      	uxtb	r6, r6
 800da76:	4283      	cmp	r3, r0
 800da78:	4637      	mov	r7, r6
 800da7a:	dc05      	bgt.n	800da88 <__swbuf_r+0x4e>
 800da7c:	4621      	mov	r1, r4
 800da7e:	4628      	mov	r0, r5
 800da80:	f001 fdae 	bl	800f5e0 <_fflush_r>
 800da84:	2800      	cmp	r0, #0
 800da86:	d1ed      	bne.n	800da64 <__swbuf_r+0x2a>
 800da88:	68a3      	ldr	r3, [r4, #8]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	60a3      	str	r3, [r4, #8]
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	1c5a      	adds	r2, r3, #1
 800da92:	6022      	str	r2, [r4, #0]
 800da94:	701e      	strb	r6, [r3, #0]
 800da96:	6962      	ldr	r2, [r4, #20]
 800da98:	1c43      	adds	r3, r0, #1
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d004      	beq.n	800daa8 <__swbuf_r+0x6e>
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	07db      	lsls	r3, r3, #31
 800daa2:	d5e1      	bpl.n	800da68 <__swbuf_r+0x2e>
 800daa4:	2e0a      	cmp	r6, #10
 800daa6:	d1df      	bne.n	800da68 <__swbuf_r+0x2e>
 800daa8:	4621      	mov	r1, r4
 800daaa:	4628      	mov	r0, r5
 800daac:	f001 fd98 	bl	800f5e0 <_fflush_r>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d0d9      	beq.n	800da68 <__swbuf_r+0x2e>
 800dab4:	e7d6      	b.n	800da64 <__swbuf_r+0x2a>
	...

0800dab8 <__swsetup_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	4b29      	ldr	r3, [pc, #164]	@ (800db60 <__swsetup_r+0xa8>)
 800dabc:	4605      	mov	r5, r0
 800dabe:	6818      	ldr	r0, [r3, #0]
 800dac0:	460c      	mov	r4, r1
 800dac2:	b118      	cbz	r0, 800dacc <__swsetup_r+0x14>
 800dac4:	6a03      	ldr	r3, [r0, #32]
 800dac6:	b90b      	cbnz	r3, 800dacc <__swsetup_r+0x14>
 800dac8:	f7ff fece 	bl	800d868 <__sinit>
 800dacc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad0:	0719      	lsls	r1, r3, #28
 800dad2:	d422      	bmi.n	800db1a <__swsetup_r+0x62>
 800dad4:	06da      	lsls	r2, r3, #27
 800dad6:	d407      	bmi.n	800dae8 <__swsetup_r+0x30>
 800dad8:	2209      	movs	r2, #9
 800dada:	602a      	str	r2, [r5, #0]
 800dadc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dae0:	81a3      	strh	r3, [r4, #12]
 800dae2:	f04f 30ff 	mov.w	r0, #4294967295
 800dae6:	e033      	b.n	800db50 <__swsetup_r+0x98>
 800dae8:	0758      	lsls	r0, r3, #29
 800daea:	d512      	bpl.n	800db12 <__swsetup_r+0x5a>
 800daec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800daee:	b141      	cbz	r1, 800db02 <__swsetup_r+0x4a>
 800daf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800daf4:	4299      	cmp	r1, r3
 800daf6:	d002      	beq.n	800dafe <__swsetup_r+0x46>
 800daf8:	4628      	mov	r0, r5
 800dafa:	f000 ff31 	bl	800e960 <_free_r>
 800dafe:	2300      	movs	r3, #0
 800db00:	6363      	str	r3, [r4, #52]	@ 0x34
 800db02:	89a3      	ldrh	r3, [r4, #12]
 800db04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800db08:	81a3      	strh	r3, [r4, #12]
 800db0a:	2300      	movs	r3, #0
 800db0c:	6063      	str	r3, [r4, #4]
 800db0e:	6923      	ldr	r3, [r4, #16]
 800db10:	6023      	str	r3, [r4, #0]
 800db12:	89a3      	ldrh	r3, [r4, #12]
 800db14:	f043 0308 	orr.w	r3, r3, #8
 800db18:	81a3      	strh	r3, [r4, #12]
 800db1a:	6923      	ldr	r3, [r4, #16]
 800db1c:	b94b      	cbnz	r3, 800db32 <__swsetup_r+0x7a>
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db28:	d003      	beq.n	800db32 <__swsetup_r+0x7a>
 800db2a:	4621      	mov	r1, r4
 800db2c:	4628      	mov	r0, r5
 800db2e:	f001 fda5 	bl	800f67c <__smakebuf_r>
 800db32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db36:	f013 0201 	ands.w	r2, r3, #1
 800db3a:	d00a      	beq.n	800db52 <__swsetup_r+0x9a>
 800db3c:	2200      	movs	r2, #0
 800db3e:	60a2      	str	r2, [r4, #8]
 800db40:	6962      	ldr	r2, [r4, #20]
 800db42:	4252      	negs	r2, r2
 800db44:	61a2      	str	r2, [r4, #24]
 800db46:	6922      	ldr	r2, [r4, #16]
 800db48:	b942      	cbnz	r2, 800db5c <__swsetup_r+0xa4>
 800db4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db4e:	d1c5      	bne.n	800dadc <__swsetup_r+0x24>
 800db50:	bd38      	pop	{r3, r4, r5, pc}
 800db52:	0799      	lsls	r1, r3, #30
 800db54:	bf58      	it	pl
 800db56:	6962      	ldrpl	r2, [r4, #20]
 800db58:	60a2      	str	r2, [r4, #8]
 800db5a:	e7f4      	b.n	800db46 <__swsetup_r+0x8e>
 800db5c:	2000      	movs	r0, #0
 800db5e:	e7f7      	b.n	800db50 <__swsetup_r+0x98>
 800db60:	200402d8 	.word	0x200402d8

0800db64 <memset>:
 800db64:	4402      	add	r2, r0
 800db66:	4603      	mov	r3, r0
 800db68:	4293      	cmp	r3, r2
 800db6a:	d100      	bne.n	800db6e <memset+0xa>
 800db6c:	4770      	bx	lr
 800db6e:	f803 1b01 	strb.w	r1, [r3], #1
 800db72:	e7f9      	b.n	800db68 <memset+0x4>

0800db74 <strcat>:
 800db74:	b510      	push	{r4, lr}
 800db76:	4602      	mov	r2, r0
 800db78:	7814      	ldrb	r4, [r2, #0]
 800db7a:	4613      	mov	r3, r2
 800db7c:	3201      	adds	r2, #1
 800db7e:	2c00      	cmp	r4, #0
 800db80:	d1fa      	bne.n	800db78 <strcat+0x4>
 800db82:	3b01      	subs	r3, #1
 800db84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db88:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db8c:	2a00      	cmp	r2, #0
 800db8e:	d1f9      	bne.n	800db84 <strcat+0x10>
 800db90:	bd10      	pop	{r4, pc}
	...

0800db94 <_localeconv_r>:
 800db94:	4800      	ldr	r0, [pc, #0]	@ (800db98 <_localeconv_r+0x4>)
 800db96:	4770      	bx	lr
 800db98:	20040418 	.word	0x20040418

0800db9c <_close_r>:
 800db9c:	b538      	push	{r3, r4, r5, lr}
 800db9e:	4d06      	ldr	r5, [pc, #24]	@ (800dbb8 <_close_r+0x1c>)
 800dba0:	2300      	movs	r3, #0
 800dba2:	4604      	mov	r4, r0
 800dba4:	4608      	mov	r0, r1
 800dba6:	602b      	str	r3, [r5, #0]
 800dba8:	f7f5 fde7 	bl	800377a <_close>
 800dbac:	1c43      	adds	r3, r0, #1
 800dbae:	d102      	bne.n	800dbb6 <_close_r+0x1a>
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	b103      	cbz	r3, 800dbb6 <_close_r+0x1a>
 800dbb4:	6023      	str	r3, [r4, #0]
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	20040a40 	.word	0x20040a40

0800dbbc <_lseek_r>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	4d07      	ldr	r5, [pc, #28]	@ (800dbdc <_lseek_r+0x20>)
 800dbc0:	4604      	mov	r4, r0
 800dbc2:	4608      	mov	r0, r1
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	602a      	str	r2, [r5, #0]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f7f5 fdfc 	bl	80037c8 <_lseek>
 800dbd0:	1c43      	adds	r3, r0, #1
 800dbd2:	d102      	bne.n	800dbda <_lseek_r+0x1e>
 800dbd4:	682b      	ldr	r3, [r5, #0]
 800dbd6:	b103      	cbz	r3, 800dbda <_lseek_r+0x1e>
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	bd38      	pop	{r3, r4, r5, pc}
 800dbdc:	20040a40 	.word	0x20040a40

0800dbe0 <_read_r>:
 800dbe0:	b538      	push	{r3, r4, r5, lr}
 800dbe2:	4d07      	ldr	r5, [pc, #28]	@ (800dc00 <_read_r+0x20>)
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	4608      	mov	r0, r1
 800dbe8:	4611      	mov	r1, r2
 800dbea:	2200      	movs	r2, #0
 800dbec:	602a      	str	r2, [r5, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f7f5 fd8a 	bl	8003708 <_read>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	d102      	bne.n	800dbfe <_read_r+0x1e>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	b103      	cbz	r3, 800dbfe <_read_r+0x1e>
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	20040a40 	.word	0x20040a40

0800dc04 <_write_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4d07      	ldr	r5, [pc, #28]	@ (800dc24 <_write_r+0x20>)
 800dc08:	4604      	mov	r4, r0
 800dc0a:	4608      	mov	r0, r1
 800dc0c:	4611      	mov	r1, r2
 800dc0e:	2200      	movs	r2, #0
 800dc10:	602a      	str	r2, [r5, #0]
 800dc12:	461a      	mov	r2, r3
 800dc14:	f7f5 fd95 	bl	8003742 <_write>
 800dc18:	1c43      	adds	r3, r0, #1
 800dc1a:	d102      	bne.n	800dc22 <_write_r+0x1e>
 800dc1c:	682b      	ldr	r3, [r5, #0]
 800dc1e:	b103      	cbz	r3, 800dc22 <_write_r+0x1e>
 800dc20:	6023      	str	r3, [r4, #0]
 800dc22:	bd38      	pop	{r3, r4, r5, pc}
 800dc24:	20040a40 	.word	0x20040a40

0800dc28 <__errno>:
 800dc28:	4b01      	ldr	r3, [pc, #4]	@ (800dc30 <__errno+0x8>)
 800dc2a:	6818      	ldr	r0, [r3, #0]
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	200402d8 	.word	0x200402d8

0800dc34 <__libc_init_array>:
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	4d0d      	ldr	r5, [pc, #52]	@ (800dc6c <__libc_init_array+0x38>)
 800dc38:	4c0d      	ldr	r4, [pc, #52]	@ (800dc70 <__libc_init_array+0x3c>)
 800dc3a:	1b64      	subs	r4, r4, r5
 800dc3c:	10a4      	asrs	r4, r4, #2
 800dc3e:	2600      	movs	r6, #0
 800dc40:	42a6      	cmp	r6, r4
 800dc42:	d109      	bne.n	800dc58 <__libc_init_array+0x24>
 800dc44:	4d0b      	ldr	r5, [pc, #44]	@ (800dc74 <__libc_init_array+0x40>)
 800dc46:	4c0c      	ldr	r4, [pc, #48]	@ (800dc78 <__libc_init_array+0x44>)
 800dc48:	f001 fe36 	bl	800f8b8 <_init>
 800dc4c:	1b64      	subs	r4, r4, r5
 800dc4e:	10a4      	asrs	r4, r4, #2
 800dc50:	2600      	movs	r6, #0
 800dc52:	42a6      	cmp	r6, r4
 800dc54:	d105      	bne.n	800dc62 <__libc_init_array+0x2e>
 800dc56:	bd70      	pop	{r4, r5, r6, pc}
 800dc58:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc5c:	4798      	blx	r3
 800dc5e:	3601      	adds	r6, #1
 800dc60:	e7ee      	b.n	800dc40 <__libc_init_array+0xc>
 800dc62:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc66:	4798      	blx	r3
 800dc68:	3601      	adds	r6, #1
 800dc6a:	e7f2      	b.n	800dc52 <__libc_init_array+0x1e>
 800dc6c:	0801042c 	.word	0x0801042c
 800dc70:	0801042c 	.word	0x0801042c
 800dc74:	0801042c 	.word	0x0801042c
 800dc78:	08010430 	.word	0x08010430

0800dc7c <__retarget_lock_init_recursive>:
 800dc7c:	4770      	bx	lr

0800dc7e <__retarget_lock_acquire_recursive>:
 800dc7e:	4770      	bx	lr

0800dc80 <__retarget_lock_release_recursive>:
 800dc80:	4770      	bx	lr

0800dc82 <strcpy>:
 800dc82:	4603      	mov	r3, r0
 800dc84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc88:	f803 2b01 	strb.w	r2, [r3], #1
 800dc8c:	2a00      	cmp	r2, #0
 800dc8e:	d1f9      	bne.n	800dc84 <strcpy+0x2>
 800dc90:	4770      	bx	lr

0800dc92 <memcpy>:
 800dc92:	440a      	add	r2, r1
 800dc94:	4291      	cmp	r1, r2
 800dc96:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc9a:	d100      	bne.n	800dc9e <memcpy+0xc>
 800dc9c:	4770      	bx	lr
 800dc9e:	b510      	push	{r4, lr}
 800dca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dca8:	4291      	cmp	r1, r2
 800dcaa:	d1f9      	bne.n	800dca0 <memcpy+0xe>
 800dcac:	bd10      	pop	{r4, pc}

0800dcae <quorem>:
 800dcae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb2:	6903      	ldr	r3, [r0, #16]
 800dcb4:	690c      	ldr	r4, [r1, #16]
 800dcb6:	42a3      	cmp	r3, r4
 800dcb8:	4607      	mov	r7, r0
 800dcba:	db7e      	blt.n	800ddba <quorem+0x10c>
 800dcbc:	3c01      	subs	r4, #1
 800dcbe:	f101 0814 	add.w	r8, r1, #20
 800dcc2:	00a3      	lsls	r3, r4, #2
 800dcc4:	f100 0514 	add.w	r5, r0, #20
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dcd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dce0:	fbb2 f6f3 	udiv	r6, r2, r3
 800dce4:	d32e      	bcc.n	800dd44 <quorem+0x96>
 800dce6:	f04f 0a00 	mov.w	sl, #0
 800dcea:	46c4      	mov	ip, r8
 800dcec:	46ae      	mov	lr, r5
 800dcee:	46d3      	mov	fp, sl
 800dcf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dcf4:	b298      	uxth	r0, r3
 800dcf6:	fb06 a000 	mla	r0, r6, r0, sl
 800dcfa:	0c02      	lsrs	r2, r0, #16
 800dcfc:	0c1b      	lsrs	r3, r3, #16
 800dcfe:	fb06 2303 	mla	r3, r6, r3, r2
 800dd02:	f8de 2000 	ldr.w	r2, [lr]
 800dd06:	b280      	uxth	r0, r0
 800dd08:	b292      	uxth	r2, r2
 800dd0a:	1a12      	subs	r2, r2, r0
 800dd0c:	445a      	add	r2, fp
 800dd0e:	f8de 0000 	ldr.w	r0, [lr]
 800dd12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dd1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dd20:	b292      	uxth	r2, r2
 800dd22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dd26:	45e1      	cmp	r9, ip
 800dd28:	f84e 2b04 	str.w	r2, [lr], #4
 800dd2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dd30:	d2de      	bcs.n	800dcf0 <quorem+0x42>
 800dd32:	9b00      	ldr	r3, [sp, #0]
 800dd34:	58eb      	ldr	r3, [r5, r3]
 800dd36:	b92b      	cbnz	r3, 800dd44 <quorem+0x96>
 800dd38:	9b01      	ldr	r3, [sp, #4]
 800dd3a:	3b04      	subs	r3, #4
 800dd3c:	429d      	cmp	r5, r3
 800dd3e:	461a      	mov	r2, r3
 800dd40:	d32f      	bcc.n	800dda2 <quorem+0xf4>
 800dd42:	613c      	str	r4, [r7, #16]
 800dd44:	4638      	mov	r0, r7
 800dd46:	f001 f97d 	bl	800f044 <__mcmp>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	db25      	blt.n	800dd9a <quorem+0xec>
 800dd4e:	4629      	mov	r1, r5
 800dd50:	2000      	movs	r0, #0
 800dd52:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd56:	f8d1 c000 	ldr.w	ip, [r1]
 800dd5a:	fa1f fe82 	uxth.w	lr, r2
 800dd5e:	fa1f f38c 	uxth.w	r3, ip
 800dd62:	eba3 030e 	sub.w	r3, r3, lr
 800dd66:	4403      	add	r3, r0
 800dd68:	0c12      	lsrs	r2, r2, #16
 800dd6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dd6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd78:	45c1      	cmp	r9, r8
 800dd7a:	f841 3b04 	str.w	r3, [r1], #4
 800dd7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd82:	d2e6      	bcs.n	800dd52 <quorem+0xa4>
 800dd84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd8c:	b922      	cbnz	r2, 800dd98 <quorem+0xea>
 800dd8e:	3b04      	subs	r3, #4
 800dd90:	429d      	cmp	r5, r3
 800dd92:	461a      	mov	r2, r3
 800dd94:	d30b      	bcc.n	800ddae <quorem+0x100>
 800dd96:	613c      	str	r4, [r7, #16]
 800dd98:	3601      	adds	r6, #1
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	b003      	add	sp, #12
 800dd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda2:	6812      	ldr	r2, [r2, #0]
 800dda4:	3b04      	subs	r3, #4
 800dda6:	2a00      	cmp	r2, #0
 800dda8:	d1cb      	bne.n	800dd42 <quorem+0x94>
 800ddaa:	3c01      	subs	r4, #1
 800ddac:	e7c6      	b.n	800dd3c <quorem+0x8e>
 800ddae:	6812      	ldr	r2, [r2, #0]
 800ddb0:	3b04      	subs	r3, #4
 800ddb2:	2a00      	cmp	r2, #0
 800ddb4:	d1ef      	bne.n	800dd96 <quorem+0xe8>
 800ddb6:	3c01      	subs	r4, #1
 800ddb8:	e7ea      	b.n	800dd90 <quorem+0xe2>
 800ddba:	2000      	movs	r0, #0
 800ddbc:	e7ee      	b.n	800dd9c <quorem+0xee>
	...

0800ddc0 <_dtoa_r>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	69c7      	ldr	r7, [r0, #28]
 800ddc6:	b097      	sub	sp, #92	@ 0x5c
 800ddc8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ddcc:	ec55 4b10 	vmov	r4, r5, d0
 800ddd0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ddd2:	9107      	str	r1, [sp, #28]
 800ddd4:	4681      	mov	r9, r0
 800ddd6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ddd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ddda:	b97f      	cbnz	r7, 800ddfc <_dtoa_r+0x3c>
 800dddc:	2010      	movs	r0, #16
 800ddde:	f000 fe09 	bl	800e9f4 <malloc>
 800dde2:	4602      	mov	r2, r0
 800dde4:	f8c9 001c 	str.w	r0, [r9, #28]
 800dde8:	b920      	cbnz	r0, 800ddf4 <_dtoa_r+0x34>
 800ddea:	4ba9      	ldr	r3, [pc, #676]	@ (800e090 <_dtoa_r+0x2d0>)
 800ddec:	21ef      	movs	r1, #239	@ 0xef
 800ddee:	48a9      	ldr	r0, [pc, #676]	@ (800e094 <_dtoa_r+0x2d4>)
 800ddf0:	f001 fcb2 	bl	800f758 <__assert_func>
 800ddf4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ddf8:	6007      	str	r7, [r0, #0]
 800ddfa:	60c7      	str	r7, [r0, #12]
 800ddfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800de00:	6819      	ldr	r1, [r3, #0]
 800de02:	b159      	cbz	r1, 800de1c <_dtoa_r+0x5c>
 800de04:	685a      	ldr	r2, [r3, #4]
 800de06:	604a      	str	r2, [r1, #4]
 800de08:	2301      	movs	r3, #1
 800de0a:	4093      	lsls	r3, r2
 800de0c:	608b      	str	r3, [r1, #8]
 800de0e:	4648      	mov	r0, r9
 800de10:	f000 fee6 	bl	800ebe0 <_Bfree>
 800de14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]
 800de1c:	1e2b      	subs	r3, r5, #0
 800de1e:	bfb9      	ittee	lt
 800de20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800de24:	9305      	strlt	r3, [sp, #20]
 800de26:	2300      	movge	r3, #0
 800de28:	6033      	strge	r3, [r6, #0]
 800de2a:	9f05      	ldr	r7, [sp, #20]
 800de2c:	4b9a      	ldr	r3, [pc, #616]	@ (800e098 <_dtoa_r+0x2d8>)
 800de2e:	bfbc      	itt	lt
 800de30:	2201      	movlt	r2, #1
 800de32:	6032      	strlt	r2, [r6, #0]
 800de34:	43bb      	bics	r3, r7
 800de36:	d112      	bne.n	800de5e <_dtoa_r+0x9e>
 800de38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800de3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800de3e:	6013      	str	r3, [r2, #0]
 800de40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de44:	4323      	orrs	r3, r4
 800de46:	f000 855a 	beq.w	800e8fe <_dtoa_r+0xb3e>
 800de4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de4c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e0ac <_dtoa_r+0x2ec>
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 855c 	beq.w	800e90e <_dtoa_r+0xb4e>
 800de56:	f10a 0303 	add.w	r3, sl, #3
 800de5a:	f000 bd56 	b.w	800e90a <_dtoa_r+0xb4a>
 800de5e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800de62:	2200      	movs	r2, #0
 800de64:	ec51 0b17 	vmov	r0, r1, d7
 800de68:	2300      	movs	r3, #0
 800de6a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800de6e:	f7f2 fe43 	bl	8000af8 <__aeabi_dcmpeq>
 800de72:	4680      	mov	r8, r0
 800de74:	b158      	cbz	r0, 800de8e <_dtoa_r+0xce>
 800de76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800de78:	2301      	movs	r3, #1
 800de7a:	6013      	str	r3, [r2, #0]
 800de7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de7e:	b113      	cbz	r3, 800de86 <_dtoa_r+0xc6>
 800de80:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800de82:	4b86      	ldr	r3, [pc, #536]	@ (800e09c <_dtoa_r+0x2dc>)
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e0b0 <_dtoa_r+0x2f0>
 800de8a:	f000 bd40 	b.w	800e90e <_dtoa_r+0xb4e>
 800de8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800de92:	aa14      	add	r2, sp, #80	@ 0x50
 800de94:	a915      	add	r1, sp, #84	@ 0x54
 800de96:	4648      	mov	r0, r9
 800de98:	f001 f984 	bl	800f1a4 <__d2b>
 800de9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dea0:	9002      	str	r0, [sp, #8]
 800dea2:	2e00      	cmp	r6, #0
 800dea4:	d078      	beq.n	800df98 <_dtoa_r+0x1d8>
 800dea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dea8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800deac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800deb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800deb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800debc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dec0:	4619      	mov	r1, r3
 800dec2:	2200      	movs	r2, #0
 800dec4:	4b76      	ldr	r3, [pc, #472]	@ (800e0a0 <_dtoa_r+0x2e0>)
 800dec6:	f7f2 f9f7 	bl	80002b8 <__aeabi_dsub>
 800deca:	a36b      	add	r3, pc, #428	@ (adr r3, 800e078 <_dtoa_r+0x2b8>)
 800decc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded0:	f7f2 fbaa 	bl	8000628 <__aeabi_dmul>
 800ded4:	a36a      	add	r3, pc, #424	@ (adr r3, 800e080 <_dtoa_r+0x2c0>)
 800ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deda:	f7f2 f9ef 	bl	80002bc <__adddf3>
 800dede:	4604      	mov	r4, r0
 800dee0:	4630      	mov	r0, r6
 800dee2:	460d      	mov	r5, r1
 800dee4:	f7f2 fb36 	bl	8000554 <__aeabi_i2d>
 800dee8:	a367      	add	r3, pc, #412	@ (adr r3, 800e088 <_dtoa_r+0x2c8>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 fb9b 	bl	8000628 <__aeabi_dmul>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	4620      	mov	r0, r4
 800def8:	4629      	mov	r1, r5
 800defa:	f7f2 f9df 	bl	80002bc <__adddf3>
 800defe:	4604      	mov	r4, r0
 800df00:	460d      	mov	r5, r1
 800df02:	f7f2 fe41 	bl	8000b88 <__aeabi_d2iz>
 800df06:	2200      	movs	r2, #0
 800df08:	4607      	mov	r7, r0
 800df0a:	2300      	movs	r3, #0
 800df0c:	4620      	mov	r0, r4
 800df0e:	4629      	mov	r1, r5
 800df10:	f7f2 fdfc 	bl	8000b0c <__aeabi_dcmplt>
 800df14:	b140      	cbz	r0, 800df28 <_dtoa_r+0x168>
 800df16:	4638      	mov	r0, r7
 800df18:	f7f2 fb1c 	bl	8000554 <__aeabi_i2d>
 800df1c:	4622      	mov	r2, r4
 800df1e:	462b      	mov	r3, r5
 800df20:	f7f2 fdea 	bl	8000af8 <__aeabi_dcmpeq>
 800df24:	b900      	cbnz	r0, 800df28 <_dtoa_r+0x168>
 800df26:	3f01      	subs	r7, #1
 800df28:	2f16      	cmp	r7, #22
 800df2a:	d852      	bhi.n	800dfd2 <_dtoa_r+0x212>
 800df2c:	4b5d      	ldr	r3, [pc, #372]	@ (800e0a4 <_dtoa_r+0x2e4>)
 800df2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800df3a:	f7f2 fde7 	bl	8000b0c <__aeabi_dcmplt>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d049      	beq.n	800dfd6 <_dtoa_r+0x216>
 800df42:	3f01      	subs	r7, #1
 800df44:	2300      	movs	r3, #0
 800df46:	9310      	str	r3, [sp, #64]	@ 0x40
 800df48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800df4a:	1b9b      	subs	r3, r3, r6
 800df4c:	1e5a      	subs	r2, r3, #1
 800df4e:	bf45      	ittet	mi
 800df50:	f1c3 0301 	rsbmi	r3, r3, #1
 800df54:	9300      	strmi	r3, [sp, #0]
 800df56:	2300      	movpl	r3, #0
 800df58:	2300      	movmi	r3, #0
 800df5a:	9206      	str	r2, [sp, #24]
 800df5c:	bf54      	ite	pl
 800df5e:	9300      	strpl	r3, [sp, #0]
 800df60:	9306      	strmi	r3, [sp, #24]
 800df62:	2f00      	cmp	r7, #0
 800df64:	db39      	blt.n	800dfda <_dtoa_r+0x21a>
 800df66:	9b06      	ldr	r3, [sp, #24]
 800df68:	970d      	str	r7, [sp, #52]	@ 0x34
 800df6a:	443b      	add	r3, r7
 800df6c:	9306      	str	r3, [sp, #24]
 800df6e:	2300      	movs	r3, #0
 800df70:	9308      	str	r3, [sp, #32]
 800df72:	9b07      	ldr	r3, [sp, #28]
 800df74:	2b09      	cmp	r3, #9
 800df76:	d863      	bhi.n	800e040 <_dtoa_r+0x280>
 800df78:	2b05      	cmp	r3, #5
 800df7a:	bfc4      	itt	gt
 800df7c:	3b04      	subgt	r3, #4
 800df7e:	9307      	strgt	r3, [sp, #28]
 800df80:	9b07      	ldr	r3, [sp, #28]
 800df82:	f1a3 0302 	sub.w	r3, r3, #2
 800df86:	bfcc      	ite	gt
 800df88:	2400      	movgt	r4, #0
 800df8a:	2401      	movle	r4, #1
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	d863      	bhi.n	800e058 <_dtoa_r+0x298>
 800df90:	e8df f003 	tbb	[pc, r3]
 800df94:	2b375452 	.word	0x2b375452
 800df98:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800df9c:	441e      	add	r6, r3
 800df9e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dfa2:	2b20      	cmp	r3, #32
 800dfa4:	bfc1      	itttt	gt
 800dfa6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dfaa:	409f      	lslgt	r7, r3
 800dfac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dfb0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dfb4:	bfd6      	itet	le
 800dfb6:	f1c3 0320 	rsble	r3, r3, #32
 800dfba:	ea47 0003 	orrgt.w	r0, r7, r3
 800dfbe:	fa04 f003 	lslle.w	r0, r4, r3
 800dfc2:	f7f2 fab7 	bl	8000534 <__aeabi_ui2d>
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dfcc:	3e01      	subs	r6, #1
 800dfce:	9212      	str	r2, [sp, #72]	@ 0x48
 800dfd0:	e776      	b.n	800dec0 <_dtoa_r+0x100>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e7b7      	b.n	800df46 <_dtoa_r+0x186>
 800dfd6:	9010      	str	r0, [sp, #64]	@ 0x40
 800dfd8:	e7b6      	b.n	800df48 <_dtoa_r+0x188>
 800dfda:	9b00      	ldr	r3, [sp, #0]
 800dfdc:	1bdb      	subs	r3, r3, r7
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	427b      	negs	r3, r7
 800dfe2:	9308      	str	r3, [sp, #32]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	930d      	str	r3, [sp, #52]	@ 0x34
 800dfe8:	e7c3      	b.n	800df72 <_dtoa_r+0x1b2>
 800dfea:	2301      	movs	r3, #1
 800dfec:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dff0:	eb07 0b03 	add.w	fp, r7, r3
 800dff4:	f10b 0301 	add.w	r3, fp, #1
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	9303      	str	r3, [sp, #12]
 800dffc:	bfb8      	it	lt
 800dffe:	2301      	movlt	r3, #1
 800e000:	e006      	b.n	800e010 <_dtoa_r+0x250>
 800e002:	2301      	movs	r3, #1
 800e004:	9309      	str	r3, [sp, #36]	@ 0x24
 800e006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e008:	2b00      	cmp	r3, #0
 800e00a:	dd28      	ble.n	800e05e <_dtoa_r+0x29e>
 800e00c:	469b      	mov	fp, r3
 800e00e:	9303      	str	r3, [sp, #12]
 800e010:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e014:	2100      	movs	r1, #0
 800e016:	2204      	movs	r2, #4
 800e018:	f102 0514 	add.w	r5, r2, #20
 800e01c:	429d      	cmp	r5, r3
 800e01e:	d926      	bls.n	800e06e <_dtoa_r+0x2ae>
 800e020:	6041      	str	r1, [r0, #4]
 800e022:	4648      	mov	r0, r9
 800e024:	f000 fd9c 	bl	800eb60 <_Balloc>
 800e028:	4682      	mov	sl, r0
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d142      	bne.n	800e0b4 <_dtoa_r+0x2f4>
 800e02e:	4b1e      	ldr	r3, [pc, #120]	@ (800e0a8 <_dtoa_r+0x2e8>)
 800e030:	4602      	mov	r2, r0
 800e032:	f240 11af 	movw	r1, #431	@ 0x1af
 800e036:	e6da      	b.n	800ddee <_dtoa_r+0x2e>
 800e038:	2300      	movs	r3, #0
 800e03a:	e7e3      	b.n	800e004 <_dtoa_r+0x244>
 800e03c:	2300      	movs	r3, #0
 800e03e:	e7d5      	b.n	800dfec <_dtoa_r+0x22c>
 800e040:	2401      	movs	r4, #1
 800e042:	2300      	movs	r3, #0
 800e044:	9307      	str	r3, [sp, #28]
 800e046:	9409      	str	r4, [sp, #36]	@ 0x24
 800e048:	f04f 3bff 	mov.w	fp, #4294967295
 800e04c:	2200      	movs	r2, #0
 800e04e:	f8cd b00c 	str.w	fp, [sp, #12]
 800e052:	2312      	movs	r3, #18
 800e054:	920c      	str	r2, [sp, #48]	@ 0x30
 800e056:	e7db      	b.n	800e010 <_dtoa_r+0x250>
 800e058:	2301      	movs	r3, #1
 800e05a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e05c:	e7f4      	b.n	800e048 <_dtoa_r+0x288>
 800e05e:	f04f 0b01 	mov.w	fp, #1
 800e062:	f8cd b00c 	str.w	fp, [sp, #12]
 800e066:	465b      	mov	r3, fp
 800e068:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e06c:	e7d0      	b.n	800e010 <_dtoa_r+0x250>
 800e06e:	3101      	adds	r1, #1
 800e070:	0052      	lsls	r2, r2, #1
 800e072:	e7d1      	b.n	800e018 <_dtoa_r+0x258>
 800e074:	f3af 8000 	nop.w
 800e078:	636f4361 	.word	0x636f4361
 800e07c:	3fd287a7 	.word	0x3fd287a7
 800e080:	8b60c8b3 	.word	0x8b60c8b3
 800e084:	3fc68a28 	.word	0x3fc68a28
 800e088:	509f79fb 	.word	0x509f79fb
 800e08c:	3fd34413 	.word	0x3fd34413
 800e090:	080100ed 	.word	0x080100ed
 800e094:	08010104 	.word	0x08010104
 800e098:	7ff00000 	.word	0x7ff00000
 800e09c:	080100bd 	.word	0x080100bd
 800e0a0:	3ff80000 	.word	0x3ff80000
 800e0a4:	08010258 	.word	0x08010258
 800e0a8:	0801015c 	.word	0x0801015c
 800e0ac:	080100e9 	.word	0x080100e9
 800e0b0:	080100bc 	.word	0x080100bc
 800e0b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e0b8:	6018      	str	r0, [r3, #0]
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	2b0e      	cmp	r3, #14
 800e0be:	f200 80a1 	bhi.w	800e204 <_dtoa_r+0x444>
 800e0c2:	2c00      	cmp	r4, #0
 800e0c4:	f000 809e 	beq.w	800e204 <_dtoa_r+0x444>
 800e0c8:	2f00      	cmp	r7, #0
 800e0ca:	dd33      	ble.n	800e134 <_dtoa_r+0x374>
 800e0cc:	4b9c      	ldr	r3, [pc, #624]	@ (800e340 <_dtoa_r+0x580>)
 800e0ce:	f007 020f 	and.w	r2, r7, #15
 800e0d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0d6:	ed93 7b00 	vldr	d7, [r3]
 800e0da:	05f8      	lsls	r0, r7, #23
 800e0dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e0e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e0e4:	d516      	bpl.n	800e114 <_dtoa_r+0x354>
 800e0e6:	4b97      	ldr	r3, [pc, #604]	@ (800e344 <_dtoa_r+0x584>)
 800e0e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e0ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0f0:	f7f2 fbc4 	bl	800087c <__aeabi_ddiv>
 800e0f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0f8:	f004 040f 	and.w	r4, r4, #15
 800e0fc:	2603      	movs	r6, #3
 800e0fe:	4d91      	ldr	r5, [pc, #580]	@ (800e344 <_dtoa_r+0x584>)
 800e100:	b954      	cbnz	r4, 800e118 <_dtoa_r+0x358>
 800e102:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e10a:	f7f2 fbb7 	bl	800087c <__aeabi_ddiv>
 800e10e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e112:	e028      	b.n	800e166 <_dtoa_r+0x3a6>
 800e114:	2602      	movs	r6, #2
 800e116:	e7f2      	b.n	800e0fe <_dtoa_r+0x33e>
 800e118:	07e1      	lsls	r1, r4, #31
 800e11a:	d508      	bpl.n	800e12e <_dtoa_r+0x36e>
 800e11c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e120:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e124:	f7f2 fa80 	bl	8000628 <__aeabi_dmul>
 800e128:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e12c:	3601      	adds	r6, #1
 800e12e:	1064      	asrs	r4, r4, #1
 800e130:	3508      	adds	r5, #8
 800e132:	e7e5      	b.n	800e100 <_dtoa_r+0x340>
 800e134:	f000 80af 	beq.w	800e296 <_dtoa_r+0x4d6>
 800e138:	427c      	negs	r4, r7
 800e13a:	4b81      	ldr	r3, [pc, #516]	@ (800e340 <_dtoa_r+0x580>)
 800e13c:	4d81      	ldr	r5, [pc, #516]	@ (800e344 <_dtoa_r+0x584>)
 800e13e:	f004 020f 	and.w	r2, r4, #15
 800e142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e14e:	f7f2 fa6b 	bl	8000628 <__aeabi_dmul>
 800e152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e156:	1124      	asrs	r4, r4, #4
 800e158:	2300      	movs	r3, #0
 800e15a:	2602      	movs	r6, #2
 800e15c:	2c00      	cmp	r4, #0
 800e15e:	f040 808f 	bne.w	800e280 <_dtoa_r+0x4c0>
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1d3      	bne.n	800e10e <_dtoa_r+0x34e>
 800e166:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e168:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 8094 	beq.w	800e29a <_dtoa_r+0x4da>
 800e172:	4b75      	ldr	r3, [pc, #468]	@ (800e348 <_dtoa_r+0x588>)
 800e174:	2200      	movs	r2, #0
 800e176:	4620      	mov	r0, r4
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 fcc7 	bl	8000b0c <__aeabi_dcmplt>
 800e17e:	2800      	cmp	r0, #0
 800e180:	f000 808b 	beq.w	800e29a <_dtoa_r+0x4da>
 800e184:	9b03      	ldr	r3, [sp, #12]
 800e186:	2b00      	cmp	r3, #0
 800e188:	f000 8087 	beq.w	800e29a <_dtoa_r+0x4da>
 800e18c:	f1bb 0f00 	cmp.w	fp, #0
 800e190:	dd34      	ble.n	800e1fc <_dtoa_r+0x43c>
 800e192:	4620      	mov	r0, r4
 800e194:	4b6d      	ldr	r3, [pc, #436]	@ (800e34c <_dtoa_r+0x58c>)
 800e196:	2200      	movs	r2, #0
 800e198:	4629      	mov	r1, r5
 800e19a:	f7f2 fa45 	bl	8000628 <__aeabi_dmul>
 800e19e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1a2:	f107 38ff 	add.w	r8, r7, #4294967295
 800e1a6:	3601      	adds	r6, #1
 800e1a8:	465c      	mov	r4, fp
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	f7f2 f9d2 	bl	8000554 <__aeabi_i2d>
 800e1b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1b4:	f7f2 fa38 	bl	8000628 <__aeabi_dmul>
 800e1b8:	4b65      	ldr	r3, [pc, #404]	@ (800e350 <_dtoa_r+0x590>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f7f2 f87e 	bl	80002bc <__adddf3>
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e1c6:	2c00      	cmp	r4, #0
 800e1c8:	d16a      	bne.n	800e2a0 <_dtoa_r+0x4e0>
 800e1ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1ce:	4b61      	ldr	r3, [pc, #388]	@ (800e354 <_dtoa_r+0x594>)
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f7f2 f871 	bl	80002b8 <__aeabi_dsub>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	460b      	mov	r3, r1
 800e1da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e1de:	462a      	mov	r2, r5
 800e1e0:	4633      	mov	r3, r6
 800e1e2:	f7f2 fcb1 	bl	8000b48 <__aeabi_dcmpgt>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	f040 8298 	bne.w	800e71c <_dtoa_r+0x95c>
 800e1ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1f0:	462a      	mov	r2, r5
 800e1f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e1f6:	f7f2 fc89 	bl	8000b0c <__aeabi_dcmplt>
 800e1fa:	bb38      	cbnz	r0, 800e24c <_dtoa_r+0x48c>
 800e1fc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e200:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e204:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e206:	2b00      	cmp	r3, #0
 800e208:	f2c0 8157 	blt.w	800e4ba <_dtoa_r+0x6fa>
 800e20c:	2f0e      	cmp	r7, #14
 800e20e:	f300 8154 	bgt.w	800e4ba <_dtoa_r+0x6fa>
 800e212:	4b4b      	ldr	r3, [pc, #300]	@ (800e340 <_dtoa_r+0x580>)
 800e214:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e218:	ed93 7b00 	vldr	d7, [r3]
 800e21c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e21e:	2b00      	cmp	r3, #0
 800e220:	ed8d 7b00 	vstr	d7, [sp]
 800e224:	f280 80e5 	bge.w	800e3f2 <_dtoa_r+0x632>
 800e228:	9b03      	ldr	r3, [sp, #12]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f300 80e1 	bgt.w	800e3f2 <_dtoa_r+0x632>
 800e230:	d10c      	bne.n	800e24c <_dtoa_r+0x48c>
 800e232:	4b48      	ldr	r3, [pc, #288]	@ (800e354 <_dtoa_r+0x594>)
 800e234:	2200      	movs	r2, #0
 800e236:	ec51 0b17 	vmov	r0, r1, d7
 800e23a:	f7f2 f9f5 	bl	8000628 <__aeabi_dmul>
 800e23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e242:	f7f2 fc77 	bl	8000b34 <__aeabi_dcmpge>
 800e246:	2800      	cmp	r0, #0
 800e248:	f000 8266 	beq.w	800e718 <_dtoa_r+0x958>
 800e24c:	2400      	movs	r4, #0
 800e24e:	4625      	mov	r5, r4
 800e250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e252:	4656      	mov	r6, sl
 800e254:	ea6f 0803 	mvn.w	r8, r3
 800e258:	2700      	movs	r7, #0
 800e25a:	4621      	mov	r1, r4
 800e25c:	4648      	mov	r0, r9
 800e25e:	f000 fcbf 	bl	800ebe0 <_Bfree>
 800e262:	2d00      	cmp	r5, #0
 800e264:	f000 80bd 	beq.w	800e3e2 <_dtoa_r+0x622>
 800e268:	b12f      	cbz	r7, 800e276 <_dtoa_r+0x4b6>
 800e26a:	42af      	cmp	r7, r5
 800e26c:	d003      	beq.n	800e276 <_dtoa_r+0x4b6>
 800e26e:	4639      	mov	r1, r7
 800e270:	4648      	mov	r0, r9
 800e272:	f000 fcb5 	bl	800ebe0 <_Bfree>
 800e276:	4629      	mov	r1, r5
 800e278:	4648      	mov	r0, r9
 800e27a:	f000 fcb1 	bl	800ebe0 <_Bfree>
 800e27e:	e0b0      	b.n	800e3e2 <_dtoa_r+0x622>
 800e280:	07e2      	lsls	r2, r4, #31
 800e282:	d505      	bpl.n	800e290 <_dtoa_r+0x4d0>
 800e284:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e288:	f7f2 f9ce 	bl	8000628 <__aeabi_dmul>
 800e28c:	3601      	adds	r6, #1
 800e28e:	2301      	movs	r3, #1
 800e290:	1064      	asrs	r4, r4, #1
 800e292:	3508      	adds	r5, #8
 800e294:	e762      	b.n	800e15c <_dtoa_r+0x39c>
 800e296:	2602      	movs	r6, #2
 800e298:	e765      	b.n	800e166 <_dtoa_r+0x3a6>
 800e29a:	9c03      	ldr	r4, [sp, #12]
 800e29c:	46b8      	mov	r8, r7
 800e29e:	e784      	b.n	800e1aa <_dtoa_r+0x3ea>
 800e2a0:	4b27      	ldr	r3, [pc, #156]	@ (800e340 <_dtoa_r+0x580>)
 800e2a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e2a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e2a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e2ac:	4454      	add	r4, sl
 800e2ae:	2900      	cmp	r1, #0
 800e2b0:	d054      	beq.n	800e35c <_dtoa_r+0x59c>
 800e2b2:	4929      	ldr	r1, [pc, #164]	@ (800e358 <_dtoa_r+0x598>)
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	f7f2 fae1 	bl	800087c <__aeabi_ddiv>
 800e2ba:	4633      	mov	r3, r6
 800e2bc:	462a      	mov	r2, r5
 800e2be:	f7f1 fffb 	bl	80002b8 <__aeabi_dsub>
 800e2c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e2c6:	4656      	mov	r6, sl
 800e2c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2cc:	f7f2 fc5c 	bl	8000b88 <__aeabi_d2iz>
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	f7f2 f93f 	bl	8000554 <__aeabi_i2d>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	460b      	mov	r3, r1
 800e2da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2de:	f7f1 ffeb 	bl	80002b8 <__aeabi_dsub>
 800e2e2:	3530      	adds	r5, #48	@ 0x30
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e2ec:	f806 5b01 	strb.w	r5, [r6], #1
 800e2f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e2f4:	f7f2 fc0a 	bl	8000b0c <__aeabi_dcmplt>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d172      	bne.n	800e3e2 <_dtoa_r+0x622>
 800e2fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e300:	4911      	ldr	r1, [pc, #68]	@ (800e348 <_dtoa_r+0x588>)
 800e302:	2000      	movs	r0, #0
 800e304:	f7f1 ffd8 	bl	80002b8 <__aeabi_dsub>
 800e308:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e30c:	f7f2 fbfe 	bl	8000b0c <__aeabi_dcmplt>
 800e310:	2800      	cmp	r0, #0
 800e312:	f040 80b4 	bne.w	800e47e <_dtoa_r+0x6be>
 800e316:	42a6      	cmp	r6, r4
 800e318:	f43f af70 	beq.w	800e1fc <_dtoa_r+0x43c>
 800e31c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e320:	4b0a      	ldr	r3, [pc, #40]	@ (800e34c <_dtoa_r+0x58c>)
 800e322:	2200      	movs	r2, #0
 800e324:	f7f2 f980 	bl	8000628 <__aeabi_dmul>
 800e328:	4b08      	ldr	r3, [pc, #32]	@ (800e34c <_dtoa_r+0x58c>)
 800e32a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e32e:	2200      	movs	r2, #0
 800e330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e334:	f7f2 f978 	bl	8000628 <__aeabi_dmul>
 800e338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e33c:	e7c4      	b.n	800e2c8 <_dtoa_r+0x508>
 800e33e:	bf00      	nop
 800e340:	08010258 	.word	0x08010258
 800e344:	08010230 	.word	0x08010230
 800e348:	3ff00000 	.word	0x3ff00000
 800e34c:	40240000 	.word	0x40240000
 800e350:	401c0000 	.word	0x401c0000
 800e354:	40140000 	.word	0x40140000
 800e358:	3fe00000 	.word	0x3fe00000
 800e35c:	4631      	mov	r1, r6
 800e35e:	4628      	mov	r0, r5
 800e360:	f7f2 f962 	bl	8000628 <__aeabi_dmul>
 800e364:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e368:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e36a:	4656      	mov	r6, sl
 800e36c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e370:	f7f2 fc0a 	bl	8000b88 <__aeabi_d2iz>
 800e374:	4605      	mov	r5, r0
 800e376:	f7f2 f8ed 	bl	8000554 <__aeabi_i2d>
 800e37a:	4602      	mov	r2, r0
 800e37c:	460b      	mov	r3, r1
 800e37e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e382:	f7f1 ff99 	bl	80002b8 <__aeabi_dsub>
 800e386:	3530      	adds	r5, #48	@ 0x30
 800e388:	f806 5b01 	strb.w	r5, [r6], #1
 800e38c:	4602      	mov	r2, r0
 800e38e:	460b      	mov	r3, r1
 800e390:	42a6      	cmp	r6, r4
 800e392:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e396:	f04f 0200 	mov.w	r2, #0
 800e39a:	d124      	bne.n	800e3e6 <_dtoa_r+0x626>
 800e39c:	4baf      	ldr	r3, [pc, #700]	@ (800e65c <_dtoa_r+0x89c>)
 800e39e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e3a2:	f7f1 ff8b 	bl	80002bc <__adddf3>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3ae:	f7f2 fbcb 	bl	8000b48 <__aeabi_dcmpgt>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d163      	bne.n	800e47e <_dtoa_r+0x6be>
 800e3b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e3ba:	49a8      	ldr	r1, [pc, #672]	@ (800e65c <_dtoa_r+0x89c>)
 800e3bc:	2000      	movs	r0, #0
 800e3be:	f7f1 ff7b 	bl	80002b8 <__aeabi_dsub>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3ca:	f7f2 fb9f 	bl	8000b0c <__aeabi_dcmplt>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	f43f af14 	beq.w	800e1fc <_dtoa_r+0x43c>
 800e3d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e3d6:	1e73      	subs	r3, r6, #1
 800e3d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e3da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3de:	2b30      	cmp	r3, #48	@ 0x30
 800e3e0:	d0f8      	beq.n	800e3d4 <_dtoa_r+0x614>
 800e3e2:	4647      	mov	r7, r8
 800e3e4:	e03b      	b.n	800e45e <_dtoa_r+0x69e>
 800e3e6:	4b9e      	ldr	r3, [pc, #632]	@ (800e660 <_dtoa_r+0x8a0>)
 800e3e8:	f7f2 f91e 	bl	8000628 <__aeabi_dmul>
 800e3ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3f0:	e7bc      	b.n	800e36c <_dtoa_r+0x5ac>
 800e3f2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e3f6:	4656      	mov	r6, sl
 800e3f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	4629      	mov	r1, r5
 800e400:	f7f2 fa3c 	bl	800087c <__aeabi_ddiv>
 800e404:	f7f2 fbc0 	bl	8000b88 <__aeabi_d2iz>
 800e408:	4680      	mov	r8, r0
 800e40a:	f7f2 f8a3 	bl	8000554 <__aeabi_i2d>
 800e40e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e412:	f7f2 f909 	bl	8000628 <__aeabi_dmul>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	4620      	mov	r0, r4
 800e41c:	4629      	mov	r1, r5
 800e41e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e422:	f7f1 ff49 	bl	80002b8 <__aeabi_dsub>
 800e426:	f806 4b01 	strb.w	r4, [r6], #1
 800e42a:	9d03      	ldr	r5, [sp, #12]
 800e42c:	eba6 040a 	sub.w	r4, r6, sl
 800e430:	42a5      	cmp	r5, r4
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	d133      	bne.n	800e4a0 <_dtoa_r+0x6e0>
 800e438:	f7f1 ff40 	bl	80002bc <__adddf3>
 800e43c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e440:	4604      	mov	r4, r0
 800e442:	460d      	mov	r5, r1
 800e444:	f7f2 fb80 	bl	8000b48 <__aeabi_dcmpgt>
 800e448:	b9c0      	cbnz	r0, 800e47c <_dtoa_r+0x6bc>
 800e44a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e44e:	4620      	mov	r0, r4
 800e450:	4629      	mov	r1, r5
 800e452:	f7f2 fb51 	bl	8000af8 <__aeabi_dcmpeq>
 800e456:	b110      	cbz	r0, 800e45e <_dtoa_r+0x69e>
 800e458:	f018 0f01 	tst.w	r8, #1
 800e45c:	d10e      	bne.n	800e47c <_dtoa_r+0x6bc>
 800e45e:	9902      	ldr	r1, [sp, #8]
 800e460:	4648      	mov	r0, r9
 800e462:	f000 fbbd 	bl	800ebe0 <_Bfree>
 800e466:	2300      	movs	r3, #0
 800e468:	7033      	strb	r3, [r6, #0]
 800e46a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e46c:	3701      	adds	r7, #1
 800e46e:	601f      	str	r7, [r3, #0]
 800e470:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e472:	2b00      	cmp	r3, #0
 800e474:	f000 824b 	beq.w	800e90e <_dtoa_r+0xb4e>
 800e478:	601e      	str	r6, [r3, #0]
 800e47a:	e248      	b.n	800e90e <_dtoa_r+0xb4e>
 800e47c:	46b8      	mov	r8, r7
 800e47e:	4633      	mov	r3, r6
 800e480:	461e      	mov	r6, r3
 800e482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e486:	2a39      	cmp	r2, #57	@ 0x39
 800e488:	d106      	bne.n	800e498 <_dtoa_r+0x6d8>
 800e48a:	459a      	cmp	sl, r3
 800e48c:	d1f8      	bne.n	800e480 <_dtoa_r+0x6c0>
 800e48e:	2230      	movs	r2, #48	@ 0x30
 800e490:	f108 0801 	add.w	r8, r8, #1
 800e494:	f88a 2000 	strb.w	r2, [sl]
 800e498:	781a      	ldrb	r2, [r3, #0]
 800e49a:	3201      	adds	r2, #1
 800e49c:	701a      	strb	r2, [r3, #0]
 800e49e:	e7a0      	b.n	800e3e2 <_dtoa_r+0x622>
 800e4a0:	4b6f      	ldr	r3, [pc, #444]	@ (800e660 <_dtoa_r+0x8a0>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f7f2 f8c0 	bl	8000628 <__aeabi_dmul>
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	460d      	mov	r5, r1
 800e4b0:	f7f2 fb22 	bl	8000af8 <__aeabi_dcmpeq>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d09f      	beq.n	800e3f8 <_dtoa_r+0x638>
 800e4b8:	e7d1      	b.n	800e45e <_dtoa_r+0x69e>
 800e4ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4bc:	2a00      	cmp	r2, #0
 800e4be:	f000 80ea 	beq.w	800e696 <_dtoa_r+0x8d6>
 800e4c2:	9a07      	ldr	r2, [sp, #28]
 800e4c4:	2a01      	cmp	r2, #1
 800e4c6:	f300 80cd 	bgt.w	800e664 <_dtoa_r+0x8a4>
 800e4ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e4cc:	2a00      	cmp	r2, #0
 800e4ce:	f000 80c1 	beq.w	800e654 <_dtoa_r+0x894>
 800e4d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e4d6:	9c08      	ldr	r4, [sp, #32]
 800e4d8:	9e00      	ldr	r6, [sp, #0]
 800e4da:	9a00      	ldr	r2, [sp, #0]
 800e4dc:	441a      	add	r2, r3
 800e4de:	9200      	str	r2, [sp, #0]
 800e4e0:	9a06      	ldr	r2, [sp, #24]
 800e4e2:	2101      	movs	r1, #1
 800e4e4:	441a      	add	r2, r3
 800e4e6:	4648      	mov	r0, r9
 800e4e8:	9206      	str	r2, [sp, #24]
 800e4ea:	f000 fc2d 	bl	800ed48 <__i2b>
 800e4ee:	4605      	mov	r5, r0
 800e4f0:	b166      	cbz	r6, 800e50c <_dtoa_r+0x74c>
 800e4f2:	9b06      	ldr	r3, [sp, #24]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	dd09      	ble.n	800e50c <_dtoa_r+0x74c>
 800e4f8:	42b3      	cmp	r3, r6
 800e4fa:	9a00      	ldr	r2, [sp, #0]
 800e4fc:	bfa8      	it	ge
 800e4fe:	4633      	movge	r3, r6
 800e500:	1ad2      	subs	r2, r2, r3
 800e502:	9200      	str	r2, [sp, #0]
 800e504:	9a06      	ldr	r2, [sp, #24]
 800e506:	1af6      	subs	r6, r6, r3
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	9306      	str	r3, [sp, #24]
 800e50c:	9b08      	ldr	r3, [sp, #32]
 800e50e:	b30b      	cbz	r3, 800e554 <_dtoa_r+0x794>
 800e510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e512:	2b00      	cmp	r3, #0
 800e514:	f000 80c6 	beq.w	800e6a4 <_dtoa_r+0x8e4>
 800e518:	2c00      	cmp	r4, #0
 800e51a:	f000 80c0 	beq.w	800e69e <_dtoa_r+0x8de>
 800e51e:	4629      	mov	r1, r5
 800e520:	4622      	mov	r2, r4
 800e522:	4648      	mov	r0, r9
 800e524:	f000 fcc8 	bl	800eeb8 <__pow5mult>
 800e528:	9a02      	ldr	r2, [sp, #8]
 800e52a:	4601      	mov	r1, r0
 800e52c:	4605      	mov	r5, r0
 800e52e:	4648      	mov	r0, r9
 800e530:	f000 fc20 	bl	800ed74 <__multiply>
 800e534:	9902      	ldr	r1, [sp, #8]
 800e536:	4680      	mov	r8, r0
 800e538:	4648      	mov	r0, r9
 800e53a:	f000 fb51 	bl	800ebe0 <_Bfree>
 800e53e:	9b08      	ldr	r3, [sp, #32]
 800e540:	1b1b      	subs	r3, r3, r4
 800e542:	9308      	str	r3, [sp, #32]
 800e544:	f000 80b1 	beq.w	800e6aa <_dtoa_r+0x8ea>
 800e548:	9a08      	ldr	r2, [sp, #32]
 800e54a:	4641      	mov	r1, r8
 800e54c:	4648      	mov	r0, r9
 800e54e:	f000 fcb3 	bl	800eeb8 <__pow5mult>
 800e552:	9002      	str	r0, [sp, #8]
 800e554:	2101      	movs	r1, #1
 800e556:	4648      	mov	r0, r9
 800e558:	f000 fbf6 	bl	800ed48 <__i2b>
 800e55c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e55e:	4604      	mov	r4, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	f000 81d8 	beq.w	800e916 <_dtoa_r+0xb56>
 800e566:	461a      	mov	r2, r3
 800e568:	4601      	mov	r1, r0
 800e56a:	4648      	mov	r0, r9
 800e56c:	f000 fca4 	bl	800eeb8 <__pow5mult>
 800e570:	9b07      	ldr	r3, [sp, #28]
 800e572:	2b01      	cmp	r3, #1
 800e574:	4604      	mov	r4, r0
 800e576:	f300 809f 	bgt.w	800e6b8 <_dtoa_r+0x8f8>
 800e57a:	9b04      	ldr	r3, [sp, #16]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f040 8097 	bne.w	800e6b0 <_dtoa_r+0x8f0>
 800e582:	9b05      	ldr	r3, [sp, #20]
 800e584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f040 8093 	bne.w	800e6b4 <_dtoa_r+0x8f4>
 800e58e:	9b05      	ldr	r3, [sp, #20]
 800e590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e594:	0d1b      	lsrs	r3, r3, #20
 800e596:	051b      	lsls	r3, r3, #20
 800e598:	b133      	cbz	r3, 800e5a8 <_dtoa_r+0x7e8>
 800e59a:	9b00      	ldr	r3, [sp, #0]
 800e59c:	3301      	adds	r3, #1
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	9b06      	ldr	r3, [sp, #24]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	9306      	str	r3, [sp, #24]
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	9308      	str	r3, [sp, #32]
 800e5aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 81b8 	beq.w	800e922 <_dtoa_r+0xb62>
 800e5b2:	6923      	ldr	r3, [r4, #16]
 800e5b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e5b8:	6918      	ldr	r0, [r3, #16]
 800e5ba:	f000 fb79 	bl	800ecb0 <__hi0bits>
 800e5be:	f1c0 0020 	rsb	r0, r0, #32
 800e5c2:	9b06      	ldr	r3, [sp, #24]
 800e5c4:	4418      	add	r0, r3
 800e5c6:	f010 001f 	ands.w	r0, r0, #31
 800e5ca:	f000 8082 	beq.w	800e6d2 <_dtoa_r+0x912>
 800e5ce:	f1c0 0320 	rsb	r3, r0, #32
 800e5d2:	2b04      	cmp	r3, #4
 800e5d4:	dd73      	ble.n	800e6be <_dtoa_r+0x8fe>
 800e5d6:	9b00      	ldr	r3, [sp, #0]
 800e5d8:	f1c0 001c 	rsb	r0, r0, #28
 800e5dc:	4403      	add	r3, r0
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	9b06      	ldr	r3, [sp, #24]
 800e5e2:	4403      	add	r3, r0
 800e5e4:	4406      	add	r6, r0
 800e5e6:	9306      	str	r3, [sp, #24]
 800e5e8:	9b00      	ldr	r3, [sp, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	dd05      	ble.n	800e5fa <_dtoa_r+0x83a>
 800e5ee:	9902      	ldr	r1, [sp, #8]
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4648      	mov	r0, r9
 800e5f4:	f000 fcba 	bl	800ef6c <__lshift>
 800e5f8:	9002      	str	r0, [sp, #8]
 800e5fa:	9b06      	ldr	r3, [sp, #24]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	dd05      	ble.n	800e60c <_dtoa_r+0x84c>
 800e600:	4621      	mov	r1, r4
 800e602:	461a      	mov	r2, r3
 800e604:	4648      	mov	r0, r9
 800e606:	f000 fcb1 	bl	800ef6c <__lshift>
 800e60a:	4604      	mov	r4, r0
 800e60c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d061      	beq.n	800e6d6 <_dtoa_r+0x916>
 800e612:	9802      	ldr	r0, [sp, #8]
 800e614:	4621      	mov	r1, r4
 800e616:	f000 fd15 	bl	800f044 <__mcmp>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	da5b      	bge.n	800e6d6 <_dtoa_r+0x916>
 800e61e:	2300      	movs	r3, #0
 800e620:	9902      	ldr	r1, [sp, #8]
 800e622:	220a      	movs	r2, #10
 800e624:	4648      	mov	r0, r9
 800e626:	f000 fafd 	bl	800ec24 <__multadd>
 800e62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e62c:	9002      	str	r0, [sp, #8]
 800e62e:	f107 38ff 	add.w	r8, r7, #4294967295
 800e632:	2b00      	cmp	r3, #0
 800e634:	f000 8177 	beq.w	800e926 <_dtoa_r+0xb66>
 800e638:	4629      	mov	r1, r5
 800e63a:	2300      	movs	r3, #0
 800e63c:	220a      	movs	r2, #10
 800e63e:	4648      	mov	r0, r9
 800e640:	f000 faf0 	bl	800ec24 <__multadd>
 800e644:	f1bb 0f00 	cmp.w	fp, #0
 800e648:	4605      	mov	r5, r0
 800e64a:	dc6f      	bgt.n	800e72c <_dtoa_r+0x96c>
 800e64c:	9b07      	ldr	r3, [sp, #28]
 800e64e:	2b02      	cmp	r3, #2
 800e650:	dc49      	bgt.n	800e6e6 <_dtoa_r+0x926>
 800e652:	e06b      	b.n	800e72c <_dtoa_r+0x96c>
 800e654:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e656:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e65a:	e73c      	b.n	800e4d6 <_dtoa_r+0x716>
 800e65c:	3fe00000 	.word	0x3fe00000
 800e660:	40240000 	.word	0x40240000
 800e664:	9b03      	ldr	r3, [sp, #12]
 800e666:	1e5c      	subs	r4, r3, #1
 800e668:	9b08      	ldr	r3, [sp, #32]
 800e66a:	42a3      	cmp	r3, r4
 800e66c:	db09      	blt.n	800e682 <_dtoa_r+0x8c2>
 800e66e:	1b1c      	subs	r4, r3, r4
 800e670:	9b03      	ldr	r3, [sp, #12]
 800e672:	2b00      	cmp	r3, #0
 800e674:	f6bf af30 	bge.w	800e4d8 <_dtoa_r+0x718>
 800e678:	9b00      	ldr	r3, [sp, #0]
 800e67a:	9a03      	ldr	r2, [sp, #12]
 800e67c:	1a9e      	subs	r6, r3, r2
 800e67e:	2300      	movs	r3, #0
 800e680:	e72b      	b.n	800e4da <_dtoa_r+0x71a>
 800e682:	9b08      	ldr	r3, [sp, #32]
 800e684:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e686:	9408      	str	r4, [sp, #32]
 800e688:	1ae3      	subs	r3, r4, r3
 800e68a:	441a      	add	r2, r3
 800e68c:	9e00      	ldr	r6, [sp, #0]
 800e68e:	9b03      	ldr	r3, [sp, #12]
 800e690:	920d      	str	r2, [sp, #52]	@ 0x34
 800e692:	2400      	movs	r4, #0
 800e694:	e721      	b.n	800e4da <_dtoa_r+0x71a>
 800e696:	9c08      	ldr	r4, [sp, #32]
 800e698:	9e00      	ldr	r6, [sp, #0]
 800e69a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e69c:	e728      	b.n	800e4f0 <_dtoa_r+0x730>
 800e69e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e6a2:	e751      	b.n	800e548 <_dtoa_r+0x788>
 800e6a4:	9a08      	ldr	r2, [sp, #32]
 800e6a6:	9902      	ldr	r1, [sp, #8]
 800e6a8:	e750      	b.n	800e54c <_dtoa_r+0x78c>
 800e6aa:	f8cd 8008 	str.w	r8, [sp, #8]
 800e6ae:	e751      	b.n	800e554 <_dtoa_r+0x794>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	e779      	b.n	800e5a8 <_dtoa_r+0x7e8>
 800e6b4:	9b04      	ldr	r3, [sp, #16]
 800e6b6:	e777      	b.n	800e5a8 <_dtoa_r+0x7e8>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	9308      	str	r3, [sp, #32]
 800e6bc:	e779      	b.n	800e5b2 <_dtoa_r+0x7f2>
 800e6be:	d093      	beq.n	800e5e8 <_dtoa_r+0x828>
 800e6c0:	9a00      	ldr	r2, [sp, #0]
 800e6c2:	331c      	adds	r3, #28
 800e6c4:	441a      	add	r2, r3
 800e6c6:	9200      	str	r2, [sp, #0]
 800e6c8:	9a06      	ldr	r2, [sp, #24]
 800e6ca:	441a      	add	r2, r3
 800e6cc:	441e      	add	r6, r3
 800e6ce:	9206      	str	r2, [sp, #24]
 800e6d0:	e78a      	b.n	800e5e8 <_dtoa_r+0x828>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	e7f4      	b.n	800e6c0 <_dtoa_r+0x900>
 800e6d6:	9b03      	ldr	r3, [sp, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	46b8      	mov	r8, r7
 800e6dc:	dc20      	bgt.n	800e720 <_dtoa_r+0x960>
 800e6de:	469b      	mov	fp, r3
 800e6e0:	9b07      	ldr	r3, [sp, #28]
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	dd1e      	ble.n	800e724 <_dtoa_r+0x964>
 800e6e6:	f1bb 0f00 	cmp.w	fp, #0
 800e6ea:	f47f adb1 	bne.w	800e250 <_dtoa_r+0x490>
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	465b      	mov	r3, fp
 800e6f2:	2205      	movs	r2, #5
 800e6f4:	4648      	mov	r0, r9
 800e6f6:	f000 fa95 	bl	800ec24 <__multadd>
 800e6fa:	4601      	mov	r1, r0
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	9802      	ldr	r0, [sp, #8]
 800e700:	f000 fca0 	bl	800f044 <__mcmp>
 800e704:	2800      	cmp	r0, #0
 800e706:	f77f ada3 	ble.w	800e250 <_dtoa_r+0x490>
 800e70a:	4656      	mov	r6, sl
 800e70c:	2331      	movs	r3, #49	@ 0x31
 800e70e:	f806 3b01 	strb.w	r3, [r6], #1
 800e712:	f108 0801 	add.w	r8, r8, #1
 800e716:	e59f      	b.n	800e258 <_dtoa_r+0x498>
 800e718:	9c03      	ldr	r4, [sp, #12]
 800e71a:	46b8      	mov	r8, r7
 800e71c:	4625      	mov	r5, r4
 800e71e:	e7f4      	b.n	800e70a <_dtoa_r+0x94a>
 800e720:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e726:	2b00      	cmp	r3, #0
 800e728:	f000 8101 	beq.w	800e92e <_dtoa_r+0xb6e>
 800e72c:	2e00      	cmp	r6, #0
 800e72e:	dd05      	ble.n	800e73c <_dtoa_r+0x97c>
 800e730:	4629      	mov	r1, r5
 800e732:	4632      	mov	r2, r6
 800e734:	4648      	mov	r0, r9
 800e736:	f000 fc19 	bl	800ef6c <__lshift>
 800e73a:	4605      	mov	r5, r0
 800e73c:	9b08      	ldr	r3, [sp, #32]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d05c      	beq.n	800e7fc <_dtoa_r+0xa3c>
 800e742:	6869      	ldr	r1, [r5, #4]
 800e744:	4648      	mov	r0, r9
 800e746:	f000 fa0b 	bl	800eb60 <_Balloc>
 800e74a:	4606      	mov	r6, r0
 800e74c:	b928      	cbnz	r0, 800e75a <_dtoa_r+0x99a>
 800e74e:	4b82      	ldr	r3, [pc, #520]	@ (800e958 <_dtoa_r+0xb98>)
 800e750:	4602      	mov	r2, r0
 800e752:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e756:	f7ff bb4a 	b.w	800ddee <_dtoa_r+0x2e>
 800e75a:	692a      	ldr	r2, [r5, #16]
 800e75c:	3202      	adds	r2, #2
 800e75e:	0092      	lsls	r2, r2, #2
 800e760:	f105 010c 	add.w	r1, r5, #12
 800e764:	300c      	adds	r0, #12
 800e766:	f7ff fa94 	bl	800dc92 <memcpy>
 800e76a:	2201      	movs	r2, #1
 800e76c:	4631      	mov	r1, r6
 800e76e:	4648      	mov	r0, r9
 800e770:	f000 fbfc 	bl	800ef6c <__lshift>
 800e774:	f10a 0301 	add.w	r3, sl, #1
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	eb0a 030b 	add.w	r3, sl, fp
 800e77e:	9308      	str	r3, [sp, #32]
 800e780:	9b04      	ldr	r3, [sp, #16]
 800e782:	f003 0301 	and.w	r3, r3, #1
 800e786:	462f      	mov	r7, r5
 800e788:	9306      	str	r3, [sp, #24]
 800e78a:	4605      	mov	r5, r0
 800e78c:	9b00      	ldr	r3, [sp, #0]
 800e78e:	9802      	ldr	r0, [sp, #8]
 800e790:	4621      	mov	r1, r4
 800e792:	f103 3bff 	add.w	fp, r3, #4294967295
 800e796:	f7ff fa8a 	bl	800dcae <quorem>
 800e79a:	4603      	mov	r3, r0
 800e79c:	3330      	adds	r3, #48	@ 0x30
 800e79e:	9003      	str	r0, [sp, #12]
 800e7a0:	4639      	mov	r1, r7
 800e7a2:	9802      	ldr	r0, [sp, #8]
 800e7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7a6:	f000 fc4d 	bl	800f044 <__mcmp>
 800e7aa:	462a      	mov	r2, r5
 800e7ac:	9004      	str	r0, [sp, #16]
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	4648      	mov	r0, r9
 800e7b2:	f000 fc63 	bl	800f07c <__mdiff>
 800e7b6:	68c2      	ldr	r2, [r0, #12]
 800e7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	bb02      	cbnz	r2, 800e800 <_dtoa_r+0xa40>
 800e7be:	4601      	mov	r1, r0
 800e7c0:	9802      	ldr	r0, [sp, #8]
 800e7c2:	f000 fc3f 	bl	800f044 <__mcmp>
 800e7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	4631      	mov	r1, r6
 800e7cc:	4648      	mov	r0, r9
 800e7ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800e7d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7d2:	f000 fa05 	bl	800ebe0 <_Bfree>
 800e7d6:	9b07      	ldr	r3, [sp, #28]
 800e7d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e7da:	9e00      	ldr	r6, [sp, #0]
 800e7dc:	ea42 0103 	orr.w	r1, r2, r3
 800e7e0:	9b06      	ldr	r3, [sp, #24]
 800e7e2:	4319      	orrs	r1, r3
 800e7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e6:	d10d      	bne.n	800e804 <_dtoa_r+0xa44>
 800e7e8:	2b39      	cmp	r3, #57	@ 0x39
 800e7ea:	d027      	beq.n	800e83c <_dtoa_r+0xa7c>
 800e7ec:	9a04      	ldr	r2, [sp, #16]
 800e7ee:	2a00      	cmp	r2, #0
 800e7f0:	dd01      	ble.n	800e7f6 <_dtoa_r+0xa36>
 800e7f2:	9b03      	ldr	r3, [sp, #12]
 800e7f4:	3331      	adds	r3, #49	@ 0x31
 800e7f6:	f88b 3000 	strb.w	r3, [fp]
 800e7fa:	e52e      	b.n	800e25a <_dtoa_r+0x49a>
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	e7b9      	b.n	800e774 <_dtoa_r+0x9b4>
 800e800:	2201      	movs	r2, #1
 800e802:	e7e2      	b.n	800e7ca <_dtoa_r+0xa0a>
 800e804:	9904      	ldr	r1, [sp, #16]
 800e806:	2900      	cmp	r1, #0
 800e808:	db04      	blt.n	800e814 <_dtoa_r+0xa54>
 800e80a:	9807      	ldr	r0, [sp, #28]
 800e80c:	4301      	orrs	r1, r0
 800e80e:	9806      	ldr	r0, [sp, #24]
 800e810:	4301      	orrs	r1, r0
 800e812:	d120      	bne.n	800e856 <_dtoa_r+0xa96>
 800e814:	2a00      	cmp	r2, #0
 800e816:	ddee      	ble.n	800e7f6 <_dtoa_r+0xa36>
 800e818:	9902      	ldr	r1, [sp, #8]
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	2201      	movs	r2, #1
 800e81e:	4648      	mov	r0, r9
 800e820:	f000 fba4 	bl	800ef6c <__lshift>
 800e824:	4621      	mov	r1, r4
 800e826:	9002      	str	r0, [sp, #8]
 800e828:	f000 fc0c 	bl	800f044 <__mcmp>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	9b00      	ldr	r3, [sp, #0]
 800e830:	dc02      	bgt.n	800e838 <_dtoa_r+0xa78>
 800e832:	d1e0      	bne.n	800e7f6 <_dtoa_r+0xa36>
 800e834:	07da      	lsls	r2, r3, #31
 800e836:	d5de      	bpl.n	800e7f6 <_dtoa_r+0xa36>
 800e838:	2b39      	cmp	r3, #57	@ 0x39
 800e83a:	d1da      	bne.n	800e7f2 <_dtoa_r+0xa32>
 800e83c:	2339      	movs	r3, #57	@ 0x39
 800e83e:	f88b 3000 	strb.w	r3, [fp]
 800e842:	4633      	mov	r3, r6
 800e844:	461e      	mov	r6, r3
 800e846:	3b01      	subs	r3, #1
 800e848:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e84c:	2a39      	cmp	r2, #57	@ 0x39
 800e84e:	d04e      	beq.n	800e8ee <_dtoa_r+0xb2e>
 800e850:	3201      	adds	r2, #1
 800e852:	701a      	strb	r2, [r3, #0]
 800e854:	e501      	b.n	800e25a <_dtoa_r+0x49a>
 800e856:	2a00      	cmp	r2, #0
 800e858:	dd03      	ble.n	800e862 <_dtoa_r+0xaa2>
 800e85a:	2b39      	cmp	r3, #57	@ 0x39
 800e85c:	d0ee      	beq.n	800e83c <_dtoa_r+0xa7c>
 800e85e:	3301      	adds	r3, #1
 800e860:	e7c9      	b.n	800e7f6 <_dtoa_r+0xa36>
 800e862:	9a00      	ldr	r2, [sp, #0]
 800e864:	9908      	ldr	r1, [sp, #32]
 800e866:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e86a:	428a      	cmp	r2, r1
 800e86c:	d028      	beq.n	800e8c0 <_dtoa_r+0xb00>
 800e86e:	9902      	ldr	r1, [sp, #8]
 800e870:	2300      	movs	r3, #0
 800e872:	220a      	movs	r2, #10
 800e874:	4648      	mov	r0, r9
 800e876:	f000 f9d5 	bl	800ec24 <__multadd>
 800e87a:	42af      	cmp	r7, r5
 800e87c:	9002      	str	r0, [sp, #8]
 800e87e:	f04f 0300 	mov.w	r3, #0
 800e882:	f04f 020a 	mov.w	r2, #10
 800e886:	4639      	mov	r1, r7
 800e888:	4648      	mov	r0, r9
 800e88a:	d107      	bne.n	800e89c <_dtoa_r+0xadc>
 800e88c:	f000 f9ca 	bl	800ec24 <__multadd>
 800e890:	4607      	mov	r7, r0
 800e892:	4605      	mov	r5, r0
 800e894:	9b00      	ldr	r3, [sp, #0]
 800e896:	3301      	adds	r3, #1
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	e777      	b.n	800e78c <_dtoa_r+0x9cc>
 800e89c:	f000 f9c2 	bl	800ec24 <__multadd>
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	4607      	mov	r7, r0
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	220a      	movs	r2, #10
 800e8a8:	4648      	mov	r0, r9
 800e8aa:	f000 f9bb 	bl	800ec24 <__multadd>
 800e8ae:	4605      	mov	r5, r0
 800e8b0:	e7f0      	b.n	800e894 <_dtoa_r+0xad4>
 800e8b2:	f1bb 0f00 	cmp.w	fp, #0
 800e8b6:	bfcc      	ite	gt
 800e8b8:	465e      	movgt	r6, fp
 800e8ba:	2601      	movle	r6, #1
 800e8bc:	4456      	add	r6, sl
 800e8be:	2700      	movs	r7, #0
 800e8c0:	9902      	ldr	r1, [sp, #8]
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	4648      	mov	r0, r9
 800e8c8:	f000 fb50 	bl	800ef6c <__lshift>
 800e8cc:	4621      	mov	r1, r4
 800e8ce:	9002      	str	r0, [sp, #8]
 800e8d0:	f000 fbb8 	bl	800f044 <__mcmp>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	dcb4      	bgt.n	800e842 <_dtoa_r+0xa82>
 800e8d8:	d102      	bne.n	800e8e0 <_dtoa_r+0xb20>
 800e8da:	9b00      	ldr	r3, [sp, #0]
 800e8dc:	07db      	lsls	r3, r3, #31
 800e8de:	d4b0      	bmi.n	800e842 <_dtoa_r+0xa82>
 800e8e0:	4633      	mov	r3, r6
 800e8e2:	461e      	mov	r6, r3
 800e8e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e8e8:	2a30      	cmp	r2, #48	@ 0x30
 800e8ea:	d0fa      	beq.n	800e8e2 <_dtoa_r+0xb22>
 800e8ec:	e4b5      	b.n	800e25a <_dtoa_r+0x49a>
 800e8ee:	459a      	cmp	sl, r3
 800e8f0:	d1a8      	bne.n	800e844 <_dtoa_r+0xa84>
 800e8f2:	2331      	movs	r3, #49	@ 0x31
 800e8f4:	f108 0801 	add.w	r8, r8, #1
 800e8f8:	f88a 3000 	strb.w	r3, [sl]
 800e8fc:	e4ad      	b.n	800e25a <_dtoa_r+0x49a>
 800e8fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e900:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e95c <_dtoa_r+0xb9c>
 800e904:	b11b      	cbz	r3, 800e90e <_dtoa_r+0xb4e>
 800e906:	f10a 0308 	add.w	r3, sl, #8
 800e90a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e90c:	6013      	str	r3, [r2, #0]
 800e90e:	4650      	mov	r0, sl
 800e910:	b017      	add	sp, #92	@ 0x5c
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e916:	9b07      	ldr	r3, [sp, #28]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	f77f ae2e 	ble.w	800e57a <_dtoa_r+0x7ba>
 800e91e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e920:	9308      	str	r3, [sp, #32]
 800e922:	2001      	movs	r0, #1
 800e924:	e64d      	b.n	800e5c2 <_dtoa_r+0x802>
 800e926:	f1bb 0f00 	cmp.w	fp, #0
 800e92a:	f77f aed9 	ble.w	800e6e0 <_dtoa_r+0x920>
 800e92e:	4656      	mov	r6, sl
 800e930:	9802      	ldr	r0, [sp, #8]
 800e932:	4621      	mov	r1, r4
 800e934:	f7ff f9bb 	bl	800dcae <quorem>
 800e938:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e93c:	f806 3b01 	strb.w	r3, [r6], #1
 800e940:	eba6 020a 	sub.w	r2, r6, sl
 800e944:	4593      	cmp	fp, r2
 800e946:	ddb4      	ble.n	800e8b2 <_dtoa_r+0xaf2>
 800e948:	9902      	ldr	r1, [sp, #8]
 800e94a:	2300      	movs	r3, #0
 800e94c:	220a      	movs	r2, #10
 800e94e:	4648      	mov	r0, r9
 800e950:	f000 f968 	bl	800ec24 <__multadd>
 800e954:	9002      	str	r0, [sp, #8]
 800e956:	e7eb      	b.n	800e930 <_dtoa_r+0xb70>
 800e958:	0801015c 	.word	0x0801015c
 800e95c:	080100e0 	.word	0x080100e0

0800e960 <_free_r>:
 800e960:	b538      	push	{r3, r4, r5, lr}
 800e962:	4605      	mov	r5, r0
 800e964:	2900      	cmp	r1, #0
 800e966:	d041      	beq.n	800e9ec <_free_r+0x8c>
 800e968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e96c:	1f0c      	subs	r4, r1, #4
 800e96e:	2b00      	cmp	r3, #0
 800e970:	bfb8      	it	lt
 800e972:	18e4      	addlt	r4, r4, r3
 800e974:	f000 f8e8 	bl	800eb48 <__malloc_lock>
 800e978:	4a1d      	ldr	r2, [pc, #116]	@ (800e9f0 <_free_r+0x90>)
 800e97a:	6813      	ldr	r3, [r2, #0]
 800e97c:	b933      	cbnz	r3, 800e98c <_free_r+0x2c>
 800e97e:	6063      	str	r3, [r4, #4]
 800e980:	6014      	str	r4, [r2, #0]
 800e982:	4628      	mov	r0, r5
 800e984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e988:	f000 b8e4 	b.w	800eb54 <__malloc_unlock>
 800e98c:	42a3      	cmp	r3, r4
 800e98e:	d908      	bls.n	800e9a2 <_free_r+0x42>
 800e990:	6820      	ldr	r0, [r4, #0]
 800e992:	1821      	adds	r1, r4, r0
 800e994:	428b      	cmp	r3, r1
 800e996:	bf01      	itttt	eq
 800e998:	6819      	ldreq	r1, [r3, #0]
 800e99a:	685b      	ldreq	r3, [r3, #4]
 800e99c:	1809      	addeq	r1, r1, r0
 800e99e:	6021      	streq	r1, [r4, #0]
 800e9a0:	e7ed      	b.n	800e97e <_free_r+0x1e>
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	b10b      	cbz	r3, 800e9ac <_free_r+0x4c>
 800e9a8:	42a3      	cmp	r3, r4
 800e9aa:	d9fa      	bls.n	800e9a2 <_free_r+0x42>
 800e9ac:	6811      	ldr	r1, [r2, #0]
 800e9ae:	1850      	adds	r0, r2, r1
 800e9b0:	42a0      	cmp	r0, r4
 800e9b2:	d10b      	bne.n	800e9cc <_free_r+0x6c>
 800e9b4:	6820      	ldr	r0, [r4, #0]
 800e9b6:	4401      	add	r1, r0
 800e9b8:	1850      	adds	r0, r2, r1
 800e9ba:	4283      	cmp	r3, r0
 800e9bc:	6011      	str	r1, [r2, #0]
 800e9be:	d1e0      	bne.n	800e982 <_free_r+0x22>
 800e9c0:	6818      	ldr	r0, [r3, #0]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	6053      	str	r3, [r2, #4]
 800e9c6:	4408      	add	r0, r1
 800e9c8:	6010      	str	r0, [r2, #0]
 800e9ca:	e7da      	b.n	800e982 <_free_r+0x22>
 800e9cc:	d902      	bls.n	800e9d4 <_free_r+0x74>
 800e9ce:	230c      	movs	r3, #12
 800e9d0:	602b      	str	r3, [r5, #0]
 800e9d2:	e7d6      	b.n	800e982 <_free_r+0x22>
 800e9d4:	6820      	ldr	r0, [r4, #0]
 800e9d6:	1821      	adds	r1, r4, r0
 800e9d8:	428b      	cmp	r3, r1
 800e9da:	bf04      	itt	eq
 800e9dc:	6819      	ldreq	r1, [r3, #0]
 800e9de:	685b      	ldreq	r3, [r3, #4]
 800e9e0:	6063      	str	r3, [r4, #4]
 800e9e2:	bf04      	itt	eq
 800e9e4:	1809      	addeq	r1, r1, r0
 800e9e6:	6021      	streq	r1, [r4, #0]
 800e9e8:	6054      	str	r4, [r2, #4]
 800e9ea:	e7ca      	b.n	800e982 <_free_r+0x22>
 800e9ec:	bd38      	pop	{r3, r4, r5, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20040a4c 	.word	0x20040a4c

0800e9f4 <malloc>:
 800e9f4:	4b02      	ldr	r3, [pc, #8]	@ (800ea00 <malloc+0xc>)
 800e9f6:	4601      	mov	r1, r0
 800e9f8:	6818      	ldr	r0, [r3, #0]
 800e9fa:	f000 b825 	b.w	800ea48 <_malloc_r>
 800e9fe:	bf00      	nop
 800ea00:	200402d8 	.word	0x200402d8

0800ea04 <sbrk_aligned>:
 800ea04:	b570      	push	{r4, r5, r6, lr}
 800ea06:	4e0f      	ldr	r6, [pc, #60]	@ (800ea44 <sbrk_aligned+0x40>)
 800ea08:	460c      	mov	r4, r1
 800ea0a:	6831      	ldr	r1, [r6, #0]
 800ea0c:	4605      	mov	r5, r0
 800ea0e:	b911      	cbnz	r1, 800ea16 <sbrk_aligned+0x12>
 800ea10:	f000 fe92 	bl	800f738 <_sbrk_r>
 800ea14:	6030      	str	r0, [r6, #0]
 800ea16:	4621      	mov	r1, r4
 800ea18:	4628      	mov	r0, r5
 800ea1a:	f000 fe8d 	bl	800f738 <_sbrk_r>
 800ea1e:	1c43      	adds	r3, r0, #1
 800ea20:	d103      	bne.n	800ea2a <sbrk_aligned+0x26>
 800ea22:	f04f 34ff 	mov.w	r4, #4294967295
 800ea26:	4620      	mov	r0, r4
 800ea28:	bd70      	pop	{r4, r5, r6, pc}
 800ea2a:	1cc4      	adds	r4, r0, #3
 800ea2c:	f024 0403 	bic.w	r4, r4, #3
 800ea30:	42a0      	cmp	r0, r4
 800ea32:	d0f8      	beq.n	800ea26 <sbrk_aligned+0x22>
 800ea34:	1a21      	subs	r1, r4, r0
 800ea36:	4628      	mov	r0, r5
 800ea38:	f000 fe7e 	bl	800f738 <_sbrk_r>
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	d1f2      	bne.n	800ea26 <sbrk_aligned+0x22>
 800ea40:	e7ef      	b.n	800ea22 <sbrk_aligned+0x1e>
 800ea42:	bf00      	nop
 800ea44:	20040a48 	.word	0x20040a48

0800ea48 <_malloc_r>:
 800ea48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea4c:	1ccd      	adds	r5, r1, #3
 800ea4e:	f025 0503 	bic.w	r5, r5, #3
 800ea52:	3508      	adds	r5, #8
 800ea54:	2d0c      	cmp	r5, #12
 800ea56:	bf38      	it	cc
 800ea58:	250c      	movcc	r5, #12
 800ea5a:	2d00      	cmp	r5, #0
 800ea5c:	4606      	mov	r6, r0
 800ea5e:	db01      	blt.n	800ea64 <_malloc_r+0x1c>
 800ea60:	42a9      	cmp	r1, r5
 800ea62:	d904      	bls.n	800ea6e <_malloc_r+0x26>
 800ea64:	230c      	movs	r3, #12
 800ea66:	6033      	str	r3, [r6, #0]
 800ea68:	2000      	movs	r0, #0
 800ea6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eb44 <_malloc_r+0xfc>
 800ea72:	f000 f869 	bl	800eb48 <__malloc_lock>
 800ea76:	f8d8 3000 	ldr.w	r3, [r8]
 800ea7a:	461c      	mov	r4, r3
 800ea7c:	bb44      	cbnz	r4, 800ead0 <_malloc_r+0x88>
 800ea7e:	4629      	mov	r1, r5
 800ea80:	4630      	mov	r0, r6
 800ea82:	f7ff ffbf 	bl	800ea04 <sbrk_aligned>
 800ea86:	1c43      	adds	r3, r0, #1
 800ea88:	4604      	mov	r4, r0
 800ea8a:	d158      	bne.n	800eb3e <_malloc_r+0xf6>
 800ea8c:	f8d8 4000 	ldr.w	r4, [r8]
 800ea90:	4627      	mov	r7, r4
 800ea92:	2f00      	cmp	r7, #0
 800ea94:	d143      	bne.n	800eb1e <_malloc_r+0xd6>
 800ea96:	2c00      	cmp	r4, #0
 800ea98:	d04b      	beq.n	800eb32 <_malloc_r+0xea>
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	4639      	mov	r1, r7
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	eb04 0903 	add.w	r9, r4, r3
 800eaa4:	f000 fe48 	bl	800f738 <_sbrk_r>
 800eaa8:	4581      	cmp	r9, r0
 800eaaa:	d142      	bne.n	800eb32 <_malloc_r+0xea>
 800eaac:	6821      	ldr	r1, [r4, #0]
 800eaae:	1a6d      	subs	r5, r5, r1
 800eab0:	4629      	mov	r1, r5
 800eab2:	4630      	mov	r0, r6
 800eab4:	f7ff ffa6 	bl	800ea04 <sbrk_aligned>
 800eab8:	3001      	adds	r0, #1
 800eaba:	d03a      	beq.n	800eb32 <_malloc_r+0xea>
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	442b      	add	r3, r5
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	f8d8 3000 	ldr.w	r3, [r8]
 800eac6:	685a      	ldr	r2, [r3, #4]
 800eac8:	bb62      	cbnz	r2, 800eb24 <_malloc_r+0xdc>
 800eaca:	f8c8 7000 	str.w	r7, [r8]
 800eace:	e00f      	b.n	800eaf0 <_malloc_r+0xa8>
 800ead0:	6822      	ldr	r2, [r4, #0]
 800ead2:	1b52      	subs	r2, r2, r5
 800ead4:	d420      	bmi.n	800eb18 <_malloc_r+0xd0>
 800ead6:	2a0b      	cmp	r2, #11
 800ead8:	d917      	bls.n	800eb0a <_malloc_r+0xc2>
 800eada:	1961      	adds	r1, r4, r5
 800eadc:	42a3      	cmp	r3, r4
 800eade:	6025      	str	r5, [r4, #0]
 800eae0:	bf18      	it	ne
 800eae2:	6059      	strne	r1, [r3, #4]
 800eae4:	6863      	ldr	r3, [r4, #4]
 800eae6:	bf08      	it	eq
 800eae8:	f8c8 1000 	streq.w	r1, [r8]
 800eaec:	5162      	str	r2, [r4, r5]
 800eaee:	604b      	str	r3, [r1, #4]
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f000 f82f 	bl	800eb54 <__malloc_unlock>
 800eaf6:	f104 000b 	add.w	r0, r4, #11
 800eafa:	1d23      	adds	r3, r4, #4
 800eafc:	f020 0007 	bic.w	r0, r0, #7
 800eb00:	1ac2      	subs	r2, r0, r3
 800eb02:	bf1c      	itt	ne
 800eb04:	1a1b      	subne	r3, r3, r0
 800eb06:	50a3      	strne	r3, [r4, r2]
 800eb08:	e7af      	b.n	800ea6a <_malloc_r+0x22>
 800eb0a:	6862      	ldr	r2, [r4, #4]
 800eb0c:	42a3      	cmp	r3, r4
 800eb0e:	bf0c      	ite	eq
 800eb10:	f8c8 2000 	streq.w	r2, [r8]
 800eb14:	605a      	strne	r2, [r3, #4]
 800eb16:	e7eb      	b.n	800eaf0 <_malloc_r+0xa8>
 800eb18:	4623      	mov	r3, r4
 800eb1a:	6864      	ldr	r4, [r4, #4]
 800eb1c:	e7ae      	b.n	800ea7c <_malloc_r+0x34>
 800eb1e:	463c      	mov	r4, r7
 800eb20:	687f      	ldr	r7, [r7, #4]
 800eb22:	e7b6      	b.n	800ea92 <_malloc_r+0x4a>
 800eb24:	461a      	mov	r2, r3
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	42a3      	cmp	r3, r4
 800eb2a:	d1fb      	bne.n	800eb24 <_malloc_r+0xdc>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	6053      	str	r3, [r2, #4]
 800eb30:	e7de      	b.n	800eaf0 <_malloc_r+0xa8>
 800eb32:	230c      	movs	r3, #12
 800eb34:	6033      	str	r3, [r6, #0]
 800eb36:	4630      	mov	r0, r6
 800eb38:	f000 f80c 	bl	800eb54 <__malloc_unlock>
 800eb3c:	e794      	b.n	800ea68 <_malloc_r+0x20>
 800eb3e:	6005      	str	r5, [r0, #0]
 800eb40:	e7d6      	b.n	800eaf0 <_malloc_r+0xa8>
 800eb42:	bf00      	nop
 800eb44:	20040a4c 	.word	0x20040a4c

0800eb48 <__malloc_lock>:
 800eb48:	4801      	ldr	r0, [pc, #4]	@ (800eb50 <__malloc_lock+0x8>)
 800eb4a:	f7ff b898 	b.w	800dc7e <__retarget_lock_acquire_recursive>
 800eb4e:	bf00      	nop
 800eb50:	20040a44 	.word	0x20040a44

0800eb54 <__malloc_unlock>:
 800eb54:	4801      	ldr	r0, [pc, #4]	@ (800eb5c <__malloc_unlock+0x8>)
 800eb56:	f7ff b893 	b.w	800dc80 <__retarget_lock_release_recursive>
 800eb5a:	bf00      	nop
 800eb5c:	20040a44 	.word	0x20040a44

0800eb60 <_Balloc>:
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	69c6      	ldr	r6, [r0, #28]
 800eb64:	4604      	mov	r4, r0
 800eb66:	460d      	mov	r5, r1
 800eb68:	b976      	cbnz	r6, 800eb88 <_Balloc+0x28>
 800eb6a:	2010      	movs	r0, #16
 800eb6c:	f7ff ff42 	bl	800e9f4 <malloc>
 800eb70:	4602      	mov	r2, r0
 800eb72:	61e0      	str	r0, [r4, #28]
 800eb74:	b920      	cbnz	r0, 800eb80 <_Balloc+0x20>
 800eb76:	4b18      	ldr	r3, [pc, #96]	@ (800ebd8 <_Balloc+0x78>)
 800eb78:	4818      	ldr	r0, [pc, #96]	@ (800ebdc <_Balloc+0x7c>)
 800eb7a:	216b      	movs	r1, #107	@ 0x6b
 800eb7c:	f000 fdec 	bl	800f758 <__assert_func>
 800eb80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb84:	6006      	str	r6, [r0, #0]
 800eb86:	60c6      	str	r6, [r0, #12]
 800eb88:	69e6      	ldr	r6, [r4, #28]
 800eb8a:	68f3      	ldr	r3, [r6, #12]
 800eb8c:	b183      	cbz	r3, 800ebb0 <_Balloc+0x50>
 800eb8e:	69e3      	ldr	r3, [r4, #28]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb96:	b9b8      	cbnz	r0, 800ebc8 <_Balloc+0x68>
 800eb98:	2101      	movs	r1, #1
 800eb9a:	fa01 f605 	lsl.w	r6, r1, r5
 800eb9e:	1d72      	adds	r2, r6, #5
 800eba0:	0092      	lsls	r2, r2, #2
 800eba2:	4620      	mov	r0, r4
 800eba4:	f000 fdf6 	bl	800f794 <_calloc_r>
 800eba8:	b160      	cbz	r0, 800ebc4 <_Balloc+0x64>
 800ebaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ebae:	e00e      	b.n	800ebce <_Balloc+0x6e>
 800ebb0:	2221      	movs	r2, #33	@ 0x21
 800ebb2:	2104      	movs	r1, #4
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f000 fded 	bl	800f794 <_calloc_r>
 800ebba:	69e3      	ldr	r3, [r4, #28]
 800ebbc:	60f0      	str	r0, [r6, #12]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d1e4      	bne.n	800eb8e <_Balloc+0x2e>
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	bd70      	pop	{r4, r5, r6, pc}
 800ebc8:	6802      	ldr	r2, [r0, #0]
 800ebca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ebce:	2300      	movs	r3, #0
 800ebd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ebd4:	e7f7      	b.n	800ebc6 <_Balloc+0x66>
 800ebd6:	bf00      	nop
 800ebd8:	080100ed 	.word	0x080100ed
 800ebdc:	0801016d 	.word	0x0801016d

0800ebe0 <_Bfree>:
 800ebe0:	b570      	push	{r4, r5, r6, lr}
 800ebe2:	69c6      	ldr	r6, [r0, #28]
 800ebe4:	4605      	mov	r5, r0
 800ebe6:	460c      	mov	r4, r1
 800ebe8:	b976      	cbnz	r6, 800ec08 <_Bfree+0x28>
 800ebea:	2010      	movs	r0, #16
 800ebec:	f7ff ff02 	bl	800e9f4 <malloc>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	61e8      	str	r0, [r5, #28]
 800ebf4:	b920      	cbnz	r0, 800ec00 <_Bfree+0x20>
 800ebf6:	4b09      	ldr	r3, [pc, #36]	@ (800ec1c <_Bfree+0x3c>)
 800ebf8:	4809      	ldr	r0, [pc, #36]	@ (800ec20 <_Bfree+0x40>)
 800ebfa:	218f      	movs	r1, #143	@ 0x8f
 800ebfc:	f000 fdac 	bl	800f758 <__assert_func>
 800ec00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec04:	6006      	str	r6, [r0, #0]
 800ec06:	60c6      	str	r6, [r0, #12]
 800ec08:	b13c      	cbz	r4, 800ec1a <_Bfree+0x3a>
 800ec0a:	69eb      	ldr	r3, [r5, #28]
 800ec0c:	6862      	ldr	r2, [r4, #4]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec14:	6021      	str	r1, [r4, #0]
 800ec16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec1a:	bd70      	pop	{r4, r5, r6, pc}
 800ec1c:	080100ed 	.word	0x080100ed
 800ec20:	0801016d 	.word	0x0801016d

0800ec24 <__multadd>:
 800ec24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec28:	690d      	ldr	r5, [r1, #16]
 800ec2a:	4607      	mov	r7, r0
 800ec2c:	460c      	mov	r4, r1
 800ec2e:	461e      	mov	r6, r3
 800ec30:	f101 0c14 	add.w	ip, r1, #20
 800ec34:	2000      	movs	r0, #0
 800ec36:	f8dc 3000 	ldr.w	r3, [ip]
 800ec3a:	b299      	uxth	r1, r3
 800ec3c:	fb02 6101 	mla	r1, r2, r1, r6
 800ec40:	0c1e      	lsrs	r6, r3, #16
 800ec42:	0c0b      	lsrs	r3, r1, #16
 800ec44:	fb02 3306 	mla	r3, r2, r6, r3
 800ec48:	b289      	uxth	r1, r1
 800ec4a:	3001      	adds	r0, #1
 800ec4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ec50:	4285      	cmp	r5, r0
 800ec52:	f84c 1b04 	str.w	r1, [ip], #4
 800ec56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ec5a:	dcec      	bgt.n	800ec36 <__multadd+0x12>
 800ec5c:	b30e      	cbz	r6, 800eca2 <__multadd+0x7e>
 800ec5e:	68a3      	ldr	r3, [r4, #8]
 800ec60:	42ab      	cmp	r3, r5
 800ec62:	dc19      	bgt.n	800ec98 <__multadd+0x74>
 800ec64:	6861      	ldr	r1, [r4, #4]
 800ec66:	4638      	mov	r0, r7
 800ec68:	3101      	adds	r1, #1
 800ec6a:	f7ff ff79 	bl	800eb60 <_Balloc>
 800ec6e:	4680      	mov	r8, r0
 800ec70:	b928      	cbnz	r0, 800ec7e <__multadd+0x5a>
 800ec72:	4602      	mov	r2, r0
 800ec74:	4b0c      	ldr	r3, [pc, #48]	@ (800eca8 <__multadd+0x84>)
 800ec76:	480d      	ldr	r0, [pc, #52]	@ (800ecac <__multadd+0x88>)
 800ec78:	21ba      	movs	r1, #186	@ 0xba
 800ec7a:	f000 fd6d 	bl	800f758 <__assert_func>
 800ec7e:	6922      	ldr	r2, [r4, #16]
 800ec80:	3202      	adds	r2, #2
 800ec82:	f104 010c 	add.w	r1, r4, #12
 800ec86:	0092      	lsls	r2, r2, #2
 800ec88:	300c      	adds	r0, #12
 800ec8a:	f7ff f802 	bl	800dc92 <memcpy>
 800ec8e:	4621      	mov	r1, r4
 800ec90:	4638      	mov	r0, r7
 800ec92:	f7ff ffa5 	bl	800ebe0 <_Bfree>
 800ec96:	4644      	mov	r4, r8
 800ec98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec9c:	3501      	adds	r5, #1
 800ec9e:	615e      	str	r6, [r3, #20]
 800eca0:	6125      	str	r5, [r4, #16]
 800eca2:	4620      	mov	r0, r4
 800eca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca8:	0801015c 	.word	0x0801015c
 800ecac:	0801016d 	.word	0x0801016d

0800ecb0 <__hi0bits>:
 800ecb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	bf36      	itet	cc
 800ecb8:	0403      	lslcc	r3, r0, #16
 800ecba:	2000      	movcs	r0, #0
 800ecbc:	2010      	movcc	r0, #16
 800ecbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ecc2:	bf3c      	itt	cc
 800ecc4:	021b      	lslcc	r3, r3, #8
 800ecc6:	3008      	addcc	r0, #8
 800ecc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eccc:	bf3c      	itt	cc
 800ecce:	011b      	lslcc	r3, r3, #4
 800ecd0:	3004      	addcc	r0, #4
 800ecd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecd6:	bf3c      	itt	cc
 800ecd8:	009b      	lslcc	r3, r3, #2
 800ecda:	3002      	addcc	r0, #2
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	db05      	blt.n	800ecec <__hi0bits+0x3c>
 800ece0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ece4:	f100 0001 	add.w	r0, r0, #1
 800ece8:	bf08      	it	eq
 800ecea:	2020      	moveq	r0, #32
 800ecec:	4770      	bx	lr

0800ecee <__lo0bits>:
 800ecee:	6803      	ldr	r3, [r0, #0]
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	f013 0007 	ands.w	r0, r3, #7
 800ecf6:	d00b      	beq.n	800ed10 <__lo0bits+0x22>
 800ecf8:	07d9      	lsls	r1, r3, #31
 800ecfa:	d421      	bmi.n	800ed40 <__lo0bits+0x52>
 800ecfc:	0798      	lsls	r0, r3, #30
 800ecfe:	bf49      	itett	mi
 800ed00:	085b      	lsrmi	r3, r3, #1
 800ed02:	089b      	lsrpl	r3, r3, #2
 800ed04:	2001      	movmi	r0, #1
 800ed06:	6013      	strmi	r3, [r2, #0]
 800ed08:	bf5c      	itt	pl
 800ed0a:	6013      	strpl	r3, [r2, #0]
 800ed0c:	2002      	movpl	r0, #2
 800ed0e:	4770      	bx	lr
 800ed10:	b299      	uxth	r1, r3
 800ed12:	b909      	cbnz	r1, 800ed18 <__lo0bits+0x2a>
 800ed14:	0c1b      	lsrs	r3, r3, #16
 800ed16:	2010      	movs	r0, #16
 800ed18:	b2d9      	uxtb	r1, r3
 800ed1a:	b909      	cbnz	r1, 800ed20 <__lo0bits+0x32>
 800ed1c:	3008      	adds	r0, #8
 800ed1e:	0a1b      	lsrs	r3, r3, #8
 800ed20:	0719      	lsls	r1, r3, #28
 800ed22:	bf04      	itt	eq
 800ed24:	091b      	lsreq	r3, r3, #4
 800ed26:	3004      	addeq	r0, #4
 800ed28:	0799      	lsls	r1, r3, #30
 800ed2a:	bf04      	itt	eq
 800ed2c:	089b      	lsreq	r3, r3, #2
 800ed2e:	3002      	addeq	r0, #2
 800ed30:	07d9      	lsls	r1, r3, #31
 800ed32:	d403      	bmi.n	800ed3c <__lo0bits+0x4e>
 800ed34:	085b      	lsrs	r3, r3, #1
 800ed36:	f100 0001 	add.w	r0, r0, #1
 800ed3a:	d003      	beq.n	800ed44 <__lo0bits+0x56>
 800ed3c:	6013      	str	r3, [r2, #0]
 800ed3e:	4770      	bx	lr
 800ed40:	2000      	movs	r0, #0
 800ed42:	4770      	bx	lr
 800ed44:	2020      	movs	r0, #32
 800ed46:	4770      	bx	lr

0800ed48 <__i2b>:
 800ed48:	b510      	push	{r4, lr}
 800ed4a:	460c      	mov	r4, r1
 800ed4c:	2101      	movs	r1, #1
 800ed4e:	f7ff ff07 	bl	800eb60 <_Balloc>
 800ed52:	4602      	mov	r2, r0
 800ed54:	b928      	cbnz	r0, 800ed62 <__i2b+0x1a>
 800ed56:	4b05      	ldr	r3, [pc, #20]	@ (800ed6c <__i2b+0x24>)
 800ed58:	4805      	ldr	r0, [pc, #20]	@ (800ed70 <__i2b+0x28>)
 800ed5a:	f240 1145 	movw	r1, #325	@ 0x145
 800ed5e:	f000 fcfb 	bl	800f758 <__assert_func>
 800ed62:	2301      	movs	r3, #1
 800ed64:	6144      	str	r4, [r0, #20]
 800ed66:	6103      	str	r3, [r0, #16]
 800ed68:	bd10      	pop	{r4, pc}
 800ed6a:	bf00      	nop
 800ed6c:	0801015c 	.word	0x0801015c
 800ed70:	0801016d 	.word	0x0801016d

0800ed74 <__multiply>:
 800ed74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed78:	4617      	mov	r7, r2
 800ed7a:	690a      	ldr	r2, [r1, #16]
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	bfa8      	it	ge
 800ed82:	463b      	movge	r3, r7
 800ed84:	4689      	mov	r9, r1
 800ed86:	bfa4      	itt	ge
 800ed88:	460f      	movge	r7, r1
 800ed8a:	4699      	movge	r9, r3
 800ed8c:	693d      	ldr	r5, [r7, #16]
 800ed8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	6879      	ldr	r1, [r7, #4]
 800ed96:	eb05 060a 	add.w	r6, r5, sl
 800ed9a:	42b3      	cmp	r3, r6
 800ed9c:	b085      	sub	sp, #20
 800ed9e:	bfb8      	it	lt
 800eda0:	3101      	addlt	r1, #1
 800eda2:	f7ff fedd 	bl	800eb60 <_Balloc>
 800eda6:	b930      	cbnz	r0, 800edb6 <__multiply+0x42>
 800eda8:	4602      	mov	r2, r0
 800edaa:	4b41      	ldr	r3, [pc, #260]	@ (800eeb0 <__multiply+0x13c>)
 800edac:	4841      	ldr	r0, [pc, #260]	@ (800eeb4 <__multiply+0x140>)
 800edae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800edb2:	f000 fcd1 	bl	800f758 <__assert_func>
 800edb6:	f100 0414 	add.w	r4, r0, #20
 800edba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800edbe:	4623      	mov	r3, r4
 800edc0:	2200      	movs	r2, #0
 800edc2:	4573      	cmp	r3, lr
 800edc4:	d320      	bcc.n	800ee08 <__multiply+0x94>
 800edc6:	f107 0814 	add.w	r8, r7, #20
 800edca:	f109 0114 	add.w	r1, r9, #20
 800edce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800edd2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800edd6:	9302      	str	r3, [sp, #8]
 800edd8:	1beb      	subs	r3, r5, r7
 800edda:	3b15      	subs	r3, #21
 800eddc:	f023 0303 	bic.w	r3, r3, #3
 800ede0:	3304      	adds	r3, #4
 800ede2:	3715      	adds	r7, #21
 800ede4:	42bd      	cmp	r5, r7
 800ede6:	bf38      	it	cc
 800ede8:	2304      	movcc	r3, #4
 800edea:	9301      	str	r3, [sp, #4]
 800edec:	9b02      	ldr	r3, [sp, #8]
 800edee:	9103      	str	r1, [sp, #12]
 800edf0:	428b      	cmp	r3, r1
 800edf2:	d80c      	bhi.n	800ee0e <__multiply+0x9a>
 800edf4:	2e00      	cmp	r6, #0
 800edf6:	dd03      	ble.n	800ee00 <__multiply+0x8c>
 800edf8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d055      	beq.n	800eeac <__multiply+0x138>
 800ee00:	6106      	str	r6, [r0, #16]
 800ee02:	b005      	add	sp, #20
 800ee04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee08:	f843 2b04 	str.w	r2, [r3], #4
 800ee0c:	e7d9      	b.n	800edc2 <__multiply+0x4e>
 800ee0e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ee12:	f1ba 0f00 	cmp.w	sl, #0
 800ee16:	d01f      	beq.n	800ee58 <__multiply+0xe4>
 800ee18:	46c4      	mov	ip, r8
 800ee1a:	46a1      	mov	r9, r4
 800ee1c:	2700      	movs	r7, #0
 800ee1e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ee22:	f8d9 3000 	ldr.w	r3, [r9]
 800ee26:	fa1f fb82 	uxth.w	fp, r2
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ee30:	443b      	add	r3, r7
 800ee32:	f8d9 7000 	ldr.w	r7, [r9]
 800ee36:	0c12      	lsrs	r2, r2, #16
 800ee38:	0c3f      	lsrs	r7, r7, #16
 800ee3a:	fb0a 7202 	mla	r2, sl, r2, r7
 800ee3e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee48:	4565      	cmp	r5, ip
 800ee4a:	f849 3b04 	str.w	r3, [r9], #4
 800ee4e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ee52:	d8e4      	bhi.n	800ee1e <__multiply+0xaa>
 800ee54:	9b01      	ldr	r3, [sp, #4]
 800ee56:	50e7      	str	r7, [r4, r3]
 800ee58:	9b03      	ldr	r3, [sp, #12]
 800ee5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ee5e:	3104      	adds	r1, #4
 800ee60:	f1b9 0f00 	cmp.w	r9, #0
 800ee64:	d020      	beq.n	800eea8 <__multiply+0x134>
 800ee66:	6823      	ldr	r3, [r4, #0]
 800ee68:	4647      	mov	r7, r8
 800ee6a:	46a4      	mov	ip, r4
 800ee6c:	f04f 0a00 	mov.w	sl, #0
 800ee70:	f8b7 b000 	ldrh.w	fp, [r7]
 800ee74:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ee78:	fb09 220b 	mla	r2, r9, fp, r2
 800ee7c:	4452      	add	r2, sl
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee84:	f84c 3b04 	str.w	r3, [ip], #4
 800ee88:	f857 3b04 	ldr.w	r3, [r7], #4
 800ee8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee90:	f8bc 3000 	ldrh.w	r3, [ip]
 800ee94:	fb09 330a 	mla	r3, r9, sl, r3
 800ee98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ee9c:	42bd      	cmp	r5, r7
 800ee9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eea2:	d8e5      	bhi.n	800ee70 <__multiply+0xfc>
 800eea4:	9a01      	ldr	r2, [sp, #4]
 800eea6:	50a3      	str	r3, [r4, r2]
 800eea8:	3404      	adds	r4, #4
 800eeaa:	e79f      	b.n	800edec <__multiply+0x78>
 800eeac:	3e01      	subs	r6, #1
 800eeae:	e7a1      	b.n	800edf4 <__multiply+0x80>
 800eeb0:	0801015c 	.word	0x0801015c
 800eeb4:	0801016d 	.word	0x0801016d

0800eeb8 <__pow5mult>:
 800eeb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eebc:	4615      	mov	r5, r2
 800eebe:	f012 0203 	ands.w	r2, r2, #3
 800eec2:	4607      	mov	r7, r0
 800eec4:	460e      	mov	r6, r1
 800eec6:	d007      	beq.n	800eed8 <__pow5mult+0x20>
 800eec8:	4c25      	ldr	r4, [pc, #148]	@ (800ef60 <__pow5mult+0xa8>)
 800eeca:	3a01      	subs	r2, #1
 800eecc:	2300      	movs	r3, #0
 800eece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eed2:	f7ff fea7 	bl	800ec24 <__multadd>
 800eed6:	4606      	mov	r6, r0
 800eed8:	10ad      	asrs	r5, r5, #2
 800eeda:	d03d      	beq.n	800ef58 <__pow5mult+0xa0>
 800eedc:	69fc      	ldr	r4, [r7, #28]
 800eede:	b97c      	cbnz	r4, 800ef00 <__pow5mult+0x48>
 800eee0:	2010      	movs	r0, #16
 800eee2:	f7ff fd87 	bl	800e9f4 <malloc>
 800eee6:	4602      	mov	r2, r0
 800eee8:	61f8      	str	r0, [r7, #28]
 800eeea:	b928      	cbnz	r0, 800eef8 <__pow5mult+0x40>
 800eeec:	4b1d      	ldr	r3, [pc, #116]	@ (800ef64 <__pow5mult+0xac>)
 800eeee:	481e      	ldr	r0, [pc, #120]	@ (800ef68 <__pow5mult+0xb0>)
 800eef0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800eef4:	f000 fc30 	bl	800f758 <__assert_func>
 800eef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eefc:	6004      	str	r4, [r0, #0]
 800eefe:	60c4      	str	r4, [r0, #12]
 800ef00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ef04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef08:	b94c      	cbnz	r4, 800ef1e <__pow5mult+0x66>
 800ef0a:	f240 2171 	movw	r1, #625	@ 0x271
 800ef0e:	4638      	mov	r0, r7
 800ef10:	f7ff ff1a 	bl	800ed48 <__i2b>
 800ef14:	2300      	movs	r3, #0
 800ef16:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	6003      	str	r3, [r0, #0]
 800ef1e:	f04f 0900 	mov.w	r9, #0
 800ef22:	07eb      	lsls	r3, r5, #31
 800ef24:	d50a      	bpl.n	800ef3c <__pow5mult+0x84>
 800ef26:	4631      	mov	r1, r6
 800ef28:	4622      	mov	r2, r4
 800ef2a:	4638      	mov	r0, r7
 800ef2c:	f7ff ff22 	bl	800ed74 <__multiply>
 800ef30:	4631      	mov	r1, r6
 800ef32:	4680      	mov	r8, r0
 800ef34:	4638      	mov	r0, r7
 800ef36:	f7ff fe53 	bl	800ebe0 <_Bfree>
 800ef3a:	4646      	mov	r6, r8
 800ef3c:	106d      	asrs	r5, r5, #1
 800ef3e:	d00b      	beq.n	800ef58 <__pow5mult+0xa0>
 800ef40:	6820      	ldr	r0, [r4, #0]
 800ef42:	b938      	cbnz	r0, 800ef54 <__pow5mult+0x9c>
 800ef44:	4622      	mov	r2, r4
 800ef46:	4621      	mov	r1, r4
 800ef48:	4638      	mov	r0, r7
 800ef4a:	f7ff ff13 	bl	800ed74 <__multiply>
 800ef4e:	6020      	str	r0, [r4, #0]
 800ef50:	f8c0 9000 	str.w	r9, [r0]
 800ef54:	4604      	mov	r4, r0
 800ef56:	e7e4      	b.n	800ef22 <__pow5mult+0x6a>
 800ef58:	4630      	mov	r0, r6
 800ef5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef5e:	bf00      	nop
 800ef60:	08010220 	.word	0x08010220
 800ef64:	080100ed 	.word	0x080100ed
 800ef68:	0801016d 	.word	0x0801016d

0800ef6c <__lshift>:
 800ef6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef70:	460c      	mov	r4, r1
 800ef72:	6849      	ldr	r1, [r1, #4]
 800ef74:	6923      	ldr	r3, [r4, #16]
 800ef76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef7a:	68a3      	ldr	r3, [r4, #8]
 800ef7c:	4607      	mov	r7, r0
 800ef7e:	4691      	mov	r9, r2
 800ef80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef84:	f108 0601 	add.w	r6, r8, #1
 800ef88:	42b3      	cmp	r3, r6
 800ef8a:	db0b      	blt.n	800efa4 <__lshift+0x38>
 800ef8c:	4638      	mov	r0, r7
 800ef8e:	f7ff fde7 	bl	800eb60 <_Balloc>
 800ef92:	4605      	mov	r5, r0
 800ef94:	b948      	cbnz	r0, 800efaa <__lshift+0x3e>
 800ef96:	4602      	mov	r2, r0
 800ef98:	4b28      	ldr	r3, [pc, #160]	@ (800f03c <__lshift+0xd0>)
 800ef9a:	4829      	ldr	r0, [pc, #164]	@ (800f040 <__lshift+0xd4>)
 800ef9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800efa0:	f000 fbda 	bl	800f758 <__assert_func>
 800efa4:	3101      	adds	r1, #1
 800efa6:	005b      	lsls	r3, r3, #1
 800efa8:	e7ee      	b.n	800ef88 <__lshift+0x1c>
 800efaa:	2300      	movs	r3, #0
 800efac:	f100 0114 	add.w	r1, r0, #20
 800efb0:	f100 0210 	add.w	r2, r0, #16
 800efb4:	4618      	mov	r0, r3
 800efb6:	4553      	cmp	r3, sl
 800efb8:	db33      	blt.n	800f022 <__lshift+0xb6>
 800efba:	6920      	ldr	r0, [r4, #16]
 800efbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800efc0:	f104 0314 	add.w	r3, r4, #20
 800efc4:	f019 091f 	ands.w	r9, r9, #31
 800efc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800efcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800efd0:	d02b      	beq.n	800f02a <__lshift+0xbe>
 800efd2:	f1c9 0e20 	rsb	lr, r9, #32
 800efd6:	468a      	mov	sl, r1
 800efd8:	2200      	movs	r2, #0
 800efda:	6818      	ldr	r0, [r3, #0]
 800efdc:	fa00 f009 	lsl.w	r0, r0, r9
 800efe0:	4310      	orrs	r0, r2
 800efe2:	f84a 0b04 	str.w	r0, [sl], #4
 800efe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800efea:	459c      	cmp	ip, r3
 800efec:	fa22 f20e 	lsr.w	r2, r2, lr
 800eff0:	d8f3      	bhi.n	800efda <__lshift+0x6e>
 800eff2:	ebac 0304 	sub.w	r3, ip, r4
 800eff6:	3b15      	subs	r3, #21
 800eff8:	f023 0303 	bic.w	r3, r3, #3
 800effc:	3304      	adds	r3, #4
 800effe:	f104 0015 	add.w	r0, r4, #21
 800f002:	4560      	cmp	r0, ip
 800f004:	bf88      	it	hi
 800f006:	2304      	movhi	r3, #4
 800f008:	50ca      	str	r2, [r1, r3]
 800f00a:	b10a      	cbz	r2, 800f010 <__lshift+0xa4>
 800f00c:	f108 0602 	add.w	r6, r8, #2
 800f010:	3e01      	subs	r6, #1
 800f012:	4638      	mov	r0, r7
 800f014:	612e      	str	r6, [r5, #16]
 800f016:	4621      	mov	r1, r4
 800f018:	f7ff fde2 	bl	800ebe0 <_Bfree>
 800f01c:	4628      	mov	r0, r5
 800f01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f022:	f842 0f04 	str.w	r0, [r2, #4]!
 800f026:	3301      	adds	r3, #1
 800f028:	e7c5      	b.n	800efb6 <__lshift+0x4a>
 800f02a:	3904      	subs	r1, #4
 800f02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f030:	f841 2f04 	str.w	r2, [r1, #4]!
 800f034:	459c      	cmp	ip, r3
 800f036:	d8f9      	bhi.n	800f02c <__lshift+0xc0>
 800f038:	e7ea      	b.n	800f010 <__lshift+0xa4>
 800f03a:	bf00      	nop
 800f03c:	0801015c 	.word	0x0801015c
 800f040:	0801016d 	.word	0x0801016d

0800f044 <__mcmp>:
 800f044:	690a      	ldr	r2, [r1, #16]
 800f046:	4603      	mov	r3, r0
 800f048:	6900      	ldr	r0, [r0, #16]
 800f04a:	1a80      	subs	r0, r0, r2
 800f04c:	b530      	push	{r4, r5, lr}
 800f04e:	d10e      	bne.n	800f06e <__mcmp+0x2a>
 800f050:	3314      	adds	r3, #20
 800f052:	3114      	adds	r1, #20
 800f054:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f058:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f05c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f064:	4295      	cmp	r5, r2
 800f066:	d003      	beq.n	800f070 <__mcmp+0x2c>
 800f068:	d205      	bcs.n	800f076 <__mcmp+0x32>
 800f06a:	f04f 30ff 	mov.w	r0, #4294967295
 800f06e:	bd30      	pop	{r4, r5, pc}
 800f070:	42a3      	cmp	r3, r4
 800f072:	d3f3      	bcc.n	800f05c <__mcmp+0x18>
 800f074:	e7fb      	b.n	800f06e <__mcmp+0x2a>
 800f076:	2001      	movs	r0, #1
 800f078:	e7f9      	b.n	800f06e <__mcmp+0x2a>
	...

0800f07c <__mdiff>:
 800f07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f080:	4689      	mov	r9, r1
 800f082:	4606      	mov	r6, r0
 800f084:	4611      	mov	r1, r2
 800f086:	4648      	mov	r0, r9
 800f088:	4614      	mov	r4, r2
 800f08a:	f7ff ffdb 	bl	800f044 <__mcmp>
 800f08e:	1e05      	subs	r5, r0, #0
 800f090:	d112      	bne.n	800f0b8 <__mdiff+0x3c>
 800f092:	4629      	mov	r1, r5
 800f094:	4630      	mov	r0, r6
 800f096:	f7ff fd63 	bl	800eb60 <_Balloc>
 800f09a:	4602      	mov	r2, r0
 800f09c:	b928      	cbnz	r0, 800f0aa <__mdiff+0x2e>
 800f09e:	4b3f      	ldr	r3, [pc, #252]	@ (800f19c <__mdiff+0x120>)
 800f0a0:	f240 2137 	movw	r1, #567	@ 0x237
 800f0a4:	483e      	ldr	r0, [pc, #248]	@ (800f1a0 <__mdiff+0x124>)
 800f0a6:	f000 fb57 	bl	800f758 <__assert_func>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f0b0:	4610      	mov	r0, r2
 800f0b2:	b003      	add	sp, #12
 800f0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b8:	bfbc      	itt	lt
 800f0ba:	464b      	movlt	r3, r9
 800f0bc:	46a1      	movlt	r9, r4
 800f0be:	4630      	mov	r0, r6
 800f0c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f0c4:	bfba      	itte	lt
 800f0c6:	461c      	movlt	r4, r3
 800f0c8:	2501      	movlt	r5, #1
 800f0ca:	2500      	movge	r5, #0
 800f0cc:	f7ff fd48 	bl	800eb60 <_Balloc>
 800f0d0:	4602      	mov	r2, r0
 800f0d2:	b918      	cbnz	r0, 800f0dc <__mdiff+0x60>
 800f0d4:	4b31      	ldr	r3, [pc, #196]	@ (800f19c <__mdiff+0x120>)
 800f0d6:	f240 2145 	movw	r1, #581	@ 0x245
 800f0da:	e7e3      	b.n	800f0a4 <__mdiff+0x28>
 800f0dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f0e0:	6926      	ldr	r6, [r4, #16]
 800f0e2:	60c5      	str	r5, [r0, #12]
 800f0e4:	f109 0310 	add.w	r3, r9, #16
 800f0e8:	f109 0514 	add.w	r5, r9, #20
 800f0ec:	f104 0e14 	add.w	lr, r4, #20
 800f0f0:	f100 0b14 	add.w	fp, r0, #20
 800f0f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f0f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f0fc:	9301      	str	r3, [sp, #4]
 800f0fe:	46d9      	mov	r9, fp
 800f100:	f04f 0c00 	mov.w	ip, #0
 800f104:	9b01      	ldr	r3, [sp, #4]
 800f106:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f10a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f10e:	9301      	str	r3, [sp, #4]
 800f110:	fa1f f38a 	uxth.w	r3, sl
 800f114:	4619      	mov	r1, r3
 800f116:	b283      	uxth	r3, r0
 800f118:	1acb      	subs	r3, r1, r3
 800f11a:	0c00      	lsrs	r0, r0, #16
 800f11c:	4463      	add	r3, ip
 800f11e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f122:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f126:	b29b      	uxth	r3, r3
 800f128:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f12c:	4576      	cmp	r6, lr
 800f12e:	f849 3b04 	str.w	r3, [r9], #4
 800f132:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f136:	d8e5      	bhi.n	800f104 <__mdiff+0x88>
 800f138:	1b33      	subs	r3, r6, r4
 800f13a:	3b15      	subs	r3, #21
 800f13c:	f023 0303 	bic.w	r3, r3, #3
 800f140:	3415      	adds	r4, #21
 800f142:	3304      	adds	r3, #4
 800f144:	42a6      	cmp	r6, r4
 800f146:	bf38      	it	cc
 800f148:	2304      	movcc	r3, #4
 800f14a:	441d      	add	r5, r3
 800f14c:	445b      	add	r3, fp
 800f14e:	461e      	mov	r6, r3
 800f150:	462c      	mov	r4, r5
 800f152:	4544      	cmp	r4, r8
 800f154:	d30e      	bcc.n	800f174 <__mdiff+0xf8>
 800f156:	f108 0103 	add.w	r1, r8, #3
 800f15a:	1b49      	subs	r1, r1, r5
 800f15c:	f021 0103 	bic.w	r1, r1, #3
 800f160:	3d03      	subs	r5, #3
 800f162:	45a8      	cmp	r8, r5
 800f164:	bf38      	it	cc
 800f166:	2100      	movcc	r1, #0
 800f168:	440b      	add	r3, r1
 800f16a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f16e:	b191      	cbz	r1, 800f196 <__mdiff+0x11a>
 800f170:	6117      	str	r7, [r2, #16]
 800f172:	e79d      	b.n	800f0b0 <__mdiff+0x34>
 800f174:	f854 1b04 	ldr.w	r1, [r4], #4
 800f178:	46e6      	mov	lr, ip
 800f17a:	0c08      	lsrs	r0, r1, #16
 800f17c:	fa1c fc81 	uxtah	ip, ip, r1
 800f180:	4471      	add	r1, lr
 800f182:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f186:	b289      	uxth	r1, r1
 800f188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f18c:	f846 1b04 	str.w	r1, [r6], #4
 800f190:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f194:	e7dd      	b.n	800f152 <__mdiff+0xd6>
 800f196:	3f01      	subs	r7, #1
 800f198:	e7e7      	b.n	800f16a <__mdiff+0xee>
 800f19a:	bf00      	nop
 800f19c:	0801015c 	.word	0x0801015c
 800f1a0:	0801016d 	.word	0x0801016d

0800f1a4 <__d2b>:
 800f1a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1a8:	460f      	mov	r7, r1
 800f1aa:	2101      	movs	r1, #1
 800f1ac:	ec59 8b10 	vmov	r8, r9, d0
 800f1b0:	4616      	mov	r6, r2
 800f1b2:	f7ff fcd5 	bl	800eb60 <_Balloc>
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	b930      	cbnz	r0, 800f1c8 <__d2b+0x24>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	4b23      	ldr	r3, [pc, #140]	@ (800f24c <__d2b+0xa8>)
 800f1be:	4824      	ldr	r0, [pc, #144]	@ (800f250 <__d2b+0xac>)
 800f1c0:	f240 310f 	movw	r1, #783	@ 0x30f
 800f1c4:	f000 fac8 	bl	800f758 <__assert_func>
 800f1c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f1cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f1d0:	b10d      	cbz	r5, 800f1d6 <__d2b+0x32>
 800f1d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f1d6:	9301      	str	r3, [sp, #4]
 800f1d8:	f1b8 0300 	subs.w	r3, r8, #0
 800f1dc:	d023      	beq.n	800f226 <__d2b+0x82>
 800f1de:	4668      	mov	r0, sp
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	f7ff fd84 	bl	800ecee <__lo0bits>
 800f1e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f1ea:	b1d0      	cbz	r0, 800f222 <__d2b+0x7e>
 800f1ec:	f1c0 0320 	rsb	r3, r0, #32
 800f1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f1f4:	430b      	orrs	r3, r1
 800f1f6:	40c2      	lsrs	r2, r0
 800f1f8:	6163      	str	r3, [r4, #20]
 800f1fa:	9201      	str	r2, [sp, #4]
 800f1fc:	9b01      	ldr	r3, [sp, #4]
 800f1fe:	61a3      	str	r3, [r4, #24]
 800f200:	2b00      	cmp	r3, #0
 800f202:	bf0c      	ite	eq
 800f204:	2201      	moveq	r2, #1
 800f206:	2202      	movne	r2, #2
 800f208:	6122      	str	r2, [r4, #16]
 800f20a:	b1a5      	cbz	r5, 800f236 <__d2b+0x92>
 800f20c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f210:	4405      	add	r5, r0
 800f212:	603d      	str	r5, [r7, #0]
 800f214:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f218:	6030      	str	r0, [r6, #0]
 800f21a:	4620      	mov	r0, r4
 800f21c:	b003      	add	sp, #12
 800f21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f222:	6161      	str	r1, [r4, #20]
 800f224:	e7ea      	b.n	800f1fc <__d2b+0x58>
 800f226:	a801      	add	r0, sp, #4
 800f228:	f7ff fd61 	bl	800ecee <__lo0bits>
 800f22c:	9b01      	ldr	r3, [sp, #4]
 800f22e:	6163      	str	r3, [r4, #20]
 800f230:	3020      	adds	r0, #32
 800f232:	2201      	movs	r2, #1
 800f234:	e7e8      	b.n	800f208 <__d2b+0x64>
 800f236:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f23a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f23e:	6038      	str	r0, [r7, #0]
 800f240:	6918      	ldr	r0, [r3, #16]
 800f242:	f7ff fd35 	bl	800ecb0 <__hi0bits>
 800f246:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f24a:	e7e5      	b.n	800f218 <__d2b+0x74>
 800f24c:	0801015c 	.word	0x0801015c
 800f250:	0801016d 	.word	0x0801016d

0800f254 <__sfputc_r>:
 800f254:	6893      	ldr	r3, [r2, #8]
 800f256:	3b01      	subs	r3, #1
 800f258:	2b00      	cmp	r3, #0
 800f25a:	b410      	push	{r4}
 800f25c:	6093      	str	r3, [r2, #8]
 800f25e:	da08      	bge.n	800f272 <__sfputc_r+0x1e>
 800f260:	6994      	ldr	r4, [r2, #24]
 800f262:	42a3      	cmp	r3, r4
 800f264:	db01      	blt.n	800f26a <__sfputc_r+0x16>
 800f266:	290a      	cmp	r1, #10
 800f268:	d103      	bne.n	800f272 <__sfputc_r+0x1e>
 800f26a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f26e:	f7fe bbe4 	b.w	800da3a <__swbuf_r>
 800f272:	6813      	ldr	r3, [r2, #0]
 800f274:	1c58      	adds	r0, r3, #1
 800f276:	6010      	str	r0, [r2, #0]
 800f278:	7019      	strb	r1, [r3, #0]
 800f27a:	4608      	mov	r0, r1
 800f27c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f280:	4770      	bx	lr

0800f282 <__sfputs_r>:
 800f282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f284:	4606      	mov	r6, r0
 800f286:	460f      	mov	r7, r1
 800f288:	4614      	mov	r4, r2
 800f28a:	18d5      	adds	r5, r2, r3
 800f28c:	42ac      	cmp	r4, r5
 800f28e:	d101      	bne.n	800f294 <__sfputs_r+0x12>
 800f290:	2000      	movs	r0, #0
 800f292:	e007      	b.n	800f2a4 <__sfputs_r+0x22>
 800f294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f298:	463a      	mov	r2, r7
 800f29a:	4630      	mov	r0, r6
 800f29c:	f7ff ffda 	bl	800f254 <__sfputc_r>
 800f2a0:	1c43      	adds	r3, r0, #1
 800f2a2:	d1f3      	bne.n	800f28c <__sfputs_r+0xa>
 800f2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2a8 <_vfiprintf_r>:
 800f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	460d      	mov	r5, r1
 800f2ae:	b09d      	sub	sp, #116	@ 0x74
 800f2b0:	4614      	mov	r4, r2
 800f2b2:	4698      	mov	r8, r3
 800f2b4:	4606      	mov	r6, r0
 800f2b6:	b118      	cbz	r0, 800f2c0 <_vfiprintf_r+0x18>
 800f2b8:	6a03      	ldr	r3, [r0, #32]
 800f2ba:	b90b      	cbnz	r3, 800f2c0 <_vfiprintf_r+0x18>
 800f2bc:	f7fe fad4 	bl	800d868 <__sinit>
 800f2c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2c2:	07d9      	lsls	r1, r3, #31
 800f2c4:	d405      	bmi.n	800f2d2 <_vfiprintf_r+0x2a>
 800f2c6:	89ab      	ldrh	r3, [r5, #12]
 800f2c8:	059a      	lsls	r2, r3, #22
 800f2ca:	d402      	bmi.n	800f2d2 <_vfiprintf_r+0x2a>
 800f2cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2ce:	f7fe fcd6 	bl	800dc7e <__retarget_lock_acquire_recursive>
 800f2d2:	89ab      	ldrh	r3, [r5, #12]
 800f2d4:	071b      	lsls	r3, r3, #28
 800f2d6:	d501      	bpl.n	800f2dc <_vfiprintf_r+0x34>
 800f2d8:	692b      	ldr	r3, [r5, #16]
 800f2da:	b99b      	cbnz	r3, 800f304 <_vfiprintf_r+0x5c>
 800f2dc:	4629      	mov	r1, r5
 800f2de:	4630      	mov	r0, r6
 800f2e0:	f7fe fbea 	bl	800dab8 <__swsetup_r>
 800f2e4:	b170      	cbz	r0, 800f304 <_vfiprintf_r+0x5c>
 800f2e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2e8:	07dc      	lsls	r4, r3, #31
 800f2ea:	d504      	bpl.n	800f2f6 <_vfiprintf_r+0x4e>
 800f2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f0:	b01d      	add	sp, #116	@ 0x74
 800f2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f6:	89ab      	ldrh	r3, [r5, #12]
 800f2f8:	0598      	lsls	r0, r3, #22
 800f2fa:	d4f7      	bmi.n	800f2ec <_vfiprintf_r+0x44>
 800f2fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2fe:	f7fe fcbf 	bl	800dc80 <__retarget_lock_release_recursive>
 800f302:	e7f3      	b.n	800f2ec <_vfiprintf_r+0x44>
 800f304:	2300      	movs	r3, #0
 800f306:	9309      	str	r3, [sp, #36]	@ 0x24
 800f308:	2320      	movs	r3, #32
 800f30a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f30e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f312:	2330      	movs	r3, #48	@ 0x30
 800f314:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f4c4 <_vfiprintf_r+0x21c>
 800f318:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f31c:	f04f 0901 	mov.w	r9, #1
 800f320:	4623      	mov	r3, r4
 800f322:	469a      	mov	sl, r3
 800f324:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f328:	b10a      	cbz	r2, 800f32e <_vfiprintf_r+0x86>
 800f32a:	2a25      	cmp	r2, #37	@ 0x25
 800f32c:	d1f9      	bne.n	800f322 <_vfiprintf_r+0x7a>
 800f32e:	ebba 0b04 	subs.w	fp, sl, r4
 800f332:	d00b      	beq.n	800f34c <_vfiprintf_r+0xa4>
 800f334:	465b      	mov	r3, fp
 800f336:	4622      	mov	r2, r4
 800f338:	4629      	mov	r1, r5
 800f33a:	4630      	mov	r0, r6
 800f33c:	f7ff ffa1 	bl	800f282 <__sfputs_r>
 800f340:	3001      	adds	r0, #1
 800f342:	f000 80a7 	beq.w	800f494 <_vfiprintf_r+0x1ec>
 800f346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f348:	445a      	add	r2, fp
 800f34a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f34c:	f89a 3000 	ldrb.w	r3, [sl]
 800f350:	2b00      	cmp	r3, #0
 800f352:	f000 809f 	beq.w	800f494 <_vfiprintf_r+0x1ec>
 800f356:	2300      	movs	r3, #0
 800f358:	f04f 32ff 	mov.w	r2, #4294967295
 800f35c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f360:	f10a 0a01 	add.w	sl, sl, #1
 800f364:	9304      	str	r3, [sp, #16]
 800f366:	9307      	str	r3, [sp, #28]
 800f368:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f36c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f36e:	4654      	mov	r4, sl
 800f370:	2205      	movs	r2, #5
 800f372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f376:	4853      	ldr	r0, [pc, #332]	@ (800f4c4 <_vfiprintf_r+0x21c>)
 800f378:	f7f0 ff42 	bl	8000200 <memchr>
 800f37c:	9a04      	ldr	r2, [sp, #16]
 800f37e:	b9d8      	cbnz	r0, 800f3b8 <_vfiprintf_r+0x110>
 800f380:	06d1      	lsls	r1, r2, #27
 800f382:	bf44      	itt	mi
 800f384:	2320      	movmi	r3, #32
 800f386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f38a:	0713      	lsls	r3, r2, #28
 800f38c:	bf44      	itt	mi
 800f38e:	232b      	movmi	r3, #43	@ 0x2b
 800f390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f394:	f89a 3000 	ldrb.w	r3, [sl]
 800f398:	2b2a      	cmp	r3, #42	@ 0x2a
 800f39a:	d015      	beq.n	800f3c8 <_vfiprintf_r+0x120>
 800f39c:	9a07      	ldr	r2, [sp, #28]
 800f39e:	4654      	mov	r4, sl
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	f04f 0c0a 	mov.w	ip, #10
 800f3a6:	4621      	mov	r1, r4
 800f3a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3ac:	3b30      	subs	r3, #48	@ 0x30
 800f3ae:	2b09      	cmp	r3, #9
 800f3b0:	d94b      	bls.n	800f44a <_vfiprintf_r+0x1a2>
 800f3b2:	b1b0      	cbz	r0, 800f3e2 <_vfiprintf_r+0x13a>
 800f3b4:	9207      	str	r2, [sp, #28]
 800f3b6:	e014      	b.n	800f3e2 <_vfiprintf_r+0x13a>
 800f3b8:	eba0 0308 	sub.w	r3, r0, r8
 800f3bc:	fa09 f303 	lsl.w	r3, r9, r3
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	9304      	str	r3, [sp, #16]
 800f3c4:	46a2      	mov	sl, r4
 800f3c6:	e7d2      	b.n	800f36e <_vfiprintf_r+0xc6>
 800f3c8:	9b03      	ldr	r3, [sp, #12]
 800f3ca:	1d19      	adds	r1, r3, #4
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	9103      	str	r1, [sp, #12]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	bfbb      	ittet	lt
 800f3d4:	425b      	neglt	r3, r3
 800f3d6:	f042 0202 	orrlt.w	r2, r2, #2
 800f3da:	9307      	strge	r3, [sp, #28]
 800f3dc:	9307      	strlt	r3, [sp, #28]
 800f3de:	bfb8      	it	lt
 800f3e0:	9204      	strlt	r2, [sp, #16]
 800f3e2:	7823      	ldrb	r3, [r4, #0]
 800f3e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3e6:	d10a      	bne.n	800f3fe <_vfiprintf_r+0x156>
 800f3e8:	7863      	ldrb	r3, [r4, #1]
 800f3ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3ec:	d132      	bne.n	800f454 <_vfiprintf_r+0x1ac>
 800f3ee:	9b03      	ldr	r3, [sp, #12]
 800f3f0:	1d1a      	adds	r2, r3, #4
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	9203      	str	r2, [sp, #12]
 800f3f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3fa:	3402      	adds	r4, #2
 800f3fc:	9305      	str	r3, [sp, #20]
 800f3fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f4d4 <_vfiprintf_r+0x22c>
 800f402:	7821      	ldrb	r1, [r4, #0]
 800f404:	2203      	movs	r2, #3
 800f406:	4650      	mov	r0, sl
 800f408:	f7f0 fefa 	bl	8000200 <memchr>
 800f40c:	b138      	cbz	r0, 800f41e <_vfiprintf_r+0x176>
 800f40e:	9b04      	ldr	r3, [sp, #16]
 800f410:	eba0 000a 	sub.w	r0, r0, sl
 800f414:	2240      	movs	r2, #64	@ 0x40
 800f416:	4082      	lsls	r2, r0
 800f418:	4313      	orrs	r3, r2
 800f41a:	3401      	adds	r4, #1
 800f41c:	9304      	str	r3, [sp, #16]
 800f41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f422:	4829      	ldr	r0, [pc, #164]	@ (800f4c8 <_vfiprintf_r+0x220>)
 800f424:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f428:	2206      	movs	r2, #6
 800f42a:	f7f0 fee9 	bl	8000200 <memchr>
 800f42e:	2800      	cmp	r0, #0
 800f430:	d03f      	beq.n	800f4b2 <_vfiprintf_r+0x20a>
 800f432:	4b26      	ldr	r3, [pc, #152]	@ (800f4cc <_vfiprintf_r+0x224>)
 800f434:	bb1b      	cbnz	r3, 800f47e <_vfiprintf_r+0x1d6>
 800f436:	9b03      	ldr	r3, [sp, #12]
 800f438:	3307      	adds	r3, #7
 800f43a:	f023 0307 	bic.w	r3, r3, #7
 800f43e:	3308      	adds	r3, #8
 800f440:	9303      	str	r3, [sp, #12]
 800f442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f444:	443b      	add	r3, r7
 800f446:	9309      	str	r3, [sp, #36]	@ 0x24
 800f448:	e76a      	b.n	800f320 <_vfiprintf_r+0x78>
 800f44a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f44e:	460c      	mov	r4, r1
 800f450:	2001      	movs	r0, #1
 800f452:	e7a8      	b.n	800f3a6 <_vfiprintf_r+0xfe>
 800f454:	2300      	movs	r3, #0
 800f456:	3401      	adds	r4, #1
 800f458:	9305      	str	r3, [sp, #20]
 800f45a:	4619      	mov	r1, r3
 800f45c:	f04f 0c0a 	mov.w	ip, #10
 800f460:	4620      	mov	r0, r4
 800f462:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f466:	3a30      	subs	r2, #48	@ 0x30
 800f468:	2a09      	cmp	r2, #9
 800f46a:	d903      	bls.n	800f474 <_vfiprintf_r+0x1cc>
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d0c6      	beq.n	800f3fe <_vfiprintf_r+0x156>
 800f470:	9105      	str	r1, [sp, #20]
 800f472:	e7c4      	b.n	800f3fe <_vfiprintf_r+0x156>
 800f474:	fb0c 2101 	mla	r1, ip, r1, r2
 800f478:	4604      	mov	r4, r0
 800f47a:	2301      	movs	r3, #1
 800f47c:	e7f0      	b.n	800f460 <_vfiprintf_r+0x1b8>
 800f47e:	ab03      	add	r3, sp, #12
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	462a      	mov	r2, r5
 800f484:	4b12      	ldr	r3, [pc, #72]	@ (800f4d0 <_vfiprintf_r+0x228>)
 800f486:	a904      	add	r1, sp, #16
 800f488:	4630      	mov	r0, r6
 800f48a:	f7fd fdab 	bl	800cfe4 <_printf_float>
 800f48e:	4607      	mov	r7, r0
 800f490:	1c78      	adds	r0, r7, #1
 800f492:	d1d6      	bne.n	800f442 <_vfiprintf_r+0x19a>
 800f494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f496:	07d9      	lsls	r1, r3, #31
 800f498:	d405      	bmi.n	800f4a6 <_vfiprintf_r+0x1fe>
 800f49a:	89ab      	ldrh	r3, [r5, #12]
 800f49c:	059a      	lsls	r2, r3, #22
 800f49e:	d402      	bmi.n	800f4a6 <_vfiprintf_r+0x1fe>
 800f4a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4a2:	f7fe fbed 	bl	800dc80 <__retarget_lock_release_recursive>
 800f4a6:	89ab      	ldrh	r3, [r5, #12]
 800f4a8:	065b      	lsls	r3, r3, #25
 800f4aa:	f53f af1f 	bmi.w	800f2ec <_vfiprintf_r+0x44>
 800f4ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4b0:	e71e      	b.n	800f2f0 <_vfiprintf_r+0x48>
 800f4b2:	ab03      	add	r3, sp, #12
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	462a      	mov	r2, r5
 800f4b8:	4b05      	ldr	r3, [pc, #20]	@ (800f4d0 <_vfiprintf_r+0x228>)
 800f4ba:	a904      	add	r1, sp, #16
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f7fe f829 	bl	800d514 <_printf_i>
 800f4c2:	e7e4      	b.n	800f48e <_vfiprintf_r+0x1e6>
 800f4c4:	080101c6 	.word	0x080101c6
 800f4c8:	080101d0 	.word	0x080101d0
 800f4cc:	0800cfe5 	.word	0x0800cfe5
 800f4d0:	0800f283 	.word	0x0800f283
 800f4d4:	080101cc 	.word	0x080101cc

0800f4d8 <__sflush_r>:
 800f4d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e0:	0716      	lsls	r6, r2, #28
 800f4e2:	4605      	mov	r5, r0
 800f4e4:	460c      	mov	r4, r1
 800f4e6:	d454      	bmi.n	800f592 <__sflush_r+0xba>
 800f4e8:	684b      	ldr	r3, [r1, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	dc02      	bgt.n	800f4f4 <__sflush_r+0x1c>
 800f4ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	dd48      	ble.n	800f586 <__sflush_r+0xae>
 800f4f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4f6:	2e00      	cmp	r6, #0
 800f4f8:	d045      	beq.n	800f586 <__sflush_r+0xae>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f500:	682f      	ldr	r7, [r5, #0]
 800f502:	6a21      	ldr	r1, [r4, #32]
 800f504:	602b      	str	r3, [r5, #0]
 800f506:	d030      	beq.n	800f56a <__sflush_r+0x92>
 800f508:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f50a:	89a3      	ldrh	r3, [r4, #12]
 800f50c:	0759      	lsls	r1, r3, #29
 800f50e:	d505      	bpl.n	800f51c <__sflush_r+0x44>
 800f510:	6863      	ldr	r3, [r4, #4]
 800f512:	1ad2      	subs	r2, r2, r3
 800f514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f516:	b10b      	cbz	r3, 800f51c <__sflush_r+0x44>
 800f518:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f51a:	1ad2      	subs	r2, r2, r3
 800f51c:	2300      	movs	r3, #0
 800f51e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f520:	6a21      	ldr	r1, [r4, #32]
 800f522:	4628      	mov	r0, r5
 800f524:	47b0      	blx	r6
 800f526:	1c43      	adds	r3, r0, #1
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	d106      	bne.n	800f53a <__sflush_r+0x62>
 800f52c:	6829      	ldr	r1, [r5, #0]
 800f52e:	291d      	cmp	r1, #29
 800f530:	d82b      	bhi.n	800f58a <__sflush_r+0xb2>
 800f532:	4a2a      	ldr	r2, [pc, #168]	@ (800f5dc <__sflush_r+0x104>)
 800f534:	40ca      	lsrs	r2, r1
 800f536:	07d6      	lsls	r6, r2, #31
 800f538:	d527      	bpl.n	800f58a <__sflush_r+0xb2>
 800f53a:	2200      	movs	r2, #0
 800f53c:	6062      	str	r2, [r4, #4]
 800f53e:	04d9      	lsls	r1, r3, #19
 800f540:	6922      	ldr	r2, [r4, #16]
 800f542:	6022      	str	r2, [r4, #0]
 800f544:	d504      	bpl.n	800f550 <__sflush_r+0x78>
 800f546:	1c42      	adds	r2, r0, #1
 800f548:	d101      	bne.n	800f54e <__sflush_r+0x76>
 800f54a:	682b      	ldr	r3, [r5, #0]
 800f54c:	b903      	cbnz	r3, 800f550 <__sflush_r+0x78>
 800f54e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f552:	602f      	str	r7, [r5, #0]
 800f554:	b1b9      	cbz	r1, 800f586 <__sflush_r+0xae>
 800f556:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f55a:	4299      	cmp	r1, r3
 800f55c:	d002      	beq.n	800f564 <__sflush_r+0x8c>
 800f55e:	4628      	mov	r0, r5
 800f560:	f7ff f9fe 	bl	800e960 <_free_r>
 800f564:	2300      	movs	r3, #0
 800f566:	6363      	str	r3, [r4, #52]	@ 0x34
 800f568:	e00d      	b.n	800f586 <__sflush_r+0xae>
 800f56a:	2301      	movs	r3, #1
 800f56c:	4628      	mov	r0, r5
 800f56e:	47b0      	blx	r6
 800f570:	4602      	mov	r2, r0
 800f572:	1c50      	adds	r0, r2, #1
 800f574:	d1c9      	bne.n	800f50a <__sflush_r+0x32>
 800f576:	682b      	ldr	r3, [r5, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d0c6      	beq.n	800f50a <__sflush_r+0x32>
 800f57c:	2b1d      	cmp	r3, #29
 800f57e:	d001      	beq.n	800f584 <__sflush_r+0xac>
 800f580:	2b16      	cmp	r3, #22
 800f582:	d11e      	bne.n	800f5c2 <__sflush_r+0xea>
 800f584:	602f      	str	r7, [r5, #0]
 800f586:	2000      	movs	r0, #0
 800f588:	e022      	b.n	800f5d0 <__sflush_r+0xf8>
 800f58a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f58e:	b21b      	sxth	r3, r3
 800f590:	e01b      	b.n	800f5ca <__sflush_r+0xf2>
 800f592:	690f      	ldr	r7, [r1, #16]
 800f594:	2f00      	cmp	r7, #0
 800f596:	d0f6      	beq.n	800f586 <__sflush_r+0xae>
 800f598:	0793      	lsls	r3, r2, #30
 800f59a:	680e      	ldr	r6, [r1, #0]
 800f59c:	bf08      	it	eq
 800f59e:	694b      	ldreq	r3, [r1, #20]
 800f5a0:	600f      	str	r7, [r1, #0]
 800f5a2:	bf18      	it	ne
 800f5a4:	2300      	movne	r3, #0
 800f5a6:	eba6 0807 	sub.w	r8, r6, r7
 800f5aa:	608b      	str	r3, [r1, #8]
 800f5ac:	f1b8 0f00 	cmp.w	r8, #0
 800f5b0:	dde9      	ble.n	800f586 <__sflush_r+0xae>
 800f5b2:	6a21      	ldr	r1, [r4, #32]
 800f5b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f5b6:	4643      	mov	r3, r8
 800f5b8:	463a      	mov	r2, r7
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	47b0      	blx	r6
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	dc08      	bgt.n	800f5d4 <__sflush_r+0xfc>
 800f5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5ca:	81a3      	strh	r3, [r4, #12]
 800f5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d4:	4407      	add	r7, r0
 800f5d6:	eba8 0800 	sub.w	r8, r8, r0
 800f5da:	e7e7      	b.n	800f5ac <__sflush_r+0xd4>
 800f5dc:	20400001 	.word	0x20400001

0800f5e0 <_fflush_r>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	690b      	ldr	r3, [r1, #16]
 800f5e4:	4605      	mov	r5, r0
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	b913      	cbnz	r3, 800f5f0 <_fflush_r+0x10>
 800f5ea:	2500      	movs	r5, #0
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	bd38      	pop	{r3, r4, r5, pc}
 800f5f0:	b118      	cbz	r0, 800f5fa <_fflush_r+0x1a>
 800f5f2:	6a03      	ldr	r3, [r0, #32]
 800f5f4:	b90b      	cbnz	r3, 800f5fa <_fflush_r+0x1a>
 800f5f6:	f7fe f937 	bl	800d868 <__sinit>
 800f5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d0f3      	beq.n	800f5ea <_fflush_r+0xa>
 800f602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f604:	07d0      	lsls	r0, r2, #31
 800f606:	d404      	bmi.n	800f612 <_fflush_r+0x32>
 800f608:	0599      	lsls	r1, r3, #22
 800f60a:	d402      	bmi.n	800f612 <_fflush_r+0x32>
 800f60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f60e:	f7fe fb36 	bl	800dc7e <__retarget_lock_acquire_recursive>
 800f612:	4628      	mov	r0, r5
 800f614:	4621      	mov	r1, r4
 800f616:	f7ff ff5f 	bl	800f4d8 <__sflush_r>
 800f61a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f61c:	07da      	lsls	r2, r3, #31
 800f61e:	4605      	mov	r5, r0
 800f620:	d4e4      	bmi.n	800f5ec <_fflush_r+0xc>
 800f622:	89a3      	ldrh	r3, [r4, #12]
 800f624:	059b      	lsls	r3, r3, #22
 800f626:	d4e1      	bmi.n	800f5ec <_fflush_r+0xc>
 800f628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f62a:	f7fe fb29 	bl	800dc80 <__retarget_lock_release_recursive>
 800f62e:	e7dd      	b.n	800f5ec <_fflush_r+0xc>

0800f630 <__swhatbuf_r>:
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	460c      	mov	r4, r1
 800f634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f638:	2900      	cmp	r1, #0
 800f63a:	b096      	sub	sp, #88	@ 0x58
 800f63c:	4615      	mov	r5, r2
 800f63e:	461e      	mov	r6, r3
 800f640:	da0d      	bge.n	800f65e <__swhatbuf_r+0x2e>
 800f642:	89a3      	ldrh	r3, [r4, #12]
 800f644:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f648:	f04f 0100 	mov.w	r1, #0
 800f64c:	bf14      	ite	ne
 800f64e:	2340      	movne	r3, #64	@ 0x40
 800f650:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f654:	2000      	movs	r0, #0
 800f656:	6031      	str	r1, [r6, #0]
 800f658:	602b      	str	r3, [r5, #0]
 800f65a:	b016      	add	sp, #88	@ 0x58
 800f65c:	bd70      	pop	{r4, r5, r6, pc}
 800f65e:	466a      	mov	r2, sp
 800f660:	f000 f848 	bl	800f6f4 <_fstat_r>
 800f664:	2800      	cmp	r0, #0
 800f666:	dbec      	blt.n	800f642 <__swhatbuf_r+0x12>
 800f668:	9901      	ldr	r1, [sp, #4]
 800f66a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f66e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f672:	4259      	negs	r1, r3
 800f674:	4159      	adcs	r1, r3
 800f676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f67a:	e7eb      	b.n	800f654 <__swhatbuf_r+0x24>

0800f67c <__smakebuf_r>:
 800f67c:	898b      	ldrh	r3, [r1, #12]
 800f67e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f680:	079d      	lsls	r5, r3, #30
 800f682:	4606      	mov	r6, r0
 800f684:	460c      	mov	r4, r1
 800f686:	d507      	bpl.n	800f698 <__smakebuf_r+0x1c>
 800f688:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f68c:	6023      	str	r3, [r4, #0]
 800f68e:	6123      	str	r3, [r4, #16]
 800f690:	2301      	movs	r3, #1
 800f692:	6163      	str	r3, [r4, #20]
 800f694:	b003      	add	sp, #12
 800f696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f698:	ab01      	add	r3, sp, #4
 800f69a:	466a      	mov	r2, sp
 800f69c:	f7ff ffc8 	bl	800f630 <__swhatbuf_r>
 800f6a0:	9f00      	ldr	r7, [sp, #0]
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	f7ff f9ce 	bl	800ea48 <_malloc_r>
 800f6ac:	b948      	cbnz	r0, 800f6c2 <__smakebuf_r+0x46>
 800f6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6b2:	059a      	lsls	r2, r3, #22
 800f6b4:	d4ee      	bmi.n	800f694 <__smakebuf_r+0x18>
 800f6b6:	f023 0303 	bic.w	r3, r3, #3
 800f6ba:	f043 0302 	orr.w	r3, r3, #2
 800f6be:	81a3      	strh	r3, [r4, #12]
 800f6c0:	e7e2      	b.n	800f688 <__smakebuf_r+0xc>
 800f6c2:	89a3      	ldrh	r3, [r4, #12]
 800f6c4:	6020      	str	r0, [r4, #0]
 800f6c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6ca:	81a3      	strh	r3, [r4, #12]
 800f6cc:	9b01      	ldr	r3, [sp, #4]
 800f6ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f6d2:	b15b      	cbz	r3, 800f6ec <__smakebuf_r+0x70>
 800f6d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6d8:	4630      	mov	r0, r6
 800f6da:	f000 f81d 	bl	800f718 <_isatty_r>
 800f6de:	b128      	cbz	r0, 800f6ec <__smakebuf_r+0x70>
 800f6e0:	89a3      	ldrh	r3, [r4, #12]
 800f6e2:	f023 0303 	bic.w	r3, r3, #3
 800f6e6:	f043 0301 	orr.w	r3, r3, #1
 800f6ea:	81a3      	strh	r3, [r4, #12]
 800f6ec:	89a3      	ldrh	r3, [r4, #12]
 800f6ee:	431d      	orrs	r5, r3
 800f6f0:	81a5      	strh	r5, [r4, #12]
 800f6f2:	e7cf      	b.n	800f694 <__smakebuf_r+0x18>

0800f6f4 <_fstat_r>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	4d07      	ldr	r5, [pc, #28]	@ (800f714 <_fstat_r+0x20>)
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	4608      	mov	r0, r1
 800f6fe:	4611      	mov	r1, r2
 800f700:	602b      	str	r3, [r5, #0]
 800f702:	f7f4 f846 	bl	8003792 <_fstat>
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	d102      	bne.n	800f710 <_fstat_r+0x1c>
 800f70a:	682b      	ldr	r3, [r5, #0]
 800f70c:	b103      	cbz	r3, 800f710 <_fstat_r+0x1c>
 800f70e:	6023      	str	r3, [r4, #0]
 800f710:	bd38      	pop	{r3, r4, r5, pc}
 800f712:	bf00      	nop
 800f714:	20040a40 	.word	0x20040a40

0800f718 <_isatty_r>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4d06      	ldr	r5, [pc, #24]	@ (800f734 <_isatty_r+0x1c>)
 800f71c:	2300      	movs	r3, #0
 800f71e:	4604      	mov	r4, r0
 800f720:	4608      	mov	r0, r1
 800f722:	602b      	str	r3, [r5, #0]
 800f724:	f7f4 f845 	bl	80037b2 <_isatty>
 800f728:	1c43      	adds	r3, r0, #1
 800f72a:	d102      	bne.n	800f732 <_isatty_r+0x1a>
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	b103      	cbz	r3, 800f732 <_isatty_r+0x1a>
 800f730:	6023      	str	r3, [r4, #0]
 800f732:	bd38      	pop	{r3, r4, r5, pc}
 800f734:	20040a40 	.word	0x20040a40

0800f738 <_sbrk_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	4d06      	ldr	r5, [pc, #24]	@ (800f754 <_sbrk_r+0x1c>)
 800f73c:	2300      	movs	r3, #0
 800f73e:	4604      	mov	r4, r0
 800f740:	4608      	mov	r0, r1
 800f742:	602b      	str	r3, [r5, #0]
 800f744:	f7f4 f84e 	bl	80037e4 <_sbrk>
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	d102      	bne.n	800f752 <_sbrk_r+0x1a>
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	b103      	cbz	r3, 800f752 <_sbrk_r+0x1a>
 800f750:	6023      	str	r3, [r4, #0]
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	20040a40 	.word	0x20040a40

0800f758 <__assert_func>:
 800f758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f75a:	4614      	mov	r4, r2
 800f75c:	461a      	mov	r2, r3
 800f75e:	4b09      	ldr	r3, [pc, #36]	@ (800f784 <__assert_func+0x2c>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	4605      	mov	r5, r0
 800f764:	68d8      	ldr	r0, [r3, #12]
 800f766:	b14c      	cbz	r4, 800f77c <__assert_func+0x24>
 800f768:	4b07      	ldr	r3, [pc, #28]	@ (800f788 <__assert_func+0x30>)
 800f76a:	9100      	str	r1, [sp, #0]
 800f76c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f770:	4906      	ldr	r1, [pc, #24]	@ (800f78c <__assert_func+0x34>)
 800f772:	462b      	mov	r3, r5
 800f774:	f000 f842 	bl	800f7fc <fiprintf>
 800f778:	f000 f852 	bl	800f820 <abort>
 800f77c:	4b04      	ldr	r3, [pc, #16]	@ (800f790 <__assert_func+0x38>)
 800f77e:	461c      	mov	r4, r3
 800f780:	e7f3      	b.n	800f76a <__assert_func+0x12>
 800f782:	bf00      	nop
 800f784:	200402d8 	.word	0x200402d8
 800f788:	080101e1 	.word	0x080101e1
 800f78c:	080101ee 	.word	0x080101ee
 800f790:	0801021c 	.word	0x0801021c

0800f794 <_calloc_r>:
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	fba1 5402 	umull	r5, r4, r1, r2
 800f79a:	b934      	cbnz	r4, 800f7aa <_calloc_r+0x16>
 800f79c:	4629      	mov	r1, r5
 800f79e:	f7ff f953 	bl	800ea48 <_malloc_r>
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	b928      	cbnz	r0, 800f7b2 <_calloc_r+0x1e>
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	bd70      	pop	{r4, r5, r6, pc}
 800f7aa:	220c      	movs	r2, #12
 800f7ac:	6002      	str	r2, [r0, #0]
 800f7ae:	2600      	movs	r6, #0
 800f7b0:	e7f9      	b.n	800f7a6 <_calloc_r+0x12>
 800f7b2:	462a      	mov	r2, r5
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	f7fe f9d5 	bl	800db64 <memset>
 800f7ba:	e7f4      	b.n	800f7a6 <_calloc_r+0x12>

0800f7bc <__ascii_mbtowc>:
 800f7bc:	b082      	sub	sp, #8
 800f7be:	b901      	cbnz	r1, 800f7c2 <__ascii_mbtowc+0x6>
 800f7c0:	a901      	add	r1, sp, #4
 800f7c2:	b142      	cbz	r2, 800f7d6 <__ascii_mbtowc+0x1a>
 800f7c4:	b14b      	cbz	r3, 800f7da <__ascii_mbtowc+0x1e>
 800f7c6:	7813      	ldrb	r3, [r2, #0]
 800f7c8:	600b      	str	r3, [r1, #0]
 800f7ca:	7812      	ldrb	r2, [r2, #0]
 800f7cc:	1e10      	subs	r0, r2, #0
 800f7ce:	bf18      	it	ne
 800f7d0:	2001      	movne	r0, #1
 800f7d2:	b002      	add	sp, #8
 800f7d4:	4770      	bx	lr
 800f7d6:	4610      	mov	r0, r2
 800f7d8:	e7fb      	b.n	800f7d2 <__ascii_mbtowc+0x16>
 800f7da:	f06f 0001 	mvn.w	r0, #1
 800f7de:	e7f8      	b.n	800f7d2 <__ascii_mbtowc+0x16>

0800f7e0 <__ascii_wctomb>:
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	4608      	mov	r0, r1
 800f7e4:	b141      	cbz	r1, 800f7f8 <__ascii_wctomb+0x18>
 800f7e6:	2aff      	cmp	r2, #255	@ 0xff
 800f7e8:	d904      	bls.n	800f7f4 <__ascii_wctomb+0x14>
 800f7ea:	228a      	movs	r2, #138	@ 0x8a
 800f7ec:	601a      	str	r2, [r3, #0]
 800f7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f2:	4770      	bx	lr
 800f7f4:	700a      	strb	r2, [r1, #0]
 800f7f6:	2001      	movs	r0, #1
 800f7f8:	4770      	bx	lr
	...

0800f7fc <fiprintf>:
 800f7fc:	b40e      	push	{r1, r2, r3}
 800f7fe:	b503      	push	{r0, r1, lr}
 800f800:	4601      	mov	r1, r0
 800f802:	ab03      	add	r3, sp, #12
 800f804:	4805      	ldr	r0, [pc, #20]	@ (800f81c <fiprintf+0x20>)
 800f806:	f853 2b04 	ldr.w	r2, [r3], #4
 800f80a:	6800      	ldr	r0, [r0, #0]
 800f80c:	9301      	str	r3, [sp, #4]
 800f80e:	f7ff fd4b 	bl	800f2a8 <_vfiprintf_r>
 800f812:	b002      	add	sp, #8
 800f814:	f85d eb04 	ldr.w	lr, [sp], #4
 800f818:	b003      	add	sp, #12
 800f81a:	4770      	bx	lr
 800f81c:	200402d8 	.word	0x200402d8

0800f820 <abort>:
 800f820:	b508      	push	{r3, lr}
 800f822:	2006      	movs	r0, #6
 800f824:	f000 f82c 	bl	800f880 <raise>
 800f828:	2001      	movs	r0, #1
 800f82a:	f7f3 ff62 	bl	80036f2 <_exit>

0800f82e <_raise_r>:
 800f82e:	291f      	cmp	r1, #31
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4605      	mov	r5, r0
 800f834:	460c      	mov	r4, r1
 800f836:	d904      	bls.n	800f842 <_raise_r+0x14>
 800f838:	2316      	movs	r3, #22
 800f83a:	6003      	str	r3, [r0, #0]
 800f83c:	f04f 30ff 	mov.w	r0, #4294967295
 800f840:	bd38      	pop	{r3, r4, r5, pc}
 800f842:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f844:	b112      	cbz	r2, 800f84c <_raise_r+0x1e>
 800f846:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f84a:	b94b      	cbnz	r3, 800f860 <_raise_r+0x32>
 800f84c:	4628      	mov	r0, r5
 800f84e:	f000 f831 	bl	800f8b4 <_getpid_r>
 800f852:	4622      	mov	r2, r4
 800f854:	4601      	mov	r1, r0
 800f856:	4628      	mov	r0, r5
 800f858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f85c:	f000 b818 	b.w	800f890 <_kill_r>
 800f860:	2b01      	cmp	r3, #1
 800f862:	d00a      	beq.n	800f87a <_raise_r+0x4c>
 800f864:	1c59      	adds	r1, r3, #1
 800f866:	d103      	bne.n	800f870 <_raise_r+0x42>
 800f868:	2316      	movs	r3, #22
 800f86a:	6003      	str	r3, [r0, #0]
 800f86c:	2001      	movs	r0, #1
 800f86e:	e7e7      	b.n	800f840 <_raise_r+0x12>
 800f870:	2100      	movs	r1, #0
 800f872:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f876:	4620      	mov	r0, r4
 800f878:	4798      	blx	r3
 800f87a:	2000      	movs	r0, #0
 800f87c:	e7e0      	b.n	800f840 <_raise_r+0x12>
	...

0800f880 <raise>:
 800f880:	4b02      	ldr	r3, [pc, #8]	@ (800f88c <raise+0xc>)
 800f882:	4601      	mov	r1, r0
 800f884:	6818      	ldr	r0, [r3, #0]
 800f886:	f7ff bfd2 	b.w	800f82e <_raise_r>
 800f88a:	bf00      	nop
 800f88c:	200402d8 	.word	0x200402d8

0800f890 <_kill_r>:
 800f890:	b538      	push	{r3, r4, r5, lr}
 800f892:	4d07      	ldr	r5, [pc, #28]	@ (800f8b0 <_kill_r+0x20>)
 800f894:	2300      	movs	r3, #0
 800f896:	4604      	mov	r4, r0
 800f898:	4608      	mov	r0, r1
 800f89a:	4611      	mov	r1, r2
 800f89c:	602b      	str	r3, [r5, #0]
 800f89e:	f7f3 ff18 	bl	80036d2 <_kill>
 800f8a2:	1c43      	adds	r3, r0, #1
 800f8a4:	d102      	bne.n	800f8ac <_kill_r+0x1c>
 800f8a6:	682b      	ldr	r3, [r5, #0]
 800f8a8:	b103      	cbz	r3, 800f8ac <_kill_r+0x1c>
 800f8aa:	6023      	str	r3, [r4, #0]
 800f8ac:	bd38      	pop	{r3, r4, r5, pc}
 800f8ae:	bf00      	nop
 800f8b0:	20040a40 	.word	0x20040a40

0800f8b4 <_getpid_r>:
 800f8b4:	f7f3 bf05 	b.w	80036c2 <_getpid>

0800f8b8 <_init>:
 800f8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ba:	bf00      	nop
 800f8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8be:	bc08      	pop	{r3}
 800f8c0:	469e      	mov	lr, r3
 800f8c2:	4770      	bx	lr

0800f8c4 <_fini>:
 800f8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c6:	bf00      	nop
 800f8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ca:	bc08      	pop	{r3}
 800f8cc:	469e      	mov	lr, r3
 800f8ce:	4770      	bx	lr
